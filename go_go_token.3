.\"    Automatically generated by mango(1)
.TH "token" 3 "2014-11-26" "version 2014-11-26" "Go Packages"
.SH "NAME"
token \- Package token defines constants representing the lexical tokens of the Go
programming language and basic operations on tokens (printing, predicates).
.SH "SYNOPSIS"
.B import \*(lqtoken\(rq
.sp
.B Constants
.sp 0
.RB "type " File
.sp 0
.RS
.RB "func (*File) " AddLine
.sp 0
.RB "func (*File) " AddLineInfo
.sp 0
.RB "func (*File) " Base
.sp 0
.RB "func (*File) " Line
.sp 0
.RB "func (*File) " LineCount
.sp 0
.RB "func (*File) " MergeLine
.sp 0
.RB "func (*File) " Name
.sp 0
.RB "func (*File) " Offset
.sp 0
.RB "func (*File) " Pos
.sp 0
.RB "func (*File) " Position
.sp 0
.RB "func (*File) " SetLines
.sp 0
.RB "func (*File) " SetLinesForContent
.sp 0
.RB "func (*File) " Size
.sp 0
.RE
.RB "type " FileSet
.sp 0
.RS
.RB "func " NewFileSet
.sp 0
.RB "func (*FileSet) " AddFile
.sp 0
.RB "func (*FileSet) " Base
.sp 0
.RB "func (*FileSet) " File
.sp 0
.RB "func (*FileSet) " Iterate
.sp 0
.RB "func (*FileSet) " Position
.sp 0
.RB "func (*FileSet) " Read
.sp 0
.RB "func (*FileSet) " Write
.sp 0
.RE
.RB "type " Pos
.sp 0
.RS
.RB "func (Pos) " IsValid
.sp 0
.RE
.RB "type " Position
.sp 0
.RS
.RB "func (*Position) " IsValid
.sp 0
.RB "func (Position) " String
.sp 0
.RE
.RB "type " Token
.sp 0
.RS
.RB "func " Lookup
.sp 0
.RB "func (Token) " IsKeyword
.sp 0
.RB "func (Token) " IsLiteral
.sp 0
.RB "func (Token) " IsOperator
.sp 0
.RB "func (Token) " Precedence
.sp 0
.RB "func (Token) " String
.sp 0
.RE
.RB "type " lineInfo
.sp 0
.RB "type " serializedFile
.sp 0
.RB "type " serializedFileSet
.sp 0
.SH "CONSTANTS"
A set of constants for precedence\-based expression parsing. 
Non\-operators have lowest precedence, followed by operators starting with precedence 1 up to unary operators. 
The highest precedence serves as "catch\-all" precedence for selector, indexing, and other operator and delimiter tokens. 
.PP
.B const (
.RS
.B LowestPrec 
.sp 0
.B UnaryPrec 
.sp 0
.B HighestPrec 
.sp 0
.RE
.B )
.SH "TYPES"
.SS "File"
.B type File struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
A File is a handle for a file belonging to a FileSet. 
A File has a name, size, and line offset table. 
.PP
.BR "func (*File) AddLine(" "offset" " int)"
.PP
AddLine adds the line offset for a new line. 
The line offset must be larger than the offset for the previous line and smaller than the file size; otherwise the line offset is ignored. 
.PP
.BR "func (*File) AddLineInfo(" "offset" " int, " "filename" " string, " "line" " int)"
.PP
AddLineInfo adds alternative file and line number information for a given file offset. 
The offset must be larger than the offset for the previously added alternative line info and smaller than the file size; otherwise the information is ignored. 
.PP
AddLineInfo is typically used to register alternative position information for //line filename:line comments in source files. 
.PP
.BR "func (*File) Base() int"
.PP
Base returns the base offset of file f as registered with AddFile. 
.PP
.BR "func (*File) Line(" "p" " Pos) int"
.PP
Line returns the line number for the given file position p; p must be a Pos value in that file or NoPos. 
.PP
.BR "func (*File) LineCount() int"
.PP
LineCount returns the number of lines in file f. 
.PP
.BR "func (*File) MergeLine(" "line" " int)"
.PP
MergeLine merges a line with the following line. 
It is akin to replacing the newline character at the end of the line with a space (to not change the remaining offsets). 
To obtain the line number, consult e.g. 
Position.Line. 
MergeLine will panic if given an invalid line number. 
.PP
.BR "func (*File) Name() string"
.PP
Name returns the file name of file f as registered with AddFile. 
.PP
.BR "func (*File) Offset(" "p" " Pos) int"
.PP
Offset returns the offset for the given file position p; p must be a valid Pos value in that file. 
f.Offset(f.Pos(offset)) == offset. 
.PP
.BR "func (*File) Pos(" "offset" " int) Pos"
.PP
Pos returns the Pos value for the given file offset; the offset must be <= f.Size(). 
f.Pos(f.Offset(p)) == p. 
.PP
.BR "func (*File) Position(" "p" " Pos) (" "pos" " Position)"
.PP
Position returns the Position value for the given file position p; p must be a Pos value in that file or NoPos. 
.PP
.BR "func (*File) SetLines(" "lines" " []int) bool"
.PP
SetLines sets the line offsets for a file and returns true if successful. 
The line offsets are the offsets of the first character of each line; for instance for the content "ab\enc\en" the line offsets are {0, 3}. 
An empty file has an empty line offset table. 
Each line offset must be larger than the offset for the previous line and smaller than the file size; otherwise SetLines fails and returns false. 
.PP
.BR "func (*File) SetLinesForContent(" "content" " []byte)"
.PP
SetLinesForContent sets the line offsets for the given file content. 
.PP
.BR "func (*File) Size() int"
.PP
Size returns the size of file f as registered with AddFile. 
.SS "FileSet"
.B type FileSet struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
A FileSet represents a set of source files. 
Methods of file sets are synchronized; multiple goroutines may invoke them concurrently. 
.PP
.BR "func NewFileSet() *FileSet"
.PP
NewFileSet creates a new file set. 
.PP
.BR "func (*FileSet) AddFile(" "filename" " string, " "base" ", " "size" " int) *File"
.PP
AddFile adds a new file with a given filename, base offset, and file size to the file set s and returns the file. 
Multiple files may have the same name. 
The base offset must not be smaller than the FileSet's Base(), and size must not be negative. 
As a special case, if a negative base is provided, the current value of the FileSet's Base() is used instead. 
.PP
Adding the file will set the file set's Base() value to base + size + 1 as the minimum base value for the next file. 
The following relationship exists between a Pos value p for a given file offset offs: 
.PP
.RS
int(p) = base + offs
.sp 0
.sp
.RE
.PP
with offs in the range [0, size] and thus p in the range [base, base+size]. 
For convenience, File.Pos may be used to create file\-specific position values from a file offset. 
.PP
.BR "func (*FileSet) Base() int"
.PP
Base returns the minimum base offset that must be provided to AddFile when adding the next file. 
.PP
.BR "func (*FileSet) File(" "p" " Pos) (" "f" " *File)"
.PP
File returns the file that contains the position p. 
If no such file is found (for instance for p == NoPos), the result is nil. 
.PP
.BR "func (*FileSet) Iterate(" "f" " func(*File) bool)"
.PP
Iterate calls f for the files in the file set in the order they were added until f returns false. 
.PP
.BR "func (*FileSet) Position(" "p" " Pos) (" "pos" " Position)"
.PP
Position converts a Pos in the fileset into a general Position. 
.PP
.BR "func (*FileSet) Read(" "decode" " func(interface{}) error) error"
.PP
Read calls decode to deserialize a file set into s; s must not be nil. 
.PP
.BR "func (*FileSet) Write(" "encode" " func(interface{}) error) error"
.PP
Write calls encode to serialize the file set s. 
.SS "Pos"
.B type Pos int
.PP
Pos is a compact encoding of a source position within a file set. 
It can be converted into a Position for a more convenient, but much larger, representation. 
.PP
The Pos value for a given file is a number in the range [base, base+size], where base and size are specified when adding the file to the file set via AddFile. 
.PP
To create the Pos value for a specific source offset, first add the respective file to the current file set (via FileSet.AddFile) and then call File.Pos(offset) for that file. 
Given a Pos value p for a specific file set fset, the corresponding Position value is obtained by calling fset.Position(p). 
.PP
Pos values can be compared directly with the usual comparison operators: If two Pos values p and q are in the same file, comparing p and q is equivalent to comparing the respective source file offsets. 
If p and q are in different files, p < q is true if the file implied by p was added to the respective file set before the file implied by q. 
The zero value for Pos is NoPos; there is no file and line information associated with it, and NoPos().IsValid() is false. 
NoPos is always smaller than any other Pos value. 
The corresponding Position value for NoPos is the zero value for Position. 
.PP
.B const 
.B NoPos 
.sp 0
.PP
.BR "func (Pos) IsValid() bool"
.PP
IsValid returns true if the position is valid. 
.SS "Position"
.B type Position struct {
.RS
.B Filename string
.sp 0
.B Offset int
.sp 0
.B Line int
.sp 0
.B Column int
.RE
.B }
.PP
Position describes an arbitrary source position including the file, line, and column location. 
A Position is valid if the line number is > 0. 
.PP
.BR "func (*Position) IsValid() bool"
.PP
IsValid returns true if the position is valid. 
.PP
.BR "func (Position) String() string"
.PP
String returns a string in one of several forms:    
.PP
.RS
file:line:column    valid position with file name
.sp 0
line:column         valid position without file name
.sp 0
file                invalid position with file name
.sp 0
\-                   invalid position without file name
.RE
.SS "Token"
.B type Token int
.PP
Token is the set of lexical tokens of the Go programming language. 
The list of tokens. 
.PP
.B const (
.RS
.B ILLEGAL 
.sp 0
.B EOF 
.sp 0
.B COMMENT 
.sp 0
.B 
.sp 0
.B IDENT 
.sp 0
.B INT 
.sp 0
.B FLOAT 
.sp 0
.B IMAG 
.sp 0
.B CHAR 
.sp 0
.B STRING 
.sp 0
.B 
.sp 0
.B 
.sp 0
.B ADD 
.sp 0
.B SUB 
.sp 0
.B MUL 
.sp 0
.B QUO 
.sp 0
.B REM 
.sp 0
.B AND 
.sp 0
.B OR 
.sp 0
.B XOR 
.sp 0
.B SHL 
.sp 0
.B SHR 
.sp 0
.B AND_NOT 
.sp 0
.B ADD_ASSIGN 
.sp 0
.B SUB_ASSIGN 
.sp 0
.B MUL_ASSIGN 
.sp 0
.B QUO_ASSIGN 
.sp 0
.B REM_ASSIGN 
.sp 0
.B AND_ASSIGN 
.sp 0
.B OR_ASSIGN 
.sp 0
.B XOR_ASSIGN 
.sp 0
.B SHL_ASSIGN 
.sp 0
.B SHR_ASSIGN 
.sp 0
.B AND_NOT_ASSIGN 
.sp 0
.B LAND 
.sp 0
.B LOR 
.sp 0
.B ARROW 
.sp 0
.B INC 
.sp 0
.B DEC 
.sp 0
.B EQL 
.sp 0
.B LSS 
.sp 0
.B GTR 
.sp 0
.B ASSIGN 
.sp 0
.B NOT 
.sp 0
.B NEQ 
.sp 0
.B LEQ 
.sp 0
.B GEQ 
.sp 0
.B DEFINE 
.sp 0
.B ELLIPSIS 
.sp 0
.B LPAREN 
.sp 0
.B LBRACK 
.sp 0
.B LBRACE 
.sp 0
.B COMMA 
.sp 0
.B PERIOD 
.sp 0
.B RPAREN 
.sp 0
.B RBRACK 
.sp 0
.B RBRACE 
.sp 0
.B SEMICOLON 
.sp 0
.B COLON 
.sp 0
.B 
.sp 0
.B 
.sp 0
.B BREAK 
.sp 0
.B CASE 
.sp 0
.B CHAN 
.sp 0
.B CONST 
.sp 0
.B CONTINUE 
.sp 0
.B DEFAULT 
.sp 0
.B DEFER 
.sp 0
.B ELSE 
.sp 0
.B FALLTHROUGH 
.sp 0
.B FOR 
.sp 0
.B FUNC 
.sp 0
.B GO 
.sp 0
.B GOTO 
.sp 0
.B IF 
.sp 0
.B IMPORT 
.sp 0
.B INTERFACE 
.sp 0
.B MAP 
.sp 0
.B PACKAGE 
.sp 0
.B RANGE 
.sp 0
.B RETURN 
.sp 0
.B SELECT 
.sp 0
.B STRUCT 
.sp 0
.B SWITCH 
.sp 0
.B TYPE 
.sp 0
.B VAR 
.sp 0
.B 
.sp 0
.RE
.B )
.PP
.BR "func Lookup(" "ident" " string) Token"
.PP
Lookup maps an identifier to its keyword token or IDENT (if not a keyword). 
.PP
.BR "func (Token) IsKeyword() bool"
.PP
IsKeyword returns true for tokens corresponding to keywords; it returns false otherwise. 
.PP
.BR "func (Token) IsLiteral() bool"
.PP
IsLiteral returns true for tokens corresponding to identifiers and basic type literals; it returns false otherwise. 
.PP
.BR "func (Token) IsOperator() bool"
.PP
IsOperator returns true for tokens corresponding to operators and delimiters; it returns false otherwise. 
.PP
.BR "func (Token) Precedence() int"
.PP
Precedence returns the operator precedence of the binary operator op. 
If op is not a binary operator, the result is LowestPrecedence. 
.PP
.BR "func (Token) String() string"
.PP
String returns the string corresponding to the token tok. 
For operators, delimiters, and keywords the string is the actual token character sequence (e.g., for the token ADD, the string is "+"). 
For all other tokens the string corresponds to the token constant name (e.g. 
for the token IDENT, the string is "IDENT"). 
.SS "lineInfo"
.B type lineInfo struct {
.RS
.B Offset int
.sp 0
.B Filename string
.sp 0
.B Line int
.RE
.B }
.PP
A lineInfo object describes alternative file and line number information (such as provided via a //line comment in a \&.go file) for a given file offset. 
.SS "serializedFile"
.B type serializedFile struct {
.RS
.B Name string
.sp 0
.B Base int
.sp 0
.B Size int
.sp 0
.B Lines []int
.sp 0
.B Infos []lineInfo
.RE
.B }
.SS "serializedFileSet"
.B type serializedFileSet struct {
.RS
.B Base int
.sp 0
.B Files []serializedFile
.RE
.B }
.SH "SEE ALSO"
.BR int (p)
