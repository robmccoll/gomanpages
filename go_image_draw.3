.\"    Automatically generated by mango(1)
.TH "draw" 3 "2014-11-26" "version 2014-11-26" "Go Packages"
.SH "NAME"
draw \- Package draw provides image composition functions.
.SH "SYNOPSIS"
.B import \*(lqdraw\(rq
.sp
.RB "func " Draw
.sp 0
.RB "func " DrawMask
.sp 0
.RB "type " Drawer
.sp 0
.RB "type " Image
.sp 0
.RB "type " Op
.sp 0
.RS
.RB "func (Op) " Draw
.sp 0
.RE
.RB "type " Quantizer
.sp 0
.RB "type " floydSteinberg
.sp 0
.RS
.RB "func (floydSteinberg) " Draw
.sp 0
.RE
.SH "DESCRIPTION"
See "The Go image/draw package" for an introduction to this package: http://golang.org/doc/articles/image_draw.html 
.SH "FUNCTIONS"
.PP
.BR "func Draw(" "dst" " Image, " "r" " image.Rectangle, " "src" " image.Image, " "sp" " image.Point, " "op" " Op)"
.PP
Draw calls DrawMask with a nil mask. 
.PP
.BR "func DrawMask(" "dst" " Image, " "r" " image.Rectangle, " "src" " image.Image, " "sp" " image.Point, " "mask" " image.Image, " "mp" " image.Point, " "op" " Op)"
.PP
DrawMask aligns r.Min in dst with sp in src and mp in mask and then replaces the rectangle r in dst with the result of a Porter\-Duff composition. 
A nil mask is treated as opaque. 
.SH "TYPES"
.SS "Drawer"
.B type Drawer interface {
.RS
.B Draw(dst Image, r image.Rectangle, src image.Image, sp image.Point)
.sp 0
.RE
.B }
.PP
Drawer contains the Draw method. 
FloydSteinberg is a Drawer that is the Src Op with Floyd\-Steinberg error diffusion. 
.PP
.B var 
.B FloydSteinberg 
.sp 0
.SS "Image"
.B type Image interface {
.RS
.B image.Image
.sp 0
.B Set(x, y int, c color.Color)
.sp 0
.RE
.B }
.PP
Image is an image.Image with a Set method to change a single pixel. 
.SS "Op"
.B type Op int
.PP
Op is a Porter\-Duff compositing operator. 
.PP
.B const (
.RS
.B Over 
.sp 0
.B Src 
.sp 0
.RE
.B )
.PP
.BR "func (Op) Draw(" "dst" " Image, " "r" " image.Rectangle, " "src" " image.Image, " "sp" " image.Point)"
.PP
Draw implements the Drawer interface by calling the Draw function with this Op. 
.SS "Quantizer"
.B type Quantizer interface {
.RS
.B Quantize(p color.Palette, m image.Image) color.Palette
.sp 0
.RE
.B }
.PP
Quantizer produces a palette for an image. 
.SS "floydSteinberg"
.B type floydSteinberg struct {
.RS
.RE
.B }
.PP
.PP
.BR "func (floydSteinberg) Draw(" "dst" " Image, " "r" " image.Rectangle, " "src" " image.Image, " "sp" " image.Point)"
