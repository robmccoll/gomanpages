.\"    Automatically generated by mango(1)
.TH "ring" 3 "2014-11-26" "version 2014-11-26" "Go Packages"
.SH "NAME"
ring \- Package ring implements operations on circular lists.
.SH "SYNOPSIS"
.B import \*(lqring\(rq
.sp
.RB "type " Ring
.sp 0
.RS
.RB "func " New
.sp 0
.RB "func (*Ring) " Do
.sp 0
.RB "func (*Ring) " Len
.sp 0
.RB "func (*Ring) " Link
.sp 0
.RB "func (*Ring) " Move
.sp 0
.RB "func (*Ring) " Next
.sp 0
.RB "func (*Ring) " Prev
.sp 0
.RB "func (*Ring) " Unlink
.sp 0
.RE
.SH "TYPES"
.SS "Ring"
.B type Ring struct {
.RS
.B Value interface{}
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
A Ring is an element of a circular list, or ring. 
Rings do not have a beginning or end; a pointer to any ring element serves as reference to the entire ring. 
Empty rings are represented as nil Ring pointers. 
The zero value for a Ring is a one\-element ring with a nil Value. 
.PP
.BR "func New(" "n" " int) *Ring"
.PP
New creates a ring of n elements. 
.PP
.BR "func (*Ring) Do(" "f" " func(interface{}))"
.PP
Do calls function f on each element of the ring, in forward order. 
The behavior of Do is undefined if f changes *r. 
.PP
.BR "func (*Ring) Len() int"
.PP
Len computes the number of elements in ring r. 
It executes in time proportional to the number of elements. 
.PP
.BR "func (*Ring) Link(" "s" " *Ring) *Ring"
.PP
Link connects ring r with ring s such that r.Next() becomes s and returns the original value for r.Next(). 
r must not be empty. 
.PP
If r and s point to the same ring, linking them removes the elements between r and s from the ring. 
The removed elements form a subring and the result is a reference to that subring (if no elements were removed, the result is still the original value for r.Next(), and not nil). 
.PP
If r and s point to different rings, linking them creates a single ring with the elements of s inserted after r. 
The result points to the element following the last element of s after insertion. 
.PP
.BR "func (*Ring) Move(" "n" " int) *Ring"
.PP
Move moves n % r.Len() elements backward (n < 0) or forward (n >= 0) in the ring and returns that ring element. 
r must not be empty. 
.PP
.BR "func (*Ring) Next() *Ring"
.PP
Next returns the next ring element. 
r must not be empty. 
.PP
.BR "func (*Ring) Prev() *Ring"
.PP
Prev returns the previous ring element. 
r must not be empty. 
.PP
.BR "func (*Ring) Unlink(" "n" " int) *Ring"
.PP
Unlink removes n % r.Len() elements from the ring r, starting at r.Next(). 
If n % r.Len() == 0, r remains unchanged. 
The result is the removed subring. 
r must not be empty. 
