.\"    Automatically generated by mango(1)
.TH "pe" 3 "2014-11-26" "version 2014-11-26" "Go Packages"
.SH "NAME"
pe \- Package pe implements access to PE (Microsoft Windows Portable Executable) files.
.SH "SYNOPSIS"
.B import \*(lqpe\(rq
.sp
.B Constants
.sp 0
.RB "type " COFFSymbol
.sp 0
.RB "type " DataDirectory
.sp 0
.RB "type " File
.sp 0
.RS
.RB "func " NewFile
.sp 0
.RB "func " Open
.sp 0
.RB "func (*File) " Close
.sp 0
.RB "func (*File) " DWARF
.sp 0
.RB "func (*File) " ImportedLibraries
.sp 0
.RB "func (*File) " ImportedSymbols
.sp 0
.RB "func (*File) " Section
.sp 0
.RE
.RB "type " FileHeader
.sp 0
.RB "type " FormatError
.sp 0
.RS
.RB "func (*FormatError) " Error
.sp 0
.RE
.RB "type " ImportDirectory
.sp 0
.RB "type " OptionalHeader32
.sp 0
.RB "type " OptionalHeader64
.sp 0
.RB "type " Section
.sp 0
.RS
.RB "func (*Section) " Data
.sp 0
.RB "func (*Section) " Open
.sp 0
.RE
.RB "type " SectionHeader
.sp 0
.RB "type " SectionHeader32
.sp 0
.RB "type " Symbol
.sp 0
.SH "CONSTANTS"
.PP
.B const (
.RS
.B IMAGE_FILE_MACHINE_UNKNOWN 
.sp 0
.B IMAGE_FILE_MACHINE_AM33 
.sp 0
.B IMAGE_FILE_MACHINE_AMD64 
.sp 0
.B IMAGE_FILE_MACHINE_ARM 
.sp 0
.B IMAGE_FILE_MACHINE_EBC 
.sp 0
.B IMAGE_FILE_MACHINE_I386 
.sp 0
.B IMAGE_FILE_MACHINE_IA64 
.sp 0
.B IMAGE_FILE_MACHINE_M32R 
.sp 0
.B IMAGE_FILE_MACHINE_MIPS16 
.sp 0
.B IMAGE_FILE_MACHINE_MIPSFPU 
.sp 0
.B IMAGE_FILE_MACHINE_MIPSFPU16 
.sp 0
.B IMAGE_FILE_MACHINE_POWERPC 
.sp 0
.B IMAGE_FILE_MACHINE_POWERPCFP 
.sp 0
.B IMAGE_FILE_MACHINE_R4000 
.sp 0
.B IMAGE_FILE_MACHINE_SH3 
.sp 0
.B IMAGE_FILE_MACHINE_SH3DSP 
.sp 0
.B IMAGE_FILE_MACHINE_SH4 
.sp 0
.B IMAGE_FILE_MACHINE_SH5 
.sp 0
.B IMAGE_FILE_MACHINE_THUMB 
.sp 0
.B IMAGE_FILE_MACHINE_WCEMIPSV2 
.sp 0
.RE
.B )
.sp 0
.PP
.B const 
.B COFFSymbolSize 
.sp 0
.SH "TYPES"
.SS "COFFSymbol"
.B type COFFSymbol struct {
.RS
.B Name []uint8
.sp 0
.B Value uint32
.sp 0
.B SectionNumber int16
.sp 0
.B Type uint16
.sp 0
.B StorageClass uint8
.sp 0
.B NumberOfAuxSymbols uint8
.RE
.B }
.SS "DataDirectory"
.B type DataDirectory struct {
.RS
.B VirtualAddress uint32
.sp 0
.B Size uint32
.RE
.B }
.SS "File"
.B type File struct {
.RS
.B FileHeader
.sp 0
.B OptionalHeader interface{}
.sp 0
.B Sections []*Section
.sp 0
.B Symbols []*Symbol
.sp 0
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
A File represents an open PE file. 
.PP
.BR "func NewFile(" "r" " io.ReaderAt) (*File, error)"
.PP
NewFile creates a new File for accessing a PE binary in an underlying reader. 
.PP
.BR "func Open(" "name" " string) (*File, error)"
.PP
Open opens the named file using os.Open and prepares it for use as a PE binary. 
.PP
.BR "func (*File) Close() error"
.PP
Close closes the File. 
If the File was created using NewFile directly instead of Open, Close has no effect. 
.PP
.BR "func (*File) DWARF() (*dwarf.Data, error)"
.PP
.BR "func (*File) ImportedLibraries() ([]string, error)"
.PP
ImportedLibraries returns the names of all libraries referred to by the binary f that are expected to be linked with the binary at dynamic link time. 
.PP
.BR "func (*File) ImportedSymbols() ([]string, error)"
.PP
ImportedSymbols returns the names of all symbols referred to by the binary f that are expected to be satisfied by other libraries at dynamic load time. 
It does not return weak symbols. 
.PP
.BR "func (*File) Section(" "name" " string) *Section"
.PP
Section returns the first section with the given name, or nil if no such section exists. 
.SS "FileHeader"
.B type FileHeader struct {
.RS
.B Machine uint16
.sp 0
.B NumberOfSections uint16
.sp 0
.B TimeDateStamp uint32
.sp 0
.B PointerToSymbolTable uint32
.sp 0
.B NumberOfSymbols uint32
.sp 0
.B SizeOfOptionalHeader uint16
.sp 0
.B Characteristics uint16
.RE
.B }
.SS "FormatError"
.B type FormatError struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
.PP
.BR "func (*FormatError) Error() string"
.SS "ImportDirectory"
.B type ImportDirectory struct {
.RS
.B OriginalFirstThunk uint32
.sp 0
.B TimeDateStamp uint32
.sp 0
.B ForwarderChain uint32
.sp 0
.B Name uint32
.sp 0
.B FirstThunk uint32
.sp 0
.sp 0
.B //contains unexported fields.
.RE
.B }
.SS "OptionalHeader32"
.B type OptionalHeader32 struct {
.RS
.B Magic uint16
.sp 0
.B MajorLinkerVersion uint8
.sp 0
.B MinorLinkerVersion uint8
.sp 0
.B SizeOfCode uint32
.sp 0
.B SizeOfInitializedData uint32
.sp 0
.B SizeOfUninitializedData uint32
.sp 0
.B AddressOfEntryPoint uint32
.sp 0
.B BaseOfCode uint32
.sp 0
.B BaseOfData uint32
.sp 0
.B ImageBase uint32
.sp 0
.B SectionAlignment uint32
.sp 0
.B FileAlignment uint32
.sp 0
.B MajorOperatingSystemVersion uint16
.sp 0
.B MinorOperatingSystemVersion uint16
.sp 0
.B MajorImageVersion uint16
.sp 0
.B MinorImageVersion uint16
.sp 0
.B MajorSubsystemVersion uint16
.sp 0
.B MinorSubsystemVersion uint16
.sp 0
.B Win32VersionValue uint32
.sp 0
.B SizeOfImage uint32
.sp 0
.B SizeOfHeaders uint32
.sp 0
.B CheckSum uint32
.sp 0
.B Subsystem uint16
.sp 0
.B DllCharacteristics uint16
.sp 0
.B SizeOfStackReserve uint32
.sp 0
.B SizeOfStackCommit uint32
.sp 0
.B SizeOfHeapReserve uint32
.sp 0
.B SizeOfHeapCommit uint32
.sp 0
.B LoaderFlags uint32
.sp 0
.B NumberOfRvaAndSizes uint32
.sp 0
.B DataDirectory []DataDirectory
.RE
.B }
.SS "OptionalHeader64"
.B type OptionalHeader64 struct {
.RS
.B Magic uint16
.sp 0
.B MajorLinkerVersion uint8
.sp 0
.B MinorLinkerVersion uint8
.sp 0
.B SizeOfCode uint32
.sp 0
.B SizeOfInitializedData uint32
.sp 0
.B SizeOfUninitializedData uint32
.sp 0
.B AddressOfEntryPoint uint32
.sp 0
.B BaseOfCode uint32
.sp 0
.B ImageBase uint64
.sp 0
.B SectionAlignment uint32
.sp 0
.B FileAlignment uint32
.sp 0
.B MajorOperatingSystemVersion uint16
.sp 0
.B MinorOperatingSystemVersion uint16
.sp 0
.B MajorImageVersion uint16
.sp 0
.B MinorImageVersion uint16
.sp 0
.B MajorSubsystemVersion uint16
.sp 0
.B MinorSubsystemVersion uint16
.sp 0
.B Win32VersionValue uint32
.sp 0
.B SizeOfImage uint32
.sp 0
.B SizeOfHeaders uint32
.sp 0
.B CheckSum uint32
.sp 0
.B Subsystem uint16
.sp 0
.B DllCharacteristics uint16
.sp 0
.B SizeOfStackReserve uint64
.sp 0
.B SizeOfStackCommit uint64
.sp 0
.B SizeOfHeapReserve uint64
.sp 0
.B SizeOfHeapCommit uint64
.sp 0
.B LoaderFlags uint32
.sp 0
.B NumberOfRvaAndSizes uint32
.sp 0
.B DataDirectory []DataDirectory
.RE
.B }
.SS "Section"
.B type Section struct {
.RS
.B SectionHeader
.sp 0
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
.PP
.BR "func (*Section) Data() ([]byte, error)"
.PP
Data reads and returns the contents of the PE section. 
.PP
.BR "func (*Section) Open() io.ReadSeeker"
.PP
Open returns a new ReadSeeker reading the PE section. 
.SS "SectionHeader"
.B type SectionHeader struct {
.RS
.B Name string
.sp 0
.B VirtualSize uint32
.sp 0
.B VirtualAddress uint32
.sp 0
.B Size uint32
.sp 0
.B Offset uint32
.sp 0
.B PointerToRelocations uint32
.sp 0
.B PointerToLineNumbers uint32
.sp 0
.B NumberOfRelocations uint16
.sp 0
.B NumberOfLineNumbers uint16
.sp 0
.B Characteristics uint32
.RE
.B }
.SS "SectionHeader32"
.B type SectionHeader32 struct {
.RS
.B Name []uint8
.sp 0
.B VirtualSize uint32
.sp 0
.B VirtualAddress uint32
.sp 0
.B SizeOfRawData uint32
.sp 0
.B PointerToRawData uint32
.sp 0
.B PointerToRelocations uint32
.sp 0
.B PointerToLineNumbers uint32
.sp 0
.B NumberOfRelocations uint16
.sp 0
.B NumberOfLineNumbers uint16
.sp 0
.B Characteristics uint32
.RE
.B }
.SS "Symbol"
.B type Symbol struct {
.RS
.B Name string
.sp 0
.B Value uint32
.sp 0
.B SectionNumber int16
.sp 0
.B Type uint16
.sp 0
.B StorageClass uint8
.RE
.B }
