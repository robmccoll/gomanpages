.\"    Automatically generated by mango(1)
.TH "binary" 3 "2014-11-26" "version 2014-11-26" "Go Packages"
.SH "NAME"
binary \- Package binary implements simple translation between numbers and byte
sequences and encoding and decoding of varints.
.SH "SYNOPSIS"
.B import \*(lqbinary\(rq
.sp
.B Constants
.sp 0
.RB "func " PutUvarint
.sp 0
.RB "func " PutVarint
.sp 0
.RB "func " Read
.sp 0
.RB "func " ReadUvarint
.sp 0
.RB "func " ReadVarint
.sp 0
.RB "func " Size
.sp 0
.RB "func " Uvarint
.sp 0
.RB "func " Varint
.sp 0
.RB "func " Write
.sp 0
.RB "type " ByteOrder
.sp 0
.RB "type " bigEndian
.sp 0
.RS
.RB "func (bigEndian) " GoString
.sp 0
.RB "func (bigEndian) " PutUint16
.sp 0
.RB "func (bigEndian) " PutUint32
.sp 0
.RB "func (bigEndian) " PutUint64
.sp 0
.RB "func (bigEndian) " String
.sp 0
.RB "func (bigEndian) " Uint16
.sp 0
.RB "func (bigEndian) " Uint32
.sp 0
.RB "func (bigEndian) " Uint64
.sp 0
.RE
.RB "type " littleEndian
.sp 0
.RS
.RB "func (littleEndian) " GoString
.sp 0
.RB "func (littleEndian) " PutUint16
.sp 0
.RB "func (littleEndian) " PutUint32
.sp 0
.RB "func (littleEndian) " PutUint64
.sp 0
.RB "func (littleEndian) " String
.sp 0
.RB "func (littleEndian) " Uint16
.sp 0
.RB "func (littleEndian) " Uint32
.sp 0
.RB "func (littleEndian) " Uint64
.sp 0
.RE
.SH "DESCRIPTION"
Numbers are translated by reading and writing fixed\-size values. 
A fixed\-size value is either a fixed\-size arithmetic type (int8, uint8, int16, float32, complex64, \&...) or an array or struct containing only fixed\-size values. 
.PP
Varints are a method of encoding integers using one or more bytes; numbers with smaller absolute value take a smaller number of bytes. 
For a specification, see http://code.google.com/apis/protocolbuffers/docs/encoding.html. 
.PP
This package favors simplicity over efficiency. 
Clients that require high\-performance serialization, especially for large data structures, should look at more advanced solutions such as the encoding/gob package or protocol buffers. 
.SH "CONSTANTS"
MaxVarintLenN is the maximum length of a varint\-encoded N\-bit integer. 
.PP
.B const (
.RS
.B MaxVarintLen16 
.sp 0
.B MaxVarintLen32 
.sp 0
.B MaxVarintLen64 
.sp 0
.RE
.B )
.SH "FUNCTIONS"
.PP
.BR "func PutUvarint(" "buf" " []byte, " "x" " uint64) int"
.PP
PutUvarint encodes a uint64 into buf and returns the number of bytes written. 
If the buffer is too small, PutUvarint will panic. 
.PP
.BR "func PutVarint(" "buf" " []byte, " "x" " int64) int"
.PP
PutVarint encodes an int64 into buf and returns the number of bytes written. 
If the buffer is too small, PutVarint will panic. 
.PP
.BR "func Read(" "r" " io.Reader, " "order" " ByteOrder, " "data" " interface{}) error"
.PP
Read reads structured binary data from r into data. 
Data must be a pointer to a fixed\-size value or a slice of fixed\-size values. 
Bytes read from r are decoded using the specified byte order and written to successive fields of the data. 
When reading into structs, the field data for fields with blank (_) field names is skipped; i.e., blank field names may be used for padding. 
When reading into a struct, all non\-blank fields must be exported. 
.PP
.BR "func ReadUvarint(" "r" " io.ByteReader) (uint64, error)"
.PP
ReadUvarint reads an encoded unsigned integer from r and returns it as a uint64. 
.PP
.BR "func ReadVarint(" "r" " io.ByteReader) (int64, error)"
.PP
ReadVarint reads an encoded signed integer from r and returns it as an int64. 
.PP
.BR "func Size(" "v" " interface{}) int"
.PP
Size returns how many bytes Write would generate to encode the value v, which must be a fixed\-size value or a slice of fixed\-size values, or a pointer to such data. 
.PP
.BR "func Uvarint(" "buf" " []byte) (uint64, int)"
.PP
Uvarint decodes a uint64 from buf and returns that value and the number of bytes read (> 0). 
If an error occurred, the value is 0 and the number of bytes n is <= 0 meaning: 
.PP
.RS
n == 0: buf too small
.sp 0
n  < 0: value larger than 64 bits (overflow)
.sp 0
.RS
and \-n is the number of bytes read
.RE
.RE
.PP
.BR "func Varint(" "buf" " []byte) (int64, int)"
.PP
Varint decodes an int64 from buf and returns that value and the number of bytes read (> 0). 
If an error occurred, the value is 0 and the number of bytes n is <= 0 with the following meaning: 
.PP
.RS
n == 0: buf too small
.sp 0
n  < 0: value larger than 64 bits (overflow)
.sp 0
.RS
and \-n is the number of bytes read
.RE
.RE
.PP
.BR "func Write(" "w" " io.Writer, " "order" " ByteOrder, " "data" " interface{}) error"
.PP
Write writes the binary representation of data into w. 
Data must be a fixed\-size value or a slice of fixed\-size values, or a pointer to such data. 
Bytes written to w are encoded using the specified byte order and read from successive fields of the data. 
When writing structs, zero values are written for fields with blank (_) field names. 
.SH "TYPES"
.SS "ByteOrder"
.B type ByteOrder interface {
.RS
.B Uint16([]byte) uint16
.sp 0
.B Uint32([]byte) uint32
.sp 0
.B Uint64([]byte) uint64
.sp 0
.B PutUint16([]byte, uint16)
.sp 0
.B PutUint32([]byte, uint32)
.sp 0
.B PutUint64([]byte, uint64)
.sp 0
.B String() string
.sp 0
.RE
.B }
.PP
A ByteOrder specifies how to convert byte sequences into 16\-, 32\-, or 64\-bit unsigned integers. 
.SS "bigEndian"
.B type bigEndian struct {
.RS
.RE
.B }
.PP
BigEndian is the big\-endian implementation of ByteOrder. 
.PP
.B var 
.B BigEndian 
.sp 0
.PP
.BR "func (bigEndian) GoString() string"
.PP
.BR "func (bigEndian) PutUint16(" "b" " []byte, " "v" " uint16)"
.PP
.BR "func (bigEndian) PutUint32(" "b" " []byte, " "v" " uint32)"
.PP
.BR "func (bigEndian) PutUint64(" "b" " []byte, " "v" " uint64)"
.PP
.BR "func (bigEndian) String() string"
.PP
.BR "func (bigEndian) Uint16(" "b" " []byte) uint16"
.PP
.BR "func (bigEndian) Uint32(" "b" " []byte) uint32"
.PP
.BR "func (bigEndian) Uint64(" "b" " []byte) uint64"
.SS "littleEndian"
.B type littleEndian struct {
.RS
.RE
.B }
.PP
LittleEndian is the little\-endian implementation of ByteOrder. 
.PP
.B var 
.B LittleEndian 
.sp 0
.PP
.BR "func (littleEndian) GoString() string"
.PP
.BR "func (littleEndian) PutUint16(" "b" " []byte, " "v" " uint16)"
.PP
.BR "func (littleEndian) PutUint32(" "b" " []byte, " "v" " uint32)"
.PP
.BR "func (littleEndian) PutUint64(" "b" " []byte, " "v" " uint64)"
.PP
.BR "func (littleEndian) String() string"
.PP
.BR "func (littleEndian) Uint16(" "b" " []byte) uint16"
.PP
.BR "func (littleEndian) Uint32(" "b" " []byte) uint32"
.PP
.BR "func (littleEndian) Uint64(" "b" " []byte) uint64"
