.\"    Automatically generated by mango(1)
.TH "flate" 3 "2014-11-26" "version 2014-11-26" "Go Packages"
.SH "NAME"
flate \- Package flate implements the DEFLATE compressed data format, described in
RFC 1951.
.SH "SYNOPSIS"
.B import \*(lqflate\(rq
.sp
.B Constants
.sp 0
.RB "func " NewReader
.sp 0
.RB "func " NewReaderDict
.sp 0
.RB "type " CorruptInputError
.sp 0
.RS
.RB "func (CorruptInputError) " Error
.sp 0
.RE
.RB "type " InternalError
.sp 0
.RS
.RB "func (InternalError) " Error
.sp 0
.RE
.RB "type " ReadError
.sp 0
.RS
.RB "func (*ReadError) " Error
.sp 0
.RE
.RB "type " Reader
.sp 0
.RS
.RE
.RB "type " WriteError
.sp 0
.RS
.RB "func (*WriteError) " Error
.sp 0
.RE
.RB "type " Writer
.sp 0
.RS
.RB "func " NewWriter
.sp 0
.RB "func " NewWriterDict
.sp 0
.RB "func (*Writer) " Close
.sp 0
.RB "func (*Writer) " Flush
.sp 0
.RB "func (*Writer) " Reset
.sp 0
.RB "func (*Writer) " Write
.sp 0
.RE
.RB "type " decompressor
.sp 0
.RS
.RB "func (*decompressor) " Close
.sp 0
.RB "func (*decompressor) " Read
.sp 0
.RE
.RB "type " dictWriter
.sp 0
.RS
.RB "func (*dictWriter) " Write
.sp 0
.RE
.RB "type " literalNodeSorter
.sp 0
.RS
.RB "func (literalNodeSorter) " Len
.sp 0
.RB "func (literalNodeSorter) " Less
.sp 0
.RB "func (literalNodeSorter) " Swap
.sp 0
.RE
.SH "DESCRIPTION"
Package flate implements the DEFLATE compressed data format, described in RFC 1951. 
The gzip and zlib packages implement access to DEFLATE\-based file formats. 
.SH "CONSTANTS"
.PP
.B const (
.RS
.B NoCompression 
.sp 0
.B BestSpeed 
.sp 0
.B 
.sp 0
.B BestCompression 
.sp 0
.B DefaultCompression 
.sp 0
.B 
.sp 0
.B 
.sp 0
.B 
.sp 0
.B 
.sp 0
.B 
.sp 0
.B 
.sp 0
.B 
.sp 0
.B 
.sp 0
.B 
.sp 0
.B 
.sp 0
.B 
.sp 0
.B 
.sp 0
.B 
.sp 0
.B 
.sp 0
.B 
.sp 0
.RE
.B )
.SH "FUNCTIONS"
.PP
.BR "func NewReader(" "r" " io.Reader) io.ReadCloser"
.PP
NewReader returns a new ReadCloser that can be used to read the uncompressed version of r. 
It is the caller's responsibility to call Close on the ReadCloser when finished reading. 
.PP
.BR "func NewReaderDict(" "r" " io.Reader, " "dict" " []byte) io.ReadCloser"
.PP
NewReaderDict is like NewReader but initializes the reader with a preset dictionary. 
The returned Reader behaves as if the uncompressed data stream started with the given dictionary, which has already been read. 
NewReaderDict is typically used to read data compressed by NewWriterDict. 
.SH "TYPES"
.SS "CorruptInputError"
.B type CorruptInputError int64
.PP
A CorruptInputError reports the presence of corrupt input at a given offset. 
.PP
.BR "func (CorruptInputError) Error() string"
.SS "InternalError"
.B type InternalError string
.PP
An InternalError reports an error in the flate code itself. 
.PP
.BR "func (InternalError) Error() string"
.SS "ReadError"
.B type ReadError struct {
.RS
.B Offset int64
.sp 0
.B Err error
.RE
.B }
.PP
A ReadError reports an error encountered while reading input. 
.PP
.BR "func (*ReadError) Error() string"
.SS "Reader"
.B type Reader interface {
.RS
.B io.Reader
.sp 0
.B io.ByteReader
.sp 0
.RE
.B }
.PP
The actual read interface needed by NewReader. 
If the passed in io.Reader does not also have ReadByte, the NewReader will introduce its own buffering. 
.SS "WriteError"
.B type WriteError struct {
.RS
.B Offset int64
.sp 0
.B Err error
.RE
.B }
.PP
A WriteError reports an error encountered while writing output. 
.PP
.BR "func (*WriteError) Error() string"
.SS "Writer"
.B type Writer struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
A Writer takes data written to it and writes the compressed form of that data to an underlying writer (see NewWriter). 
.PP
.BR "func NewWriter(" "w" " io.Writer, " "level" " int) (*Writer, error)"
.PP
NewWriter returns a new Writer compressing data at the given level. 
Following zlib, levels range from 1 (BestSpeed) to 9 (BestCompression); higher levels typically run slower but compress more. 
Level 0 (NoCompression) does not attempt any compression; it only adds the necessary DEFLATE framing. 
Level 
.B \-1
(DefaultCompression) uses the default compression level. 
.PP
If level is in the range [\-1, 9] then the error returned will be nil. 
Otherwise the error returned will be non\-nil. 
.PP
.BR "func NewWriterDict(" "w" " io.Writer, " "level" " int, " "dict" " []byte) (*Writer, error)"
.PP
NewWriterDict is like NewWriter but initializes the new Writer with a preset dictionary. 
The returned Writer behaves as if the dictionary had been written to it without producing any compressed output. 
The compressed data written to w can only be decompressed by a Reader initialized with the same dictionary. 
.PP
.BR "func (*Writer) Close() error"
.PP
Close flushes and closes the writer. 
.PP
.BR "func (*Writer) Flush() error"
.PP
Flush flushes any pending compressed data to the underlying writer. 
It is useful mainly in compressed network protocols, to ensure that a remote reader has enough data to reconstruct a packet. 
Flush does not return until the data has been written. 
If the underlying writer returns an error, Flush returns that error. 
.PP
In the terminology of the zlib library, Flush is equivalent to Z_SYNC_FLUSH. 
.PP
.BR "func (*Writer) Reset(" "dst" " io.Writer)"
.PP
Reset discards the writer's state and makes it equivalent to the result of NewWriter or NewWriterDict called with dst and w's level and dictionary. 
.PP
.BR "func (*Writer) Write(" "data" " []byte) (" "n" " int, " "err" " error)"
.PP
Write writes data to w, which will eventually write the compressed form of data to its underlying writer. 
.SS "decompressor"
.B type decompressor struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
Decompress state. 
.PP
.BR "func (*decompressor) Close() error"
.PP
.BR "func (*decompressor) Read(" "b" " []byte) (int, error)"
.SS "dictWriter"
.B type dictWriter struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
.PP
.BR "func (*dictWriter) Write(" "b" " []byte) (" "n" " int, " "err" " error)"
.SS "literalNodeSorter"
.B type literalNodeSorter struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
.PP
.BR "func (literalNodeSorter) Len() int"
.PP
.BR "func (literalNodeSorter) Less(" "i" ", " "j" " int) bool"
.PP
.BR "func (literalNodeSorter) Swap(" "i" ", " "j" " int)"
