.\"    Automatically generated by mango(1)
.TH "io" 3 "2014-11-26" "version 2014-11-26" "Go Packages"
.SH "NAME"
io \- Package io provides basic interfaces to I/O primitives.
.SH "SYNOPSIS"
.B import \*(lqio\(rq
.sp
.B Variables
.sp 0
.RB "func " Copy
.sp 0
.RB "func " CopyN
.sp 0
.RB "func " ReadAtLeast
.sp 0
.RB "func " ReadFull
.sp 0
.RB "func " WriteString
.sp 0
.RB "type " ByteReader
.sp 0
.RB "type " ByteScanner
.sp 0
.RB "type " ByteWriter
.sp 0
.RB "type " Closer
.sp 0
.RB "type " LimitedReader
.sp 0
.RS
.RB "func (*LimitedReader) " Read
.sp 0
.RE
.RB "type " PipeReader
.sp 0
.RS
.RB "func " Pipe
.sp 0
.RB "func (*PipeReader) " Close
.sp 0
.RB "func (*PipeReader) " CloseWithError
.sp 0
.RB "func (*PipeReader) " Read
.sp 0
.RE
.RB "type " PipeWriter
.sp 0
.RS
.RB "func (*PipeWriter) " Close
.sp 0
.RB "func (*PipeWriter) " CloseWithError
.sp 0
.RB "func (*PipeWriter) " Write
.sp 0
.RE
.RB "type " ReadCloser
.sp 0
.RB "type " ReadSeeker
.sp 0
.RB "type " ReadWriteCloser
.sp 0
.RB "type " ReadWriteSeeker
.sp 0
.RB "type " ReadWriter
.sp 0
.RB "type " Reader
.sp 0
.RS
.RB "func " LimitReader
.sp 0
.RB "func " MultiReader
.sp 0
.RB "func " TeeReader
.sp 0
.RE
.RB "type " ReaderAt
.sp 0
.RB "type " ReaderFrom
.sp 0
.RB "type " RuneReader
.sp 0
.RB "type " RuneScanner
.sp 0
.RB "type " SectionReader
.sp 0
.RS
.RB "func " NewSectionReader
.sp 0
.RB "func (*SectionReader) " Read
.sp 0
.RB "func (*SectionReader) " ReadAt
.sp 0
.RB "func (*SectionReader) " Seek
.sp 0
.RB "func (*SectionReader) " Size
.sp 0
.RE
.RB "type " Seeker
.sp 0
.RB "type " WriteCloser
.sp 0
.RB "type " WriteSeeker
.sp 0
.RB "type " Writer
.sp 0
.RS
.RB "func " MultiWriter
.sp 0
.RE
.RB "type " WriterAt
.sp 0
.RB "type " WriterTo
.sp 0
.RB "type " multiReader
.sp 0
.RS
.RB "func (*multiReader) " Read
.sp 0
.RE
.RB "type " multiWriter
.sp 0
.RS
.RB "func (*multiWriter) " Write
.sp 0
.RE
.RB "type " stringWriter
.sp 0
.RB "type " teeReader
.sp 0
.RS
.RB "func (*teeReader) " Read
.sp 0
.RE
.SH "DESCRIPTION"
Package io provides basic interfaces to I/O primitives. 
Its primary job is to wrap existing implementations of such primitives, such as those in package os, into shared public interfaces that abstract the functionality, plus some other related primitives. 
.PP
Because these interfaces and primitives wrap lower\-level operations with various implementations, unless otherwise informed clients should not assume they are safe for parallel execution. 
.SH "VARIABLES"
EOF is the error returned by Read when no more input is available. 
Functions should return EOF only to signal a graceful end of input. 
If the EOF occurs unexpectedly in a structured data stream, the appropriate error is either ErrUnexpectedEOF or some other error giving more detail. 
.PP
.B var 
.B EOF 
.sp 0

.sp 0
ErrClosedPipe is the error used for read or write operations on a closed pipe. 
.PP
.B var 
.B ErrClosedPipe 
.sp 0

.sp 0
ErrNoProgress is returned by some clients of an io.Reader when many calls to Read have failed to return any data or error, usually the sign of a broken io.Reader implementation. 
.PP
.B var 
.B ErrNoProgress 
.sp 0

.sp 0
ErrShortBuffer means that a read required a longer buffer than was provided. 
.PP
.B var 
.B ErrShortBuffer 
.sp 0

.sp 0
ErrShortWrite means that a write accepted fewer bytes than requested but failed to return an explicit error. 
.PP
.B var 
.B ErrShortWrite 
.sp 0

.sp 0
ErrUnexpectedEOF means that EOF was encountered in the middle of reading a fixed\-size block or data structure. 
.PP
.B var 
.B ErrUnexpectedEOF 
.sp 0
.SH "FUNCTIONS"
.PP
.BR "func Copy(" "dst" " Writer, " "src" " Reader) (" "written" " int64, " "err" " error)"
.PP
Copy copies from src to dst until either EOF is reached on src or an error occurs. 
It returns the number of bytes copied and the first error encountered while copying, if any. 
.PP
A successful Copy returns err == nil, not err == EOF. 
Because Copy is defined to read from src until EOF, it does not treat an EOF from Read as an error to be reported. 
.PP
If src implements the WriterTo interface, the copy is implemented by calling src.WriteTo(dst). 
Otherwise, if dst implements the ReaderFrom interface, the copy is implemented by calling dst.ReadFrom(src). 
.PP
.BR "func CopyN(" "dst" " Writer, " "src" " Reader, " "n" " int64) (" "written" " int64, " "err" " error)"
.PP
CopyN copies n bytes (or until an error) from src to dst. 
It returns the number of bytes copied and the earliest error encountered while copying. 
On return, written == n if and only if err == nil. 
.PP
If dst implements the ReaderFrom interface, the copy is implemented using it. 
.PP
.BR "func ReadAtLeast(" "r" " Reader, " "buf" " []byte, " "min" " int) (" "n" " int, " "err" " error)"
.PP
ReadAtLeast reads from r into buf until it has read at least min bytes. 
It returns the number of bytes copied and an error if fewer bytes were read. 
The error is EOF only if no bytes were read. 
If an EOF happens after reading fewer than min bytes, ReadAtLeast returns ErrUnexpectedEOF. 
If min is greater than the length of buf, ReadAtLeast returns ErrShortBuffer. 
On return, n >= min if and only if err == nil. 
.PP
.BR "func ReadFull(" "r" " Reader, " "buf" " []byte) (" "n" " int, " "err" " error)"
.PP
ReadFull reads exactly len(buf) bytes from r into buf. 
It returns the number of bytes copied and an error if fewer bytes were read. 
The error is EOF only if no bytes were read. 
If an EOF happens after reading some but not all the bytes, ReadFull returns ErrUnexpectedEOF. 
On return, n == len(buf) if and only if err == nil. 
.PP
.BR "func WriteString(" "w" " Writer, " "s" " string) (" "n" " int, " "err" " error)"
.PP
WriteString writes the contents of the string s to w, which accepts an array of bytes. 
If w already implements a WriteString method, it is invoked directly. 
.SH "TYPES"
.SS "ByteReader"
.B type ByteReader interface {
.RS
.B ReadByte() (c byte, err error)
.sp 0
.RE
.B }
.PP
ByteReader is the interface that wraps the ReadByte method. 
.PP
ReadByte reads and returns the next byte from the input. 
If no byte is available, err will be set. 
.SS "ByteScanner"
.B type ByteScanner interface {
.RS
.B ByteReader
.sp 0
.B UnreadByte() error
.sp 0
.RE
.B }
.PP
ByteScanner is the interface that adds the UnreadByte method to the basic ReadByte method. 
.PP
UnreadByte causes the next call to ReadByte to return the same byte as the previous call to ReadByte. 
It may be an error to call UnreadByte twice without an intervening call to ReadByte. 
.SS "ByteWriter"
.B type ByteWriter interface {
.RS
.B WriteByte(c byte) error
.sp 0
.RE
.B }
.PP
ByteWriter is the interface that wraps the WriteByte method. 
.SS "Closer"
.B type Closer interface {
.RS
.B Close() error
.sp 0
.RE
.B }
.PP
Closer is the interface that wraps the basic Close method. 
.PP
The behavior of Close after the first call is undefined. 
Specific implementations may document their own behavior. 
.SS "LimitedReader"
.B type LimitedReader struct {
.RS
.B R Reader
.sp 0
.B N int64
.RE
.B }
.PP
A LimitedReader reads from R but limits the amount of data returned to just N bytes. 
Each call to Read updates N to reflect the new amount remaining. 
.PP
.BR "func (*LimitedReader) Read(" "p" " []byte) (" "n" " int, " "err" " error)"
.SS "PipeReader"
.B type PipeReader struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
A PipeReader is the read half of a pipe. 
.PP
.BR "func Pipe() (*PipeReader, *PipeWriter)"
.PP
Pipe creates a synchronous in\-memory pipe. 
It can be used to connect code expecting an io.Reader with code expecting an io.Writer. 
Reads on one end are matched with writes on the other, copying data directly between the two; there is no internal buffering. 
It is safe to call Read and Write in parallel with each other or with Close. 
Close will complete once pending I/O is done. 
Parallel calls to Read, and parallel calls to Write, are also safe: the individual calls will be gated sequentially. 
.PP
.BR "func (*PipeReader) Close() error"
.PP
Close closes the reader; subsequent writes to the write half of the pipe will return the error ErrClosedPipe. 
.PP
.BR "func (*PipeReader) CloseWithError(" "err" " error) error"
.PP
CloseWithError closes the reader; subsequent writes to the write half of the pipe will return the error err. 
.PP
.BR "func (*PipeReader) Read(" "data" " []byte) (" "n" " int, " "err" " error)"
.PP
Read implements the standard Read interface: it reads data from the pipe, blocking until a writer arrives or the write end is closed. 
If the write end is closed with an error, that error is returned as err; otherwise err is EOF. 
.SS "PipeWriter"
.B type PipeWriter struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
A PipeWriter is the write half of a pipe. 
.PP
.BR "func (*PipeWriter) Close() error"
.PP
Close closes the writer; subsequent reads from the read half of the pipe will return no bytes and EOF. 
.PP
.BR "func (*PipeWriter) CloseWithError(" "err" " error) error"
.PP
CloseWithError closes the writer; subsequent reads from the read half of the pipe will return no bytes and the error err. 
.PP
.BR "func (*PipeWriter) Write(" "data" " []byte) (" "n" " int, " "err" " error)"
.PP
Write implements the standard Write interface: it writes data to the pipe, blocking until readers have consumed all the data or the read end is closed. 
If the read end is closed with an error, that err is returned as err; otherwise err is ErrClosedPipe. 
.SS "ReadCloser"
.B type ReadCloser interface {
.RS
.B Reader
.sp 0
.B Closer
.sp 0
.RE
.B }
.PP
ReadCloser is the interface that groups the basic Read and Close methods. 
.SS "ReadSeeker"
.B type ReadSeeker interface {
.RS
.B Reader
.sp 0
.B Seeker
.sp 0
.RE
.B }
.PP
ReadSeeker is the interface that groups the basic Read and Seek methods. 
.SS "ReadWriteCloser"
.B type ReadWriteCloser interface {
.RS
.B Reader
.sp 0
.B Writer
.sp 0
.B Closer
.sp 0
.RE
.B }
.PP
ReadWriteCloser is the interface that groups the basic Read, Write and Close methods. 
.SS "ReadWriteSeeker"
.B type ReadWriteSeeker interface {
.RS
.B Reader
.sp 0
.B Writer
.sp 0
.B Seeker
.sp 0
.RE
.B }
.PP
ReadWriteSeeker is the interface that groups the basic Read, Write and Seek methods. 
.SS "ReadWriter"
.B type ReadWriter interface {
.RS
.B Reader
.sp 0
.B Writer
.sp 0
.RE
.B }
.PP
ReadWriter is the interface that groups the basic Read and Write methods. 
.SS "Reader"
.B type Reader interface {
.RS
.B Read(p []byte) (n int, err error)
.sp 0
.RE
.B }
.PP
Reader is the interface that wraps the basic Read method. 
.PP
Read reads up to 
.BR len (p)
bytes into p. 
It returns the number of bytes read (0 <= n <= len(p)) and any error encountered. 
Even if Read returns n < len(p), it may use all of p as scratch space during the call. 
If some data is available but not 
.BR len (p)
bytes, Read conventionally returns what is available instead of waiting for more. 
.PP
When Read encounters an error or end\-of\-file condition after successfully reading n > 0 bytes, it returns the number of bytes read. 
It may return the (non\-nil) error from the same call or return the error (and n == 0) from a subsequent call. 
An instance of this general case is that a Reader returning a non\-zero number of bytes at the end of the input stream may return either err == EOF or err == nil. 
The next Read should return 0, EOF regardless. 
.PP
Callers should always process the n > 0 bytes returned before considering the error err. 
Doing so correctly handles I/O errors that happen after reading some bytes and also both of the allowed EOF behaviors. 
.PP
Implementations of Read are discouraged from returning a zero byte count with a nil error, and callers should treat that situation as a no\-op. 
.PP
.BR "func LimitReader(" "r" " Reader, " "n" " int64) Reader"
.PP
LimitReader returns a Reader that reads from r but stops with EOF after n bytes. 
The underlying implementation is a *LimitedReader. 
.PP
.BR "func MultiReader(" "readers" " ...Reader) Reader"
.PP
MultiReader returns a Reader that's the logical concatenation of the provided input readers. 
They're read sequentially. 
Once all inputs have returned EOF, Read will return EOF. 
If any of the readers return a non\-nil, non\-EOF error, Read will return that error. 
.PP
.BR "func TeeReader(" "r" " Reader, " "w" " Writer) Reader"
.PP
TeeReader returns a Reader that writes to w what it reads from r. 
All reads from r performed through it are matched with corresponding writes to w. 
There is no internal buffering 
.B \-
the write must complete before the read completes. 
Any error encountered while writing is reported as a read error. 
.SS "ReaderAt"
.B type ReaderAt interface {
.RS
.B ReadAt(p []byte, off int64) (n int, err error)
.sp 0
.RE
.B }
.PP
ReaderAt is the interface that wraps the basic ReadAt method. 
.PP
ReadAt reads 
.BR len (p)
bytes into p starting at offset off in the underlying input source. 
It returns the number of bytes read (0 <= n <= len(p)) and any error encountered. 
.PP
When ReadAt returns n < len(p), it returns a non\-nil error explaining why more bytes were not returned. 
In this respect, ReadAt is stricter than Read. 
.PP
Even if ReadAt returns n < len(p), it may use all of p as scratch space during the call. 
If some data is available but not 
.BR len (p)
bytes, ReadAt blocks until either all the data is available or an error occurs. 
In this respect ReadAt is different from Read. 
.PP
If the n = 
.BR len (p)
bytes returned by ReadAt are at the end of the input source, ReadAt may return either err == EOF or err == nil. 
.PP
If ReadAt is reading from an input source with a seek offset, ReadAt should not affect nor be affected by the underlying seek offset. 
.PP
Clients of ReadAt can execute parallel ReadAt calls on the same input source. 
.SS "ReaderFrom"
.B type ReaderFrom interface {
.RS
.B ReadFrom(r Reader) (n int64, err error)
.sp 0
.RE
.B }
.PP
ReaderFrom is the interface that wraps the ReadFrom method. 
.PP
ReadFrom reads data from r until EOF or error. 
The return value n is the number of bytes read. 
Any error except io.EOF encountered during the read is also returned. 
.PP
The Copy function uses ReaderFrom if available. 
.SS "RuneReader"
.B type RuneReader interface {
.RS
.B ReadRune() (r rune, size int, err error)
.sp 0
.RE
.B }
.PP
RuneReader is the interface that wraps the ReadRune method. 
.PP
ReadRune reads a single UTF\-8 encoded Unicode character and returns the rune and its size in bytes. 
If no character is available, err will be set. 
.SS "RuneScanner"
.B type RuneScanner interface {
.RS
.B RuneReader
.sp 0
.B UnreadRune() error
.sp 0
.RE
.B }
.PP
RuneScanner is the interface that adds the UnreadRune method to the basic ReadRune method. 
.PP
UnreadRune causes the next call to ReadRune to return the same rune as the previous call to ReadRune. 
It may be an error to call UnreadRune twice without an intervening call to ReadRune. 
.SS "SectionReader"
.B type SectionReader struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
SectionReader implements Read, Seek, and ReadAt on a section of an underlying ReaderAt. 
.PP
.BR "func NewSectionReader(" "r" " ReaderAt, " "off" " int64, " "n" " int64) *SectionReader"
.PP
NewSectionReader returns a SectionReader that reads from r starting at offset off and stops with EOF after n bytes. 
.PP
.BR "func (*SectionReader) Read(" "p" " []byte) (" "n" " int, " "err" " error)"
.PP
.BR "func (*SectionReader) ReadAt(" "p" " []byte, " "off" " int64) (" "n" " int, " "err" " error)"
.PP
.BR "func (*SectionReader) Seek(" "offset" " int64, " "whence" " int) (int64, error)"
.PP
.BR "func (*SectionReader) Size() int64"
.PP
Size returns the size of the section in bytes. 
.SS "Seeker"
.B type Seeker interface {
.RS
.B Seek(offset int64, whence int) (int64, error)
.sp 0
.RE
.B }
.PP
Seeker is the interface that wraps the basic Seek method. 
.PP
Seek sets the offset for the next Read or Write to offset, interpreted according to whence: 0 means relative to the origin of the file, 1 means relative to the current offset, and 2 means relative to the end. 
Seek returns the new offset and an error, if any. 
.PP
Seeking to a negative offset is an error. 
Seeking to any positive offset is legal, but the behavior of subsequent I/O operations on the underlying object is implementation\-dependent. 
.SS "WriteCloser"
.B type WriteCloser interface {
.RS
.B Writer
.sp 0
.B Closer
.sp 0
.RE
.B }
.PP
WriteCloser is the interface that groups the basic Write and Close methods. 
.SS "WriteSeeker"
.B type WriteSeeker interface {
.RS
.B Writer
.sp 0
.B Seeker
.sp 0
.RE
.B }
.PP
WriteSeeker is the interface that groups the basic Write and Seek methods. 
.SS "Writer"
.B type Writer interface {
.RS
.B Write(p []byte) (n int, err error)
.sp 0
.RE
.B }
.PP
Writer is the interface that wraps the basic Write method. 
.PP
Write writes 
.BR len (p)
bytes from p to the underlying data stream. 
It returns the number of bytes written from p (0 <= n <= len(p)) and any error encountered that caused the write to stop early. 
Write must return a non\-nil error if it returns n < len(p). 
Write must not modify the slice data, even temporarily. 
.PP
.BR "func MultiWriter(" "writers" " ...Writer) Writer"
.PP
MultiWriter creates a writer that duplicates its writes to all the provided writers, similar to the Unix 
.BR tee (1)
command. 
.SS "WriterAt"
.B type WriterAt interface {
.RS
.B WriteAt(p []byte, off int64) (n int, err error)
.sp 0
.RE
.B }
.PP
WriterAt is the interface that wraps the basic WriteAt method. 
.PP
WriteAt writes 
.BR len (p)
bytes from p to the underlying data stream at offset off. 
It returns the number of bytes written from p (0 <= n <= len(p)) and any error encountered that caused the write to stop early. 
WriteAt must return a non\-nil error if it returns n < len(p). 
.PP
If WriteAt is writing to a destination with a seek offset, WriteAt should not affect nor be affected by the underlying seek offset. 
.PP
Clients of WriteAt can execute parallel WriteAt calls on the same destination if the ranges do not overlap. 
.SS "WriterTo"
.B type WriterTo interface {
.RS
.B WriteTo(w Writer) (n int64, err error)
.sp 0
.RE
.B }
.PP
WriterTo is the interface that wraps the WriteTo method. 
.PP
WriteTo writes data to w until there's no more data to write or when an error occurs. 
The return value n is the number of bytes written. 
Any error encountered during the write is also returned. 
.PP
The Copy function uses WriterTo if available. 
.SS "multiReader"
.B type multiReader struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
.PP
.BR "func (*multiReader) Read(" "p" " []byte) (" "n" " int, " "err" " error)"
.SS "multiWriter"
.B type multiWriter struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
.PP
.BR "func (*multiWriter) Write(" "p" " []byte) (" "n" " int, " "err" " error)"
.SS "stringWriter"
.B type stringWriter interface {
.RS
.B WriteString(s string) (n int, err error)
.sp 0
.RE
.B }
.PP
stringWriter is the interface that wraps the WriteString method. 
.SS "teeReader"
.B type teeReader struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
.PP
.BR "func (*teeReader) Read(" "p" " []byte) (" "n" " int, " "err" " error)"
.SH "SEE ALSO"
.BR len (p),
.BR tee (1)
