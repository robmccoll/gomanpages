.\"    Automatically generated by mango(1)
.TH "gif" 3 "2014-11-26" "version 2014-11-26" "Go Packages"
.SH "NAME"
gif \- Package gif implements a GIF image decoder and encoder.
.SH "SYNOPSIS"
.B import \*(lqgif\(rq
.sp
.RB "func " Decode
.sp 0
.RB "func " DecodeConfig
.sp 0
.RB "func " Encode
.sp 0
.RB "func " EncodeAll
.sp 0
.RB "type " GIF
.sp 0
.RS
.RB "func " DecodeAll
.sp 0
.RE
.RB "type " Options
.sp 0
.RB "type " blockReader
.sp 0
.RS
.RB "func (*blockReader) " Read
.sp 0
.RE
.RB "type " blockWriter
.sp 0
.RS
.RB "func (blockWriter) " Write
.sp 0
.RE
.RB "type " writer
.sp 0
.SH "DESCRIPTION"
The GIF specification is at http://www.w3.org/Graphics/GIF/spec\-gif89a.txt. 
.SH "FUNCTIONS"
.PP
.BR "func Decode(" "r" " io.Reader) (image.Image, error)"
.PP
Decode reads a GIF image from r and returns the first embedded image as an image.Image. 
.PP
.BR "func DecodeConfig(" "r" " io.Reader) (image.Config, error)"
.PP
DecodeConfig returns the global color model and dimensions of a GIF image without decoding the entire image. 
.PP
.BR "func Encode(" "w" " io.Writer, " "m" " image.Image, " "o" " *Options) error"
.PP
Encode writes the Image m to w in GIF format. 
.PP
.BR "func EncodeAll(" "w" " io.Writer, " "g" " *GIF) error"
.PP
EncodeAll writes the images in g to w in GIF format with the given loop count and delay between frames. 
.SH "TYPES"
.SS "GIF"
.B type GIF struct {
.RS
.B Image []*image.Paletted
.sp 0
.B Delay []int
.sp 0
.B LoopCount int
.RE
.B }
.PP
GIF represents the possibly multiple images stored in a GIF file. 
.PP
.BR "func DecodeAll(" "r" " io.Reader) (*GIF, error)"
.PP
DecodeAll reads a GIF image from r and returns the sequential frames and timing information. 
.SS "Options"
.B type Options struct {
.RS
.B NumColors int
.sp 0
.B Quantizer draw.Quantizer
.sp 0
.B Drawer draw.Drawer
.RE
.B }
.PP
Options are the encoding parameters. 
.SS "blockReader"
.B type blockReader struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
blockReader parses the block structure of GIF image data, which comprises (n, (n bytes)) blocks, with 1 <= n <= 255. 
It is the reader given to the LZW decoder, which is thus immune to the blocking. 
After the LZW decoder completes, there will be a 0\-byte block remaining (0, ()), which is consumed when checking that the blockReader is exhausted. 
.PP
.BR "func (*blockReader) Read(" "p" " []byte) (int, error)"
.SS "blockWriter"
.B type blockWriter struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
blockWriter writes the block structure of GIF image data, which comprises (n, (n bytes)) blocks, with 1 <= n <= 255. 
It is the writer given to the LZW encoder, which is thus immune to the blocking. 
.PP
.BR "func (blockWriter) Write(" "data" " []byte) (int, error)"
.SS "writer"
.B type writer interface {
.RS
.B Flush() error
.sp 0
.B io.Writer
.sp 0
.B io.ByteWriter
.sp 0
.RE
.B }
.PP
writer is a buffered writer. 
