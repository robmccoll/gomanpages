.\"    Automatically generated by mango(1)
.TH "expvar" 3 "2014-11-26" "version 2014-11-26" "Go Packages"
.SH "NAME"
expvar \- Package expvar provides a standardized interface to public variables, such
as operation counters in servers.
.SH "SYNOPSIS"
.B import \*(lqexpvar\(rq
.sp
.RB "func " Do
.sp 0
.RB "func " Publish
.sp 0
.RB "type " Float
.sp 0
.RS
.RB "func " NewFloat
.sp 0
.RB "func (*Float) " Add
.sp 0
.RB "func (*Float) " Set
.sp 0
.RB "func (*Float) " String
.sp 0
.RE
.RB "type " Func
.sp 0
.RS
.RB "func (Func) " String
.sp 0
.RE
.RB "type " Int
.sp 0
.RS
.RB "func " NewInt
.sp 0
.RB "func (*Int) " Add
.sp 0
.RB "func (*Int) " Set
.sp 0
.RB "func (*Int) " String
.sp 0
.RE
.RB "type " KeyValue
.sp 0
.RB "type " Map
.sp 0
.RS
.RB "func " NewMap
.sp 0
.RB "func (*Map) " Add
.sp 0
.RB "func (*Map) " AddFloat
.sp 0
.RB "func (*Map) " Do
.sp 0
.RB "func (*Map) " Get
.sp 0
.RB "func (*Map) " Init
.sp 0
.RB "func (*Map) " Set
.sp 0
.RB "func (*Map) " String
.sp 0
.RE
.RB "type " String
.sp 0
.RS
.RB "func " NewString
.sp 0
.RB "func (*String) " Set
.sp 0
.RB "func (*String) " String
.sp 0
.RE
.RB "type " Var
.sp 0
.RS
.RB "func " Get
.sp 0
.RE
.SH "DESCRIPTION"
Package expvar provides a standardized interface to public variables, such as operation counters in servers. 
It exposes these variables via HTTP at /debug/vars in JSON format. 
.PP
Operations to set or modify these public variables are atomic. 
.PP
In addition to adding the HTTP handler, this package registers the following variables: 
.PP
.RS
cmdline   os.Args
.sp 0
memstats  runtime.Memstats
.sp 0
.sp
.RE
.PP
The package is sometimes only imported for the side effect of registering its HTTP handler and the above variables. 
To use it this way, link this package into your program: 
.PP
.RS
import _ "expvar"
.RE
.SH "FUNCTIONS"
.PP
.BR "func Do(" "f" " func(KeyValue))"
.PP
Do calls f for each exported variable. 
The global variable map is locked during the iteration, but existing entries may be concurrently updated. 
.PP
.BR "func Publish(" "name" " string, " "v" " Var)"
.PP
Publish declares a named exported variable. 
This should be called from a package's init function when it creates its Vars. 
If the name is already registered then this will log.Panic. 
.SH "TYPES"
.SS "Float"
.B type Float struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
Float is a 64\-bit float variable that satisfies the Var interface. 
.PP
.BR "func NewFloat(" "name" " string) *Float"
.PP
.BR "func (*Float) Add(" "delta" " float64)"
.PP
Add adds delta to v. 
.PP
.BR "func (*Float) Set(" "value" " float64)"
.PP
Set sets v to value. 
.PP
.BR "func (*Float) String() string"
.SS "Func"
.B type Func func() interface{}
.PP
Func implements Var by calling the function and formatting the returned value using JSON. 
.PP
.BR "func (Func) String() string"
.SS "Int"
.B type Int struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
Int is a 64\-bit integer variable that satisfies the Var interface. 
.PP
.BR "func NewInt(" "name" " string) *Int"
.PP
.BR "func (*Int) Add(" "delta" " int64)"
.PP
.BR "func (*Int) Set(" "value" " int64)"
.PP
.BR "func (*Int) String() string"
.SS "KeyValue"
.B type KeyValue struct {
.RS
.B Key string
.sp 0
.B Value Var
.RE
.B }
.PP
KeyValue represents a single entry in a Map. 
.SS "Map"
.B type Map struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
Map is a string\-to\-Var map variable that satisfies the Var interface. 
.PP
.BR "func NewMap(" "name" " string) *Map"
.PP
.BR "func (*Map) Add(" "key" " string, " "delta" " int64)"
.PP
.BR "func (*Map) AddFloat(" "key" " string, " "delta" " float64)"
.PP
AddFloat adds delta to the *Float value stored under the given map key. 
.PP
.BR "func (*Map) Do(" "f" " func(KeyValue))"
.PP
Do calls f for each entry in the map. 
The map is locked during the iteration, but existing entries may be concurrently updated. 
.PP
.BR "func (*Map) Get(" "key" " string) Var"
.PP
.BR "func (*Map) Init() *Map"
.PP
.BR "func (*Map) Set(" "key" " string, " "av" " Var)"
.PP
.BR "func (*Map) String() string"
.SS "String"
.B type String struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
String is a string variable, and satisfies the Var interface. 
.PP
.BR "func NewString(" "name" " string) *String"
.PP
.BR "func (*String) Set(" "value" " string)"
.PP
.BR "func (*String) String() string"
.SS "Var"
.B type Var interface {
.RS
.B String() string
.sp 0
.RE
.B }
.PP
Var is an abstract type for all exported variables. 
.PP
.BR "func Get(" "name" " string) Var"
.PP
Get retrieves a named exported variable. 
