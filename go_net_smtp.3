.\"    Automatically generated by mango(1)
.TH "smtp" 3 "2014-11-26" "version 2014-11-26" "Go Packages"
.SH "NAME"
smtp \- Package smtp implements the Simple Mail Transfer Protocol as defined in RFC 5321.
.SH "SYNOPSIS"
.B import \*(lqsmtp\(rq
.sp
.RB "func " SendMail
.sp 0
.RB "type " Auth
.sp 0
.RS
.RB "func " CRAMMD5Auth
.sp 0
.RB "func " PlainAuth
.sp 0
.RE
.RB "type " Client
.sp 0
.RS
.RB "func " Dial
.sp 0
.RB "func " NewClient
.sp 0
.RB "func (*Client) " Auth
.sp 0
.RB "func (*Client) " Close
.sp 0
.RB "func (*Client) " Data
.sp 0
.RB "func (*Client) " Extension
.sp 0
.RB "func (*Client) " Hello
.sp 0
.RB "func (*Client) " Mail
.sp 0
.RB "func (*Client) " Quit
.sp 0
.RB "func (*Client) " Rcpt
.sp 0
.RB "func (*Client) " Reset
.sp 0
.RB "func (*Client) " StartTLS
.sp 0
.RB "func (*Client) " Verify
.sp 0
.RE
.RB "type " ServerInfo
.sp 0
.RB "type " cramMD5Auth
.sp 0
.RS
.RB "func (*cramMD5Auth) " Next
.sp 0
.RB "func (*cramMD5Auth) " Start
.sp 0
.RE
.RB "type " dataCloser
.sp 0
.RS
.RB "func (*dataCloser) " Close
.sp 0
.RE
.RB "type " plainAuth
.sp 0
.RS
.RB "func (*plainAuth) " Next
.sp 0
.RB "func (*plainAuth) " Start
.sp 0
.RE
.SH "DESCRIPTION"
Package smtp implements the Simple Mail Transfer Protocol as defined in RFC 5321. 
It also implements the following extensions: 
.PP
.RS
8BITMIME  RFC 1652
.sp 0
AUTH      RFC 2554
.sp 0
STARTTLS  RFC 3207
.RE
.PP
Additional extensions may be handled by clients. 
.SH "FUNCTIONS"
.PP
.BR "func SendMail(" "addr" " string, " "a" " Auth, " "from" " string, " "to" " []string, " "msg" " []byte) error"
.PP
SendMail connects to the server at addr, switches to TLS if possible, authenticates with the optional mechanism a if possible, and then sends an email from address from, to addresses to, with message msg. 
.SH "TYPES"
.SS "Auth"
.B type Auth interface {
.RS
.B Start(server *ServerInfo) (proto string, toServer []byte, err error)
.sp 0
.B Next(fromServer []byte, more bool) (toServer []byte, err error)
.sp 0
.RE
.B }
.PP
Auth is implemented by an SMTP authentication mechanism. 
.PP
.BR "func CRAMMD5Auth(" "username" ", " "secret" " string) Auth"
.PP
CRAMMD5Auth returns an Auth that implements the CRAM\-MD5 authentication mechanism as defined in RFC 2195. 
The returned Auth uses the given username and secret to authenticate to the server using the challenge\-response mechanism. 
.PP
.BR "func PlainAuth(" "identity" ", " "username" ", " "password" ", " "host" " string) Auth"
.PP
PlainAuth returns an Auth that implements the PLAIN authentication mechanism as defined in RFC 4616. 
The returned Auth uses the given username and password to authenticate on TLS connections to host and act as identity. 
Usually identity will be left blank to act as username. 
.SS "Client"
.B type Client struct {
.RS
.B Text *textproto.Conn
.sp 0
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
A Client represents a client connection to an SMTP server. 
.PP
.BR "func Dial(" "addr" " string) (*Client, error)"
.PP
Dial returns a new Client connected to an SMTP server at addr. 
The addr must include a port number. 
.PP
.BR "func NewClient(" "conn" " net.Conn, " "host" " string) (*Client, error)"
.PP
NewClient returns a new Client using an existing connection and host as a server name to be used when authenticating. 
.PP
.BR "func (*Client) Auth(" "a" " Auth) error"
.PP
Auth authenticates a client using the provided authentication mechanism. 
A failed authentication closes the connection. 
Only servers that advertise the AUTH extension support this function. 
.PP
.BR "func (*Client) Close() error"
.PP
Close closes the connection. 
.PP
.BR "func (*Client) Data() (io.WriteCloser, error)"
.PP
Data issues a DATA command to the server and returns a writer that can be used to write the data. 
The caller should close the writer before calling any more methods on c. 
A call to Data must be preceded by one or more calls to Rcpt. 
.PP
.BR "func (*Client) Extension(" "ext" " string) (bool, string)"
.PP
Extension reports whether an extension is support by the server. 
The extension name is case\-insensitive. 
If the extension is supported, Extension also returns a string that contains any parameters the server specifies for the extension. 
.PP
.BR "func (*Client) Hello(" "localName" " string) error"
.PP
Hello sends a HELO or EHLO to the server as the given host name. 
Calling this method is only necessary if the client needs control over the host name used. 
The client will introduce itself as "localhost" automatically otherwise. 
If Hello is called, it must be called before any of the other methods. 
.PP
.BR "func (*Client) Mail(" "from" " string) error"
.PP
Mail issues a MAIL command to the server using the provided email address. 
If the server supports the 8BITMIME extension, Mail adds the BODY=8BITMIME parameter. 
This initiates a mail transaction and is followed by one or more Rcpt calls. 
.PP
.BR "func (*Client) Quit() error"
.PP
Quit sends the QUIT command and closes the connection to the server. 
.PP
.BR "func (*Client) Rcpt(" "to" " string) error"
.PP
Rcpt issues a RCPT command to the server using the provided email address. 
A call to Rcpt must be preceded by a call to Mail and may be followed by a Data call or another Rcpt call. 
.PP
.BR "func (*Client) Reset() error"
.PP
Reset sends the RSET command to the server, aborting the current mail transaction. 
.PP
.BR "func (*Client) StartTLS(" "config" " *tls.Config) error"
.PP
StartTLS sends the STARTTLS command and encrypts all further communication. 
Only servers that advertise the STARTTLS extension support this function. 
.PP
.BR "func (*Client) Verify(" "addr" " string) error"
.PP
Verify checks the validity of an email address on the server. 
If Verify returns nil, the address is valid. 
A non\-nil return does not necessarily indicate an invalid address. 
Many servers will not verify addresses for security reasons. 
.SS "ServerInfo"
.B type ServerInfo struct {
.RS
.B Name string
.sp 0
.B TLS bool
.sp 0
.B Auth []string
.RE
.B }
.PP
ServerInfo records information about an SMTP server. 
.SS "cramMD5Auth"
.B type cramMD5Auth struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
.PP
.BR "func (*cramMD5Auth) Next(" "fromServer" " []byte, " "more" " bool) ([]byte, error)"
.PP
.BR "func (*cramMD5Auth) Start(" "server" " *ServerInfo) (string, []byte, error)"
.SS "dataCloser"
.B type dataCloser struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
.PP
.BR "func (*dataCloser) Close() error"
.SS "plainAuth"
.B type plainAuth struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
.PP
.BR "func (*plainAuth) Next(" "fromServer" " []byte, " "more" " bool) ([]byte, error)"
.PP
.BR "func (*plainAuth) Start(" "server" " *ServerInfo) (string, []byte, error)"
