.\"    Automatically generated by mango(1)
.TH "tls" 3 "2014-11-26" "version 2014-11-26" "Go Packages"
.SH "NAME"
tls \- Package tls partially implements TLS 1.2, as specified in RFC 5246.
.SH "SYNOPSIS"
.B import \*(lqtls\(rq
.sp
.B Constants
.sp 0
.RB "func " Listen
.sp 0
.RB "func " NewListener
.sp 0
.RB "type " Certificate
.sp 0
.RS
.RB "func " LoadX509KeyPair
.sp 0
.RB "func " X509KeyPair
.sp 0
.RE
.RB "type " ClientAuthType
.sp 0
.RB "type " ClientSessionCache
.sp 0
.RS
.RB "func " NewLRUClientSessionCache
.sp 0
.RE
.RB "type " ClientSessionState
.sp 0
.RB "type " Config
.sp 0
.RS
.RB "func (*Config) " BuildNameToCertificate
.sp 0
.RE
.RB "type " Conn
.sp 0
.RS
.RB "func " Client
.sp 0
.RB "func " Dial
.sp 0
.RB "func " DialWithDialer
.sp 0
.RB "func " Server
.sp 0
.RB "func (*Conn) " Close
.sp 0
.RB "func (*Conn) " ConnectionState
.sp 0
.RB "func (*Conn) " Handshake
.sp 0
.RB "func (*Conn) " LocalAddr
.sp 0
.RB "func (*Conn) " OCSPResponse
.sp 0
.RB "func (*Conn) " Read
.sp 0
.RB "func (*Conn) " RemoteAddr
.sp 0
.RB "func (*Conn) " SetDeadline
.sp 0
.RB "func (*Conn) " SetReadDeadline
.sp 0
.RB "func (*Conn) " SetWriteDeadline
.sp 0
.RB "func (*Conn) " VerifyHostname
.sp 0
.RB "func (*Conn) " Write
.sp 0
.RE
.RB "type " ConnectionState
.sp 0
.RB "type " CurveID
.sp 0
.RB "type " alert
.sp 0
.RS
.RB "func (alert) " Error
.sp 0
.RB "func (alert) " String
.sp 0
.RE
.RB "type " block
.sp 0
.RS
.RB "func (*block) " Read
.sp 0
.RE
.RB "type " cbcMode
.sp 0
.RB "type " dsaSignature
.sp 0
.RB "type " finishedHash
.sp 0
.RS
.RB "func (finishedHash) " Write
.sp 0
.RE
.RB "type " fixedNonceAEAD
.sp 0
.RS
.RB "func (*fixedNonceAEAD) " NonceSize
.sp 0
.RB "func (*fixedNonceAEAD) " Open
.sp 0
.RB "func (*fixedNonceAEAD) " Overhead
.sp 0
.RB "func (*fixedNonceAEAD) " Seal
.sp 0
.RE
.RB "type " listener
.sp 0
.RS
.RB "func (*listener) " Accept
.sp 0
.RE
.RB "type " lruSessionCache
.sp 0
.RS
.RB "func (*lruSessionCache) " Get
.sp 0
.RB "func (*lruSessionCache) " Put
.sp 0
.RE
.RB "type " macFunction
.sp 0
.RS
.RE
.RB "type " ssl30MAC
.sp 0
.RS
.RB "func (ssl30MAC) " MAC
.sp 0
.RB "func (ssl30MAC) " Size
.sp 0
.RE
.RB "type " timeoutError
.sp 0
.RS
.RB "func (timeoutError) " Error
.sp 0
.RB "func (timeoutError) " Temporary
.sp 0
.RB "func (timeoutError) " Timeout
.sp 0
.RE
.RB "type " tls10MAC
.sp 0
.RS
.RB "func (tls10MAC) " MAC
.sp 0
.RB "func (tls10MAC) " Size
.sp 0
.RE
.SH "CONSTANTS"
A list of the possible cipher suite ids. 
Taken from http://www.iana.org/assignments/tls\-parameters/tls\-parameters.xml 
.PP
.B const (
.RS
.B TLS_RSA_WITH_RC4_128_SHA 
.sp 0
.B TLS_RSA_WITH_3DES_EDE_CBC_SHA 
.sp 0
.B TLS_RSA_WITH_AES_128_CBC_SHA 
.sp 0
.B TLS_RSA_WITH_AES_256_CBC_SHA 
.sp 0
.B TLS_ECDHE_ECDSA_WITH_RC4_128_SHA 
.sp 0
.B TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA 
.sp 0
.B TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA 
.sp 0
.B TLS_ECDHE_RSA_WITH_RC4_128_SHA 
.sp 0
.B TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA 
.sp 0
.B TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA 
.sp 0
.B TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA 
.sp 0
.B TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 
.sp 0
.B TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 
.sp 0
.RE
.B )
.sp 0
.PP
.B const (
.RS
.B VersionSSL30 
.sp 0
.B VersionTLS10 
.sp 0
.B VersionTLS11 
.sp 0
.B VersionTLS12 
.sp 0
.RE
.B )
.SH "FUNCTIONS"
.PP
.BR "func Listen(" "network" ", " "laddr" " string, " "config" " *Config) (net.Listener, error)"
.PP
Listen creates a TLS listener accepting connections on the given network address using net.Listen. 
The configuration config must be non\-nil and must have at least one certificate. 
.PP
.BR "func NewListener(" "inner" " net.Listener, " "config" " *Config) net.Listener"
.PP
NewListener creates a Listener which accepts connections from an inner Listener and wraps each connection with Server. 
The configuration config must be non\-nil and must have at least one certificate. 
.SH "TYPES"
.SS "Certificate"
.B type Certificate struct {
.RS
.B Certificate [][]byte
.sp 0
.B PrivateKey crypto.PrivateKey
.sp 0
.B OCSPStaple []byte
.sp 0
.B Leaf *x509.Certificate
.RE
.B }
.PP
A Certificate is a chain of one or more certificates, leaf first. 
.PP
.BR "func LoadX509KeyPair(" "certFile" ", " "keyFile" " string) (" "cert" " Certificate, " "err" " error)"
.PP
LoadX509KeyPair reads and parses a public/private key pair from a pair of files. 
The files must contain PEM encoded data. 
.PP
.BR "func X509KeyPair(" "certPEMBlock" ", " "keyPEMBlock" " []byte) (" "cert" " Certificate, " "err" " error)"
.PP
X509KeyPair parses a public/private key pair from a pair of PEM encoded data. 
.SS "ClientAuthType"
.B type ClientAuthType int
.PP
ClientAuthType declares the policy the server will follow for TLS Client Authentication. 
.PP
.B const (
.RS
.B NoClientCert 
.sp 0
.B RequestClientCert 
.sp 0
.B RequireAnyClientCert 
.sp 0
.B VerifyClientCertIfGiven 
.sp 0
.B RequireAndVerifyClientCert 
.sp 0
.RE
.B )
.SS "ClientSessionCache"
.B type ClientSessionCache interface {
.RS
.B Get(sessionKey string) (session *ClientSessionState, ok bool)
.sp 0
.B Put(sessionKey string, cs *ClientSessionState)
.sp 0
.RE
.B }
.PP
ClientSessionCache is a cache of ClientSessionState objects that can be used by a client to resume a TLS session with a given server. 
ClientSessionCache implementations should expect to be called concurrently from different goroutines. 
.PP
.BR "func NewLRUClientSessionCache(" "capacity" " int) ClientSessionCache"
.PP
NewLRUClientSessionCache returns a ClientSessionCache with the given capacity that uses an LRU strategy. 
If capacity is < 1, a default capacity is used instead. 
.SS "ClientSessionState"
.B type ClientSessionState struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
ClientSessionState contains the state needed by clients to resume TLS sessions. 
.SS "Config"
.B type Config struct {
.RS
.B Rand io.Reader
.sp 0
.B Time func() time.Time
.sp 0
.B Certificates []Certificate
.sp 0
.B NameToCertificate map[string]*Certificate
.sp 0
.B RootCAs *x509.CertPool
.sp 0
.B NextProtos []string
.sp 0
.B ServerName string
.sp 0
.B ClientAuth ClientAuthType
.sp 0
.B ClientCAs *x509.CertPool
.sp 0
.B InsecureSkipVerify bool
.sp 0
.B CipherSuites []uint16
.sp 0
.B PreferServerCipherSuites bool
.sp 0
.B SessionTicketsDisabled bool
.sp 0
.B SessionTicketKey []byte
.sp 0
.B ClientSessionCache ClientSessionCache
.sp 0
.B MinVersion uint16
.sp 0
.B MaxVersion uint16
.sp 0
.B CurvePreferences []CurveID
.sp 0
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
A Config structure is used to configure a TLS client or server. 
After one has been passed to a TLS function it must not be modified. 
A Config may be reused; the tls package will also not modify it. 
.PP
.B var 
.B 
.sp 0
.PP
.BR "func (*Config) BuildNameToCertificate()"
.PP
BuildNameToCertificate parses c.Certificates and builds c.NameToCertificate from the CommonName and SubjectAlternateName fields of each of the leaf certificates. 
.SS "Conn"
.B type Conn struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
A Conn represents a secured connection. 
It implements the net.Conn interface. 
.PP
.BR "func Client(" "conn" " net.Conn, " "config" " *Config) *Conn"
.PP
Client returns a new TLS client side connection using conn as the underlying transport. 
The config cannot be nil: users must set either ServerName or InsecureSkipVerify in the config. 
.PP
.BR "func Dial(" "network" ", " "addr" " string, " "config" " *Config) (*Conn, error)"
.PP
Dial connects to the given network address using net.Dial and then initiates a TLS handshake, returning the resulting TLS connection. 
Dial interprets a nil configuration as equivalent to the zero configuration; see the documentation of Config for the defaults. 
.PP
.BR "func DialWithDialer(" "dialer" " *net.Dialer, " "network" ", " "addr" " string, " "config" " *Config) (*Conn, error)"
.PP
DialWithDialer connects to the given network address using dialer.Dial and then initiates a TLS handshake, returning the resulting TLS connection. 
Any timeout or deadline given in the dialer apply to connection and TLS handshake as a whole. 
.PP
DialWithDialer interprets a nil configuration as equivalent to the zero configuration; see the documentation of Config for the defaults. 
.PP
.BR "func Server(" "conn" " net.Conn, " "config" " *Config) *Conn"
.PP
Server returns a new TLS server side connection using conn as the underlying transport. 
The configuration config must be non\-nil and must have at least one certificate. 
.PP
.BR "func (*Conn) Close() error"
.PP
Close closes the connection. 
.PP
.BR "func (*Conn) ConnectionState() ConnectionState"
.PP
ConnectionState returns basic TLS details about the connection. 
.PP
.BR "func (*Conn) Handshake() error"
.PP
Handshake runs the client or server handshake protocol if it has not yet been run. 
Most uses of this package need not call Handshake explicitly: the first Read or Write will call it automatically. 
.PP
.BR "func (*Conn) LocalAddr() net.Addr"
.PP
LocalAddr returns the local network address. 
.PP
.BR "func (*Conn) OCSPResponse() []byte"
.PP
OCSPResponse returns the stapled OCSP response from the TLS server, if any. 
(Only valid for client connections.) 
.PP
.BR "func (*Conn) Read(" "b" " []byte) (" "n" " int, " "err" " error)"
.PP
Read can be made to time out and return a net.Error with Timeout() == true after a fixed time limit; see SetDeadline and SetReadDeadline. 
.PP
.BR "func (*Conn) RemoteAddr() net.Addr"
.PP
RemoteAddr returns the remote network address. 
.PP
.BR "func (*Conn) SetDeadline(" "t" " time.Time) error"
.PP
SetDeadline sets the read and write deadlines associated with the connection. 
A zero value for t means Read and Write will not time out. 
After a Write has timed out, the TLS state is corrupt and all future writes will return the same error. 
.PP
.BR "func (*Conn) SetReadDeadline(" "t" " time.Time) error"
.PP
SetReadDeadline sets the read deadline on the underlying connection. 
A zero value for t means Read will not time out. 
.PP
.BR "func (*Conn) SetWriteDeadline(" "t" " time.Time) error"
.PP
SetWriteDeadline sets the write deadline on the underlying connection. 
A zero value for t means Write will not time out. 
After a Write has timed out, the TLS state is corrupt and all future writes will return the same error. 
.PP
.BR "func (*Conn) VerifyHostname(" "host" " string) error"
.PP
VerifyHostname checks that the peer certificate chain is valid for connecting to host. 
If so, it returns nil; if not, it returns an error describing the problem. 
.PP
.BR "func (*Conn) Write(" "b" " []byte) (int, error)"
.PP
Write writes data to the connection. 
.SS "ConnectionState"
.B type ConnectionState struct {
.RS
.B Version uint16
.sp 0
.B HandshakeComplete bool
.sp 0
.B DidResume bool
.sp 0
.B CipherSuite uint16
.sp 0
.B NegotiatedProtocol string
.sp 0
.B NegotiatedProtocolIsMutual bool
.sp 0
.B ServerName string
.sp 0
.B PeerCertificates []*x509.Certificate
.sp 0
.B VerifiedChains [][]*x509.Certificate
.RE
.B }
.PP
ConnectionState records basic TLS details about the connection. 
.SS "CurveID"
.B type CurveID uint16
.PP
CurveID is the type of a TLS identifier for an elliptic curve. 
See http://www.iana.org/assignments/tls\-parameters/tls\-parameters.xml#tls\-parameters\-8 
.PP
.B const (
.RS
.B CurveP256 
.sp 0
.B CurveP384 
.sp 0
.B CurveP521 
.sp 0
.RE
.B )
.SS "alert"
.B type alert uint8
.PP
.PP
.BR "func (alert) Error() string"
.PP
.BR "func (alert) String() string"
.SS "block"
.B type block struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
A block is a simple data buffer. 
.PP
.BR "func (*block) Read(" "p" " []byte) (" "n" " int, " "err" " error)"
.SS "cbcMode"
.B type cbcMode interface {
.RS
.B cipher.BlockMode
.sp 0
.B SetIV([]byte)
.sp 0
.RE
.B }
.PP
cbcMode is an interface for block ciphers using cipher block chaining. 
.SS "dsaSignature"
.B type dsaSignature struct {
.RS
.B R, S *big.Int
.RE
.B }
.PP
TODO(jsing): Make these available to both crypto/x509 and crypto/tls. 
.SS "finishedHash"
.B type finishedHash struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
A finishedHash calculates the hash of a set of handshake messages suitable for including in a Finished message. 
.PP
.BR "func (finishedHash) Write(" "msg" " []byte) (" "n" " int, " "err" " error)"
.SS "fixedNonceAEAD"
.B type fixedNonceAEAD struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
fixedNonceAEAD wraps an AEAD and prefixes a fixed portion of the nonce to each call. 
.PP
.BR "func (*fixedNonceAEAD) NonceSize() int"
.PP
.BR "func (*fixedNonceAEAD) Open(" "out" ", " "nonce" ", " "plaintext" ", " "additionalData" " []byte) ([]byte, error)"
.PP
.BR "func (*fixedNonceAEAD) Overhead() int"
.PP
.BR "func (*fixedNonceAEAD) Seal(" "out" ", " "nonce" ", " "plaintext" ", " "additionalData" " []byte) []byte"
.SS "listener"
.B type listener struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
A listener implements a network listener (net.Listener) for TLS connections. 
.PP
.BR "func (*listener) Accept() (" "c" " net.Conn, " "err" " error)"
.PP
Accept waits for and returns the next incoming TLS connection. 
The returned connection c is a *tls.Conn. 
.SS "lruSessionCache"
.B type lruSessionCache struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
lruSessionCache is a ClientSessionCache implementation that uses an LRU caching strategy. 
.PP
.BR "func (*lruSessionCache) Get(" "sessionKey" " string) (*ClientSessionState, bool)"
.PP
Get returns the ClientSessionState value associated with a given key. 
It returns (nil, false) if no value is found. 
.PP
.BR "func (*lruSessionCache) Put(" "sessionKey" " string, " "cs" " *ClientSessionState)"
.PP
Put adds the provided (sessionKey, cs) pair to the cache. 
.SS "macFunction"
.B type macFunction interface {
.RS
.B Size() int
.sp 0
.B MAC(digestBuf, seq, header, data []byte) []byte
.sp 0
.RE
.B }
.PP
.SS "ssl30MAC"
.B type ssl30MAC struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
ssl30MAC implements the SSLv3 MAC function, as defined in www.mozilla.org/projects/security/pki/nss/ssl/draft302.txt section 5.2.3.1 
.PP
.BR "func (ssl30MAC) MAC(" "digestBuf" ", " "seq" ", " "header" ", " "data" " []byte) []byte"
.PP
.BR "func (ssl30MAC) Size() int"
.SS "timeoutError"
.B type timeoutError struct {
.RS
.RE
.B }
.PP
.PP
.BR "func (timeoutError) Error() string"
.PP
.BR "func (timeoutError) Temporary() bool"
.PP
.BR "func (timeoutError) Timeout() bool"
.SS "tls10MAC"
.B type tls10MAC struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
tls10MAC implements the TLS 1.0 MAC function. 
RFC 2246, section 6.2.3. 
.PP
.BR "func (tls10MAC) MAC(" "digestBuf" ", " "seq" ", " "header" ", " "data" " []byte) []byte"
.PP
.BR "func (tls10MAC) Size() int"
