.\"    Automatically generated by mango(1)
.TH "bzip2" 3 "2014-11-26" "version 2014-11-26" "Go Packages"
.SH "NAME"
bzip2 \- Package bzip2 implements bzip2 decompression.
.SH "SYNOPSIS"
.B import \*(lqbzip2\(rq
.sp
.RB "func " NewReader
.sp 0
.RB "type " StructuralError
.sp 0
.RS
.RB "func (StructuralError) " Error
.sp 0
.RE
.RB "type " bitReader
.sp 0
.RS
.RB "func (*bitReader) " Err
.sp 0
.RB "func (*bitReader) " ReadBit
.sp 0
.RB "func (*bitReader) " ReadBits
.sp 0
.RB "func (*bitReader) " ReadBits64
.sp 0
.RB "func (*bitReader) " TryReadBit
.sp 0
.RE
.RB "type " huffmanCodes
.sp 0
.RS
.RB "func (huffmanCodes) " Len
.sp 0
.RB "func (huffmanCodes) " Less
.sp 0
.RB "func (huffmanCodes) " Swap
.sp 0
.RE
.RB "type " huffmanSymbolLengthPairs
.sp 0
.RS
.RB "func (huffmanSymbolLengthPairs) " Len
.sp 0
.RB "func (huffmanSymbolLengthPairs) " Less
.sp 0
.RB "func (huffmanSymbolLengthPairs) " Swap
.sp 0
.RE
.RB "type " huffmanTree
.sp 0
.RS
.RB "func (*huffmanTree) " Decode
.sp 0
.RE
.RB "type " moveToFrontDecoder
.sp 0
.RS
.RB "func (*moveToFrontDecoder) " Decode
.sp 0
.RB "func (*moveToFrontDecoder) " First
.sp 0
.RE
.RB "type " reader
.sp 0
.RS
.RB "func (*reader) " Read
.sp 0
.RE
.SH "FUNCTIONS"
.PP
.BR "func NewReader(" "r" " io.Reader) io.Reader"
.PP
NewReader returns an io.Reader which decompresses bzip2 data from r. 
.SH "TYPES"
.SS "StructuralError"
.B type StructuralError string
.PP
A StructuralError is returned when the bzip2 data is found to be syntactically invalid. 
.PP
.BR "func (StructuralError) Error() string"
.SS "bitReader"
.B type bitReader struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
bitReader wraps an io.Reader and provides the ability to read values, bit\-by\-bit, from it. 
Its Read* methods don't return the usual error because the error handling was verbose. 
Instead, any error is kept and can be checked afterwards. 
.PP
.BR "func (*bitReader) Err() error"
.PP
.BR "func (*bitReader) ReadBit() bool"
.PP
.BR "func (*bitReader) ReadBits(" "bits" " uint) (" "n" " int)"
.PP
.BR "func (*bitReader) ReadBits64(" "bits" " uint) (" "n" " uint64)"
.PP
ReadBits64 reads the given number of bits and returns them in the least\-significant part of a uint64. 
In the event of an error, it returns 0 and the error can be obtained by calling Err(). 
.PP
.BR "func (*bitReader) TryReadBit() (" "bit" " byte, " "ok" " bool)"
.SS "huffmanCodes"
.B type huffmanCodes []huffmanCode
.PP
huffmanCodes is used to provide an interface for sorting. 
.PP
.BR "func (huffmanCodes) Len() int"
.PP
.BR "func (huffmanCodes) Less(" "i" ", " "j" " int) bool"
.PP
.BR "func (huffmanCodes) Swap(" "i" ", " "j" " int)"
.SS "huffmanSymbolLengthPairs"
.B type huffmanSymbolLengthPairs []huffmanSymbolLengthPair
.PP
huffmanSymbolLengthPair is used to provide an interface for sorting. 
.PP
.BR "func (huffmanSymbolLengthPairs) Len() int"
.PP
.BR "func (huffmanSymbolLengthPairs) Less(" "i" ", " "j" " int) bool"
.PP
.BR "func (huffmanSymbolLengthPairs) Swap(" "i" ", " "j" " int)"
.SS "huffmanTree"
.B type huffmanTree struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
A huffmanTree is a binary tree which is navigated, bit\-by\-bit to reach a symbol. 
.PP
.BR "func (*huffmanTree) Decode(" "br" " *bitReader) (" "v" " uint16)"
.PP
Decode reads bits from the given bitReader and navigates the tree until a symbol is found. 
.SS "moveToFrontDecoder"
.B type moveToFrontDecoder struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
moveToFrontDecoder implements a move\-to\-front list. 
Such a list is an efficient way to transform a string with repeating elements into one with many small valued numbers, which is suitable for entropy encoding. 
It works by starting with an initial list of symbols and references symbols by their index into that list. 
When a symbol is referenced, it's moved to the front of the list. 
Thus, a repeated symbol ends up being encoded with many zeros, as the symbol will be at the front of the list after the first access. 
.PP
.BR "func (*moveToFrontDecoder) Decode(" "n" " int) (" "b" " byte)"
.PP
.BR "func (*moveToFrontDecoder) First() byte"
.PP
First returns the symbol at the front of the list. 
.SS "reader"
.B type reader struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
A reader decompresses bzip2 compressed data. 
.PP
.BR "func (*reader) Read(" "buf" " []byte) (" "n" " int, " "err" " error)"
