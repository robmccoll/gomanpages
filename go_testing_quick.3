.\"    Automatically generated by mango(1)
.TH "quick" 3 "2014-11-26" "version 2014-11-26" "Go Packages"
.SH "NAME"
quick \- Package quick implements utility functions to help with black box testing.
.SH "SYNOPSIS"
.B import \*(lqquick\(rq
.sp
.RB "func " Check
.sp 0
.RB "func " CheckEqual
.sp 0
.RB "func " Value
.sp 0
.RB "type " CheckEqualError
.sp 0
.RS
.RB "func (*CheckEqualError) " Error
.sp 0
.RE
.RB "type " CheckError
.sp 0
.RS
.RB "func (*CheckError) " Error
.sp 0
.RE
.RB "type " Config
.sp 0
.RS
.RE
.RB "type " Generator
.sp 0
.RB "type " SetupError
.sp 0
.RS
.RB "func (SetupError) " Error
.sp 0
.RE
.SH "FUNCTIONS"
.PP
.BR "func Check(" "function" " interface{}, " "config" " *Config) (" "err" " error)"
.PP
Check looks for an input to f, any function that returns bool, such that f returns false. 
It calls f repeatedly, with arbitrary values for each argument. 
If f returns false on a given input, Check returns that input as a *CheckError. 
For example: 
.PP
.RS
func TestOddMultipleOfThree(t *testing.T) {
.sp 0
.RS
f := func(x int) bool {
.sp 0
.RS
y := OddMultipleOfThree(x)
.sp 0
return y%2 == 1 && y%3 == 0
.sp 0
.RE
}
.sp 0
if err := quick.Check(f, nil); err != nil {
.sp 0
.RS
t.Error(err)
.sp 0
.RE
}
.sp 0
.RE
}
.RE
.PP
.BR "func CheckEqual(" "f" ", " "g" " interface{}, " "config" " *Config) (" "err" " error)"
.PP
CheckEqual looks for an input on which f and g return different results. 
It calls f and g repeatedly with arbitrary values for each argument. 
If f and g return different answers, CheckEqual returns a *CheckEqualError describing the input and the outputs. 
.PP
.BR "func Value(" "t" " reflect.Type, " "rand" " *rand.Rand) (" "value" " reflect.Value, " "ok" " bool)"
.PP
Value returns an arbitrary value of the given type. 
If the type implements the Generator interface, that will be used. 
Note: To create arbitrary values for structs, all the fields must be exported. 
.SH "TYPES"
.SS "CheckEqualError"
.B type CheckEqualError struct {
.RS
.B CheckError
.sp 0
.B Out1 []interface{}
.sp 0
.B Out2 []interface{}
.RE
.B }
.PP
A CheckEqualError is the result CheckEqual finding an error. 
.PP
.BR "func (*CheckEqualError) Error() string"
.SS "CheckError"
.B type CheckError struct {
.RS
.B Count int
.sp 0
.B In []interface{}
.RE
.B }
.PP
A CheckError is the result of Check finding an error. 
.PP
.BR "func (*CheckError) Error() string"
.SS "Config"
.B type Config struct {
.RS
.B MaxCount int
.sp 0
.B MaxCountScale float64
.sp 0
.B Rand *rand.Rand
.sp 0
.B Values func([]reflect.Value, *rand.Rand)
.RE
.B }
.PP
A Config structure contains options for running a test. 
.PP
.B var 
.B 
.sp 0
.SS "Generator"
.B type Generator interface {
.RS
.B Generate(rand *rand.Rand, size int) reflect.Value
.sp 0
.RE
.B }
.PP
A Generator can generate random values of its own type. 
.SS "SetupError"
.B type SetupError string
.PP
A SetupError is the result of an error in the way that check is being used, independent of the functions being tested. 
.PP
.BR "func (SetupError) Error() string"
.SH "SEE ALSO"
.BR OddMultipleOfThree (x)
