.\"    Automatically generated by mango(1)
.TH "tar" 3 "2014-11-26" "version 2014-11-26" "Go Packages"
.SH "NAME"
tar \- Package tar implements access to tar archives.
.SH "SYNOPSIS"
.B import \*(lqtar\(rq
.sp
.B Constants
.sp 0
.B Variables
.sp 0
.RB "type " Header
.sp 0
.RS
.RB "func " FileInfoHeader
.sp 0
.RB "func (*Header) " FileInfo
.sp 0
.RE
.RB "type " Reader
.sp 0
.RS
.RB "func " NewReader
.sp 0
.RB "func (*Reader) " Next
.sp 0
.RB "func (*Reader) " Read
.sp 0
.RE
.RB "type " Writer
.sp 0
.RS
.RB "func " NewWriter
.sp 0
.RB "func (*Writer) " Close
.sp 0
.RB "func (*Writer) " Flush
.sp 0
.RB "func (*Writer) " Write
.sp 0
.RB "func (*Writer) " WriteHeader
.sp 0
.RE
.RB "type " headerFileInfo
.sp 0
.RS
.RB "func (headerFileInfo) " IsDir
.sp 0
.RB "func (headerFileInfo) " ModTime
.sp 0
.RB "func (headerFileInfo) " Mode
.sp 0
.RB "func (headerFileInfo) " Name
.sp 0
.RB "func (headerFileInfo) " Size
.sp 0
.RB "func (headerFileInfo) " Sys
.sp 0
.RE
.RB "type " regFileReader
.sp 0
.RS
.RB "func (*regFileReader) " Read
.sp 0
.RE
.RB "type " sparseFileReader
.sp 0
.RS
.RB "func (*sparseFileReader) " Read
.sp 0
.RE
.SH "DESCRIPTION"
Package tar implements access to tar archives. 
It aims to cover most of the variations, including those produced by GNU and BSD tars. 
.PP
References: http://www.freebsd.org/cgi/man.cgi?query=tar&sektion=5 http://www.gnu.org/software/tar/manual/html_node/Standard.html http://pubs.opengroup.org/onlinepubs/9699919799/utilities/pax.html 
.SH "CONSTANTS"
.PP
.B const (
.RS
.B 
.sp 0
.B TypeReg 
.sp 0
.B TypeRegA 
.sp 0
.B TypeLink 
.sp 0
.B TypeSymlink 
.sp 0
.B TypeChar 
.sp 0
.B TypeBlock 
.sp 0
.B TypeDir 
.sp 0
.B TypeFifo 
.sp 0
.B TypeCont 
.sp 0
.B TypeXHeader 
.sp 0
.B TypeXGlobalHeader 
.sp 0
.B TypeGNULongName 
.sp 0
.B TypeGNULongLink 
.sp 0
.B TypeGNUSparse 
.sp 0
.RE
.B )
.SH "VARIABLES"
.PP
.B var (
.RS
.B ErrWriteTooLong 
.sp 0
.B ErrFieldTooLong 
.sp 0
.B ErrWriteAfterClose 
.sp 0
.B 
.sp 0
.B 
.sp 0
.RE
.B )
.sp 0
.PP
.B var 
.B ErrHeader 
.sp 0
.SH "TYPES"
.SS "Header"
.B type Header struct {
.RS
.B Name string
.sp 0
.B Mode int64
.sp 0
.B Uid int
.sp 0
.B Gid int
.sp 0
.B Size int64
.sp 0
.B ModTime time.Time
.sp 0
.B Typeflag byte
.sp 0
.B Linkname string
.sp 0
.B Uname string
.sp 0
.B Gname string
.sp 0
.B Devmajor int64
.sp 0
.B Devminor int64
.sp 0
.B AccessTime time.Time
.sp 0
.B ChangeTime time.Time
.sp 0
.B Xattrs map[string]string
.RE
.B }
.PP
A Header represents a single header in a tar archive. 
Some fields may not be populated. 
.PP
.BR "func FileInfoHeader(" "fi" " os.FileInfo, " "link" " string) (*Header, error)"
.PP
FileInfoHeader creates a partially\-populated Header from fi. 
If fi describes a symlink, FileInfoHeader records link as the link target. 
If fi describes a directory, a slash is appended to the name. 
Because os.FileInfo's Name method returns only the base name of the file it describes, it may be necessary to modify the Name field of the returned header to provide the full path name of the file. 
.PP
.BR "func (*Header) FileInfo() os.FileInfo"
.PP
FileInfo returns an os.FileInfo for the Header. 
.SS "Reader"
.B type Reader struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
A Reader provides sequential access to the contents of a tar archive. 
A tar archive consists of a sequence of files. 
The Next method advances to the next file in the archive (including the first), and then it can be treated as an io.Reader to access the file's data. 
.PP
.BR "func NewReader(" "r" " io.Reader) *Reader"
.PP
NewReader creates a new Reader reading from r. 
.PP
.BR "func (*Reader) Next() (*Header, error)"
.PP
Next advances to the next entry in the tar archive. 
.PP
.BR "func (*Reader) Read(" "b" " []byte) (" "n" " int, " "err" " error)"
.PP
Read reads from the current entry in the tar archive. 
It returns 0, io.EOF when it reaches the end of that entry, until Next is called to advance to the next entry. 
.SS "Writer"
.B type Writer struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
A Writer provides sequential writing of a tar archive in POSIX.1 format. 
A tar archive consists of a sequence of files. 
Call WriteHeader to begin a new file, and then call Write to supply that file's data, writing at most hdr.Size bytes in total. 
.PP
.BR "func NewWriter(" "w" " io.Writer) *Writer"
.PP
NewWriter creates a new Writer writing to w. 
.PP
.BR "func (*Writer) Close() error"
.PP
Close closes the tar archive, flushing any unwritten data to the underlying writer. 
.PP
.BR "func (*Writer) Flush() error"
.PP
Flush finishes writing the current file (optional). 
.PP
.BR "func (*Writer) Write(" "b" " []byte) (" "n" " int, " "err" " error)"
.PP
Write writes to the current entry in the tar archive. 
Write returns the error ErrWriteTooLong if more than hdr.Size bytes are written after WriteHeader. 
.PP
.BR "func (*Writer) WriteHeader(" "hdr" " *Header) error"
.PP
WriteHeader writes hdr and prepares to accept the file's contents. 
WriteHeader calls Flush if it is not the first header. 
Calling after a Close will return ErrWriteAfterClose. 
.SS "headerFileInfo"
.B type headerFileInfo struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
headerFileInfo implements os.FileInfo. 
.PP
.BR "func (headerFileInfo) IsDir() bool"
.PP
.BR "func (headerFileInfo) ModTime() time.Time"
.PP
.BR "func (headerFileInfo) Mode() (" "mode" " os.FileMode)"
.PP
Mode returns the permission and mode bits for the headerFileInfo. 
.PP
.BR "func (headerFileInfo) Name() string"
.PP
Name returns the base name of the file. 
.PP
.BR "func (headerFileInfo) Size() int64"
.PP
.BR "func (headerFileInfo) Sys() interface{}"
.SS "regFileReader"
.B type regFileReader struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
A regFileReader is a numBytesReader for reading file data from a tar archive. 
.PP
.BR "func (*regFileReader) Read(" "b" " []byte) (" "n" " int, " "err" " error)"
.SS "sparseFileReader"
.B type sparseFileReader struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
A sparseFileReader is a numBytesReader for reading sparse file data from a tar archive. 
.PP
.BR "func (*sparseFileReader) Read(" "b" " []byte) (" "n" " int, " "err" " error)"
.PP
Read reads the sparse file data in expanded form. 
