.\"    Automatically generated by mango(1)
.TH "sort" 3 "2014-11-26" "version 2014-11-26" "Go Packages"
.SH "NAME"
sort \- Package sort provides primitives for sorting slices and user-defined
collections.
.SH "SYNOPSIS"
.B import \*(lqsort\(rq
.sp
.RB "func " Float64s
.sp 0
.RB "func " Float64sAreSorted
.sp 0
.RB "func " Ints
.sp 0
.RB "func " IntsAreSorted
.sp 0
.RB "func " IsSorted
.sp 0
.RB "func " Search
.sp 0
.RB "func " SearchFloat64s
.sp 0
.RB "func " SearchInts
.sp 0
.RB "func " SearchStrings
.sp 0
.RB "func " Sort
.sp 0
.RB "func " Stable
.sp 0
.RB "func " Strings
.sp 0
.RB "func " StringsAreSorted
.sp 0
.RB "type " Float64Slice
.sp 0
.RS
.RB "func (Float64Slice) " Len
.sp 0
.RB "func (Float64Slice) " Less
.sp 0
.RB "func (Float64Slice) " Search
.sp 0
.RB "func (Float64Slice) " Sort
.sp 0
.RB "func (Float64Slice) " Swap
.sp 0
.RE
.RB "type " IntSlice
.sp 0
.RS
.RB "func (IntSlice) " Len
.sp 0
.RB "func (IntSlice) " Less
.sp 0
.RB "func (IntSlice) " Search
.sp 0
.RB "func (IntSlice) " Sort
.sp 0
.RB "func (IntSlice) " Swap
.sp 0
.RE
.RB "type " Interface
.sp 0
.RS
.RB "func " Reverse
.sp 0
.RE
.RB "type " StringSlice
.sp 0
.RS
.RB "func (StringSlice) " Len
.sp 0
.RB "func (StringSlice) " Less
.sp 0
.RB "func (StringSlice) " Search
.sp 0
.RB "func (StringSlice) " Sort
.sp 0
.RB "func (StringSlice) " Swap
.sp 0
.RE
.RB "type " reverse
.sp 0
.RS
.RB "func (reverse) " Less
.sp 0
.RE
.SH "FUNCTIONS"
.PP
.BR "func Float64s(" "a" " []float64)"
.PP
Float64s sorts a slice of float64s in increasing order. 
.PP
.BR "func Float64sAreSorted(" "a" " []float64) bool"
.PP
Float64sAreSorted tests whether a slice of float64s is sorted in increasing order. 
.PP
.BR "func Ints(" "a" " []int)"
.PP
Ints sorts a slice of ints in increasing order. 
.PP
.BR "func IntsAreSorted(" "a" " []int) bool"
.PP
IntsAreSorted tests whether a slice of ints is sorted in increasing order. 
.PP
.BR "func IsSorted(" "data" " Interface) bool"
.PP
IsSorted reports whether data is sorted. 
.PP
.BR "func Search(" "n" " int, " "f" " func(int) bool) int"
.PP
Search uses binary search to find and return the smallest index i in [0, n) at which f(i) is true, assuming that on the range [0, n), f(i) == true implies f(i+1) == true. 
That is, Search requires that f is false for some (possibly empty) prefix of the input range [0, n) and then true for the (possibly empty) remainder; Search returns the first true index. 
If there is no such index, Search returns n. 
(Note that the "not found" return value is not 
.B \-1
as in, for instance, strings.Index). 
Search calls f(i) only for i in the range [0, n). 
.PP
A common use of Search is to find the index i for a value x in a sorted, indexable data structure such as an array or slice. 
In this case, the argument f, typically a closure, captures the value to be searched for, and how the data structure is indexed and ordered. 
.PP
For instance, given a slice data sorted in ascending order, the call Search(len(data), func(i int) bool { return data[i] >= 23 }) returns the smallest index i such that data[i] >= 23. 
If the caller wants to find whether 23 is in the slice, it must test data[i] == 23 separately. 
.PP
Searching data sorted in descending order would use the <= operator instead of the >= operator. 
.PP
To complete the example above, the following code tries to find the value x in an integer slice data sorted in ascending order: 
.PP
.RS
x := 23
.sp 0
i := sort.Search(len(data), func(i int) bool { return data[i] >= x })
.sp 0
if i < len(data) && data[i] == x {
.sp 0
.RS
// x is present at data[i]
.sp 0
.RE
} else {
.sp 0
.RS
// x is not present in data,
.sp 0
// but i is the index where it would be inserted.
.sp 0
.RE
}
.sp 0
.sp
.RE
.PP
As a more whimsical example, this program guesses your number: 
.PP
.RS
func GuessingGame() {
.sp 0
.RS
var s string
.sp 0
fmt.Printf("Pick an integer from 0 to 100.\en")
.sp 0
answer := sort.Search(100, func(i int) bool {
.sp 0
.RS
fmt.Printf("Is your number <= %d? ", i)
.sp 0
fmt.Scanf("%s", &s)
.sp 0
return s != "" && s[0] == \(fmy'
.sp 0
.RE
})
.sp 0
fmt.Printf("Your number is %d.\en", answer)
.sp 0
.RE
}
.RE
.PP
.BR "func SearchFloat64s(" "a" " []float64, " "x" " float64) int"
.PP
SearchFloat64s searches for x in a sorted slice of float64s and returns the index as specified by Search. 
The return value is the index to insert x if x is not present (it could be len(a)). 
The slice must be sorted in ascending order. 
.PP
.BR "func SearchInts(" "a" " []int, " "x" " int) int"
.PP
SearchInts searches for x in a sorted slice of ints and returns the index as specified by Search. 
The return value is the index to insert x if x is not present (it could be len(a)). 
The slice must be sorted in ascending order. 
.PP
.BR "func SearchStrings(" "a" " []string, " "x" " string) int"
.PP
SearchStrings searches for x in a sorted slice of strings and returns the index as specified by Search. 
The return value is the index to insert x if x is not present (it could be len(a)). 
The slice must be sorted in ascending order. 
.PP
.BR "func Sort(" "data" " Interface)"
.PP
Sort sorts data. 
It makes one call to data.Len to determine n, and O(n*log(n)) calls to data.Less and data.Swap. 
The sort is not guaranteed to be stable. 
.PP
.BR "func Stable(" "data" " Interface)"
.PP
Stable sorts data while keeping the original order of equal elements. 
.PP
It makes one call to data.Len to determine n, O(n*log(n)) calls to data.Less and O(n*log(n)*log(n)) calls to data.Swap. 
.PP
.BR "func Strings(" "a" " []string)"
.PP
Strings sorts a slice of strings in increasing order. 
.PP
.BR "func StringsAreSorted(" "a" " []string) bool"
.PP
StringsAreSorted tests whether a slice of strings is sorted in increasing order. 
.SH "TYPES"
.SS "Float64Slice"
.B type Float64Slice []float64
.PP
Float64Slice attaches the methods of Interface to []float64, sorting in increasing order. 
.PP
.BR "func (Float64Slice) Len() int"
.PP
.BR "func (Float64Slice) Less(" "i" ", " "j" " int) bool"
.PP
.BR "func (Float64Slice) Search(" "x" " float64) int"
.PP
Search returns the result of applying SearchFloat64s to the receiver and x. 
.PP
.BR "func (Float64Slice) Sort()"
.PP
Sort is a convenience method. 
.PP
.BR "func (Float64Slice) Swap(" "i" ", " "j" " int)"
.SS "IntSlice"
.B type IntSlice []int
.PP
IntSlice attaches the methods of Interface to []int, sorting in increasing order. 
.PP
.BR "func (IntSlice) Len() int"
.PP
.BR "func (IntSlice) Less(" "i" ", " "j" " int) bool"
.PP
.BR "func (IntSlice) Search(" "x" " int) int"
.PP
Search returns the result of applying SearchInts to the receiver and x. 
.PP
.BR "func (IntSlice) Sort()"
.PP
Sort is a convenience method. 
.PP
.BR "func (IntSlice) Swap(" "i" ", " "j" " int)"
.SS "Interface"
.B type Interface interface {
.RS
.B Len() int
.sp 0
.B Less(i, j int) bool
.sp 0
.B Swap(i, j int)
.sp 0
.RE
.B }
.PP
A type, typically a collection, that satisfies sort.Interface can be sorted by the routines in this package. 
The methods require that the elements of the collection be enumerated by an integer index. 
.PP
.BR "func Reverse(" "data" " Interface) Interface"
.PP
Reverse returns the reverse order for data. 
.SS "StringSlice"
.B type StringSlice []string
.PP
StringSlice attaches the methods of Interface to []string, sorting in increasing order. 
.PP
.BR "func (StringSlice) Len() int"
.PP
.BR "func (StringSlice) Less(" "i" ", " "j" " int) bool"
.PP
.BR "func (StringSlice) Search(" "x" " string) int"
.PP
Search returns the result of applying SearchStrings to the receiver and x. 
.PP
.BR "func (StringSlice) Sort()"
.PP
Sort is a convenience method. 
.PP
.BR "func (StringSlice) Swap(" "i" ", " "j" " int)"
.SS "reverse"
.B type reverse struct {
.RS
.B Interface
.RE
.B }
.PP
.PP
.BR "func (reverse) Less(" "i" ", " "j" " int) bool"
.PP
Less returns the opposite of the embedded implementation's Less method. 
