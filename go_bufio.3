.\"    Automatically generated by mango(1)
.TH "bufio" 3 "2014-11-26" "version 2014-11-26" "Go Packages"
.SH "NAME"
bufio \- Package bufio implements buffered I/O.
.SH "SYNOPSIS"
.B import \*(lqbufio\(rq
.sp
.B Constants
.sp 0
.B Variables
.sp 0
.RB "func " ScanBytes
.sp 0
.RB "func " ScanLines
.sp 0
.RB "func " ScanRunes
.sp 0
.RB "func " ScanWords
.sp 0
.RB "type " ReadWriter
.sp 0
.RS
.RB "func " NewReadWriter
.sp 0
.RB "func (ReadWriter) " Available
.sp 0
.RB "func (ReadWriter) " Flush
.sp 0
.RB "func (ReadWriter) " Peek
.sp 0
.RB "func (ReadWriter) " Read
.sp 0
.RB "func (ReadWriter) " ReadByte
.sp 0
.RB "func (ReadWriter) " ReadBytes
.sp 0
.RB "func (ReadWriter) " ReadFrom
.sp 0
.RB "func (ReadWriter) " ReadLine
.sp 0
.RB "func (ReadWriter) " ReadRune
.sp 0
.RB "func (ReadWriter) " ReadSlice
.sp 0
.RB "func (ReadWriter) " ReadString
.sp 0
.RB "func (ReadWriter) " UnreadByte
.sp 0
.RB "func (ReadWriter) " UnreadRune
.sp 0
.RB "func (ReadWriter) " Write
.sp 0
.RB "func (ReadWriter) " WriteByte
.sp 0
.RB "func (ReadWriter) " WriteRune
.sp 0
.RB "func (ReadWriter) " WriteString
.sp 0
.RB "func (ReadWriter) " WriteTo
.sp 0
.RE
.RB "type " Reader
.sp 0
.RS
.RB "func " NewReader
.sp 0
.RB "func " NewReaderSize
.sp 0
.RB "func (*Reader) " Buffered
.sp 0
.RB "func (*Reader) " Peek
.sp 0
.RB "func (*Reader) " Read
.sp 0
.RB "func (*Reader) " ReadByte
.sp 0
.RB "func (*Reader) " ReadBytes
.sp 0
.RB "func (*Reader) " ReadLine
.sp 0
.RB "func (*Reader) " ReadRune
.sp 0
.RB "func (*Reader) " ReadSlice
.sp 0
.RB "func (*Reader) " ReadString
.sp 0
.RB "func (*Reader) " Reset
.sp 0
.RB "func (*Reader) " UnreadByte
.sp 0
.RB "func (*Reader) " UnreadRune
.sp 0
.RB "func (*Reader) " WriteTo
.sp 0
.RE
.RB "type " Scanner
.sp 0
.RS
.RB "func " NewScanner
.sp 0
.RB "func (*Scanner) " Bytes
.sp 0
.RB "func (*Scanner) " Err
.sp 0
.RB "func (*Scanner) " Scan
.sp 0
.RB "func (*Scanner) " Split
.sp 0
.RB "func (*Scanner) " Text
.sp 0
.RE
.RB "type " SplitFunc
.sp 0
.RB "type " Writer
.sp 0
.RS
.RB "func " NewWriter
.sp 0
.RB "func " NewWriterSize
.sp 0
.RB "func (*Writer) " Available
.sp 0
.RB "func (*Writer) " Buffered
.sp 0
.RB "func (*Writer) " Flush
.sp 0
.RB "func (*Writer) " ReadFrom
.sp 0
.RB "func (*Writer) " Reset
.sp 0
.RB "func (*Writer) " Write
.sp 0
.RB "func (*Writer) " WriteByte
.sp 0
.RB "func (*Writer) " WriteRune
.sp 0
.RB "func (*Writer) " WriteString
.sp 0
.RE
.SH "DESCRIPTION"
Package bufio implements buffered I/O. 
It wraps an io.Reader or io.Writer object, creating another object (Reader or Writer) that also implements the interface but provides buffering and some help for textual I/O. 
.SH "CONSTANTS"
.PP
.B const 
.B MaxScanTokenSize 
.sp 0
.SH "VARIABLES"
.PP
.B var (
.RS
.B ErrInvalidUnreadByte 
.sp 0
.B ErrInvalidUnreadRune 
.sp 0
.B ErrBufferFull 
.sp 0
.B ErrNegativeCount 
.sp 0
.RE
.B )
.sp 0
Errors returned by Scanner. 
.PP
.B var (
.RS
.B ErrTooLong 
.sp 0
.B ErrNegativeAdvance 
.sp 0
.B ErrAdvanceTooFar 
.sp 0
.RE
.B )
.SH "FUNCTIONS"
.PP
.BR "func ScanBytes(" "data" " []byte, " "atEOF" " bool) (" "advance" " int, " "token" " []byte, " "err" " error)"
.PP
ScanBytes is a split function for a Scanner that returns each byte as a token. 
.PP
.BR "func ScanLines(" "data" " []byte, " "atEOF" " bool) (" "advance" " int, " "token" " []byte, " "err" " error)"
.PP
ScanLines is a split function for a Scanner that returns each line of text, stripped of any trailing end\-of\-line marker. 
The returned line may be empty. 
The end\-of\-line marker is one optional carriage return followed by one mandatory newline. 
In regular expression notation, it is `\er?\en`. 
The last non\-empty line of input will be returned even if it has no newline. 
.PP
.BR "func ScanRunes(" "data" " []byte, " "atEOF" " bool) (" "advance" " int, " "token" " []byte, " "err" " error)"
.PP
ScanRunes is a split function for a Scanner that returns each UTF\-8\-encoded rune as a token. 
The sequence of runes returned is equivalent to that from a range loop over the input as a string, which means that erroneous UTF\-8 encodings translate to U+FFFD = "\exef\exbf\exbd". 
Because of the Scan interface, this makes it impossible for the client to distinguish correctly encoded replacement runes from encoding errors. 
.PP
.BR "func ScanWords(" "data" " []byte, " "atEOF" " bool) (" "advance" " int, " "token" " []byte, " "err" " error)"
.PP
ScanWords is a split function for a Scanner that returns each space\-separated word of text, with surrounding spaces deleted. 
It will never return an empty string. 
The definition of space is set by unicode.IsSpace. 
.SH "TYPES"
.SS "ReadWriter"
.B type ReadWriter struct {
.RS
.B *Reader
.sp 0
.B *Writer
.RE
.B }
.PP
ReadWriter stores pointers to a Reader and a Writer. 
It implements io.ReadWriter. 
.PP
.BR "func NewReadWriter(" "r" " *Reader, " "w" " *Writer) *ReadWriter"
.PP
NewReadWriter allocates a new ReadWriter that dispatches to r and w. 
.PP
.BR "func (ReadWriter) Available() int"
.PP
Available returns how many bytes are unused in the buffer. 
.PP
.BR "func (ReadWriter) Flush() error"
.PP
Flush writes any buffered data to the underlying io.Writer. 
.PP
.BR "func (ReadWriter) Peek(" "n" " int) ([]byte, error)"
.PP
Peek returns the next n bytes without advancing the reader. 
The bytes stop being valid at the next read call. 
If Peek returns fewer than n bytes, it also returns an error explaining why the read is short. 
The error is ErrBufferFull if n is larger than b's buffer size. 
.PP
.BR "func (ReadWriter) Read(" "p" " []byte) (" "n" " int, " "err" " error)"
.PP
Read reads data into p. 
It returns the number of bytes read into p. 
It calls Read at most once on the underlying Reader, hence n may be less than len(p). 
At EOF, the count will be zero and err will be io.EOF. 
.PP
.BR "func (ReadWriter) ReadByte() (" "c" " byte, " "err" " error)"
.PP
ReadByte reads and returns a single byte. 
If no byte is available, returns an error. 
.PP
.BR "func (ReadWriter) ReadBytes(" "delim" " byte) (" "line" " []byte, " "err" " error)"
.PP
ReadBytes reads until the first occurrence of delim in the input, returning a slice containing the data up to and including the delimiter. 
If ReadBytes encounters an error before finding a delimiter, it returns the data read before the error and the error itself (often io.EOF). 
ReadBytes returns err != nil if and only if the returned data does not end in delim. 
For simple uses, a Scanner may be more convenient. 
.PP
.BR "func (ReadWriter) ReadFrom(" "r" " io.Reader) (" "n" " int64, " "err" " error)"
.PP
ReadFrom implements io.ReaderFrom. 
.PP
.BR "func (ReadWriter) ReadLine() (" "line" " []byte, " "isPrefix" " bool, " "err" " error)"
.PP
ReadLine is a low\-level line\-reading primitive. 
Most callers should use ReadBytes('\en') or ReadString('\en') instead or use a Scanner. 
.PP
ReadLine tries to return a single line, not including the end\-of\-line bytes. 
If the line was too long for the buffer then isPrefix is set and the beginning of the line is returned. 
The rest of the line will be returned from future calls. 
isPrefix will be false when returning the last fragment of the line. 
The returned buffer is only valid until the next call to ReadLine. 
ReadLine either returns a non\-nil line or it returns an error, never both. 
.PP
The text returned from ReadLine does not include the line end ("\er\en" or "\en"). 
No indication or error is given if the input ends without a final line end. 
Calling UnreadByte after ReadLine will always unread the last byte read (possibly a character belonging to the line end) even if that byte is not part of the line returned by ReadLine. 
.PP
.BR "func (ReadWriter) ReadRune() (" "r" " rune, " "size" " int, " "err" " error)"
.PP
ReadRune reads a single UTF\-8 encoded Unicode character and returns the rune and its size in bytes. 
If the encoded rune is invalid, it consumes one byte and returns unicode.ReplacementChar (U+FFFD) with a size of 1. 
.PP
.BR "func (ReadWriter) ReadSlice(" "delim" " byte) (" "line" " []byte, " "err" " error)"
.PP
ReadSlice reads until the first occurrence of delim in the input, returning a slice pointing at the bytes in the buffer. 
The bytes stop being valid at the next read. 
If ReadSlice encounters an error before finding a delimiter, it returns all the data in the buffer and the error itself (often io.EOF). 
ReadSlice fails with error ErrBufferFull if the buffer fills without a delim. 
Because the data returned from ReadSlice will be overwritten by the next I/O operation, most clients should use ReadBytes or ReadString instead. 
ReadSlice returns err != nil if and only if line does not end in delim. 
.PP
.BR "func (ReadWriter) ReadString(" "delim" " byte) (" "line" " string, " "err" " error)"
.PP
ReadString reads until the first occurrence of delim in the input, returning a string containing the data up to and including the delimiter. 
If ReadString encounters an error before finding a delimiter, it returns the data read before the error and the error itself (often io.EOF). 
ReadString returns err != nil if and only if the returned data does not end in delim. 
For simple uses, a Scanner may be more convenient. 
.PP
.BR "func (ReadWriter) UnreadByte() error"
.PP
UnreadByte unreads the last byte. 
Only the most recently read byte can be unread. 
.PP
.BR "func (ReadWriter) UnreadRune() error"
.PP
UnreadRune unreads the last rune. 
If the most recent read operation on the buffer was not a ReadRune, UnreadRune returns an error. 
(In this regard it is stricter than UnreadByte, which will unread the last byte from any read operation.) 
.PP
.BR "func (ReadWriter) Write(" "p" " []byte) (" "nn" " int, " "err" " error)"
.PP
Write writes the contents of p into the buffer. 
It returns the number of bytes written. 
If nn < len(p), it also returns an error explaining why the write is short. 
.PP
.BR "func (ReadWriter) WriteByte(" "c" " byte) error"
.PP
WriteByte writes a single byte. 
.PP
.BR "func (ReadWriter) WriteRune(" "r" " rune) (" "size" " int, " "err" " error)"
.PP
WriteRune writes a single Unicode code point, returning the number of bytes written and any error. 
.PP
.BR "func (ReadWriter) WriteString(" "s" " string) (int, error)"
.PP
WriteString writes a string. 
It returns the number of bytes written. 
If the count is less than len(s), it also returns an error explaining why the write is short. 
.PP
.BR "func (ReadWriter) WriteTo(" "w" " io.Writer) (" "n" " int64, " "err" " error)"
.PP
WriteTo implements io.WriterTo. 
.SS "Reader"
.B type Reader struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
Reader implements buffering for an io.Reader object. 
.PP
.BR "func NewReader(" "rd" " io.Reader) *Reader"
.PP
NewReader returns a new Reader whose buffer has the default size. 
.PP
.BR "func NewReaderSize(" "rd" " io.Reader, " "size" " int) *Reader"
.PP
NewReaderSize returns a new Reader whose buffer has at least the specified size. 
If the argument io.Reader is already a Reader with large enough size, it returns the underlying Reader. 
.PP
.BR "func (*Reader) Buffered() int"
.PP
Buffered returns the number of bytes that can be read from the current buffer. 
.PP
.BR "func (*Reader) Peek(" "n" " int) ([]byte, error)"
.PP
Peek returns the next n bytes without advancing the reader. 
The bytes stop being valid at the next read call. 
If Peek returns fewer than n bytes, it also returns an error explaining why the read is short. 
The error is ErrBufferFull if n is larger than b's buffer size. 
.PP
.BR "func (*Reader) Read(" "p" " []byte) (" "n" " int, " "err" " error)"
.PP
Read reads data into p. 
It returns the number of bytes read into p. 
It calls Read at most once on the underlying Reader, hence n may be less than len(p). 
At EOF, the count will be zero and err will be io.EOF. 
.PP
.BR "func (*Reader) ReadByte() (" "c" " byte, " "err" " error)"
.PP
ReadByte reads and returns a single byte. 
If no byte is available, returns an error. 
.PP
.BR "func (*Reader) ReadBytes(" "delim" " byte) (" "line" " []byte, " "err" " error)"
.PP
ReadBytes reads until the first occurrence of delim in the input, returning a slice containing the data up to and including the delimiter. 
If ReadBytes encounters an error before finding a delimiter, it returns the data read before the error and the error itself (often io.EOF). 
ReadBytes returns err != nil if and only if the returned data does not end in delim. 
For simple uses, a Scanner may be more convenient. 
.PP
.BR "func (*Reader) ReadLine() (" "line" " []byte, " "isPrefix" " bool, " "err" " error)"
.PP
ReadLine is a low\-level line\-reading primitive. 
Most callers should use ReadBytes('\en') or ReadString('\en') instead or use a Scanner. 
.PP
ReadLine tries to return a single line, not including the end\-of\-line bytes. 
If the line was too long for the buffer then isPrefix is set and the beginning of the line is returned. 
The rest of the line will be returned from future calls. 
isPrefix will be false when returning the last fragment of the line. 
The returned buffer is only valid until the next call to ReadLine. 
ReadLine either returns a non\-nil line or it returns an error, never both. 
.PP
The text returned from ReadLine does not include the line end ("\er\en" or "\en"). 
No indication or error is given if the input ends without a final line end. 
Calling UnreadByte after ReadLine will always unread the last byte read (possibly a character belonging to the line end) even if that byte is not part of the line returned by ReadLine. 
.PP
.BR "func (*Reader) ReadRune() (" "r" " rune, " "size" " int, " "err" " error)"
.PP
ReadRune reads a single UTF\-8 encoded Unicode character and returns the rune and its size in bytes. 
If the encoded rune is invalid, it consumes one byte and returns unicode.ReplacementChar (U+FFFD) with a size of 1. 
.PP
.BR "func (*Reader) ReadSlice(" "delim" " byte) (" "line" " []byte, " "err" " error)"
.PP
ReadSlice reads until the first occurrence of delim in the input, returning a slice pointing at the bytes in the buffer. 
The bytes stop being valid at the next read. 
If ReadSlice encounters an error before finding a delimiter, it returns all the data in the buffer and the error itself (often io.EOF). 
ReadSlice fails with error ErrBufferFull if the buffer fills without a delim. 
Because the data returned from ReadSlice will be overwritten by the next I/O operation, most clients should use ReadBytes or ReadString instead. 
ReadSlice returns err != nil if and only if line does not end in delim. 
.PP
.BR "func (*Reader) ReadString(" "delim" " byte) (" "line" " string, " "err" " error)"
.PP
ReadString reads until the first occurrence of delim in the input, returning a string containing the data up to and including the delimiter. 
If ReadString encounters an error before finding a delimiter, it returns the data read before the error and the error itself (often io.EOF). 
ReadString returns err != nil if and only if the returned data does not end in delim. 
For simple uses, a Scanner may be more convenient. 
.PP
.BR "func (*Reader) Reset(" "r" " io.Reader)"
.PP
Reset discards any buffered data, resets all state, and switches the buffered reader to read from r. 
.PP
.BR "func (*Reader) UnreadByte() error"
.PP
UnreadByte unreads the last byte. 
Only the most recently read byte can be unread. 
.PP
.BR "func (*Reader) UnreadRune() error"
.PP
UnreadRune unreads the last rune. 
If the most recent read operation on the buffer was not a ReadRune, UnreadRune returns an error. 
(In this regard it is stricter than UnreadByte, which will unread the last byte from any read operation.) 
.PP
.BR "func (*Reader) WriteTo(" "w" " io.Writer) (" "n" " int64, " "err" " error)"
.PP
WriteTo implements io.WriterTo. 
.SS "Scanner"
.B type Scanner struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
Scanner provides a convenient interface for reading data such as a file of newline\-delimited lines of text. 
Successive calls to the Scan method will step through the \(fmtokens' of a file, skipping the bytes between the tokens. 
The specification of a token is defined by a split function of type SplitFunc; the default split function breaks the input into lines with line termination stripped. 
Split functions are defined in this package for scanning a file into lines, bytes, UTF\-8\-encoded runes, and space\-delimited words. 
The client may instead provide a custom split function. 
.PP
Scanning stops unrecoverably at EOF, the first I/O error, or a token too large to fit in the buffer. 
When a scan stops, the reader may have advanced arbitrarily far past the last token. 
Programs that need more control over error handling or large tokens, or must run sequential scans on a reader, should use bufio.Reader instead. 
.PP
.BR "func NewScanner(" "r" " io.Reader) *Scanner"
.PP
NewScanner returns a new Scanner to read from r. 
The split function defaults to ScanLines. 
.PP
.BR "func (*Scanner) Bytes() []byte"
.PP
Bytes returns the most recent token generated by a call to Scan. 
The underlying array may point to data that will be overwritten by a subsequent call to Scan. 
It does no allocation. 
.PP
.BR "func (*Scanner) Err() error"
.PP
Err returns the first non\-EOF error that was encountered by the Scanner. 
.PP
.BR "func (*Scanner) Scan() bool"
.PP
Scan advances the Scanner to the next token, which will then be available through the Bytes or Text method. 
It returns false when the scan stops, either by reaching the end of the input or an error. 
After Scan returns false, the Err method will return any error that occurred during scanning, except that if it was io.EOF, Err will return nil. 
.PP
.BR "func (*Scanner) Split(" "split" " SplitFunc)"
.PP
Split sets the split function for the Scanner. 
If called, it must be called before Scan. 
The default split function is ScanLines. 
.PP
.BR "func (*Scanner) Text() string"
.PP
Text returns the most recent token generated by a call to Scan as a newly allocated string holding its bytes. 
.SS "SplitFunc"
.B type SplitFunc func(data []byte, atEOF bool) (advance int, token []byte, err error)
.PP
SplitFunc is the signature of the split function used to tokenize the input. 
The arguments are an initial substring of the remaining unprocessed data and a flag, atEOF, that reports whether the Reader has no more data to give. 
The return values are the number of bytes to advance the input and the next token to return to the user, plus an error, if any. 
If the data does not yet hold a complete token, for instance if it has no newline while scanning lines, SplitFunc can return (0, nil, nil) to signal the Scanner to read more data into the slice and try again with a longer slice starting at the same point in the input. 
.PP
If the returned error is non\-nil, scanning stops and the error is returned to the client. 
.PP
The function is never called with an empty data slice unless atEOF is true. 
If atEOF is true, however, data may be non\-empty and, as always, holds unprocessed text. 
.SS "Writer"
.B type Writer struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
Writer implements buffering for an io.Writer object. 
If an error occurs writing to a Writer, no more data will be accepted and all subsequent writes will return the error. 
After all data has been written, the client should call the Flush method to guarantee all data has been forwarded to the underlying io.Writer. 
.PP
.BR "func NewWriter(" "w" " io.Writer) *Writer"
.PP
NewWriter returns a new Writer whose buffer has the default size. 
.PP
.BR "func NewWriterSize(" "w" " io.Writer, " "size" " int) *Writer"
.PP
NewWriterSize returns a new Writer whose buffer has at least the specified size. 
If the argument io.Writer is already a Writer with large enough size, it returns the underlying Writer. 
.PP
.BR "func (*Writer) Available() int"
.PP
Available returns how many bytes are unused in the buffer. 
.PP
.BR "func (*Writer) Buffered() int"
.PP
Buffered returns the number of bytes that have been written into the current buffer. 
.PP
.BR "func (*Writer) Flush() error"
.PP
Flush writes any buffered data to the underlying io.Writer. 
.PP
.BR "func (*Writer) ReadFrom(" "r" " io.Reader) (" "n" " int64, " "err" " error)"
.PP
ReadFrom implements io.ReaderFrom. 
.PP
.BR "func (*Writer) Reset(" "w" " io.Writer)"
.PP
Reset discards any unflushed buffered data, clears any error, and resets b to write its output to w. 
.PP
.BR "func (*Writer) Write(" "p" " []byte) (" "nn" " int, " "err" " error)"
.PP
Write writes the contents of p into the buffer. 
It returns the number of bytes written. 
If nn < len(p), it also returns an error explaining why the write is short. 
.PP
.BR "func (*Writer) WriteByte(" "c" " byte) error"
.PP
WriteByte writes a single byte. 
.PP
.BR "func (*Writer) WriteRune(" "r" " rune) (" "size" " int, " "err" " error)"
.PP
WriteRune writes a single Unicode code point, returning the number of bytes written and any error. 
.PP
.BR "func (*Writer) WriteString(" "s" " string) (int, error)"
.PP
WriteString writes a string. 
It returns the number of bytes written. 
If the count is less than len(s), it also returns an error explaining why the write is short. 
