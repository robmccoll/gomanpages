.\"    Automatically generated by mango(1)
.TH "regexp" 3 "2014-11-26" "version 2014-11-26" "Go Packages"
.SH "NAME"
regexp \- Package regexp implements regular expression search.
.SH "SYNOPSIS"
.B import \*(lqregexp\(rq
.sp
.RB "func " Match
.sp 0
.RB "func " MatchReader
.sp 0
.RB "func " MatchString
.sp 0
.RB "func " QuoteMeta
.sp 0
.RB "type " Regexp
.sp 0
.RS
.RB "func " Compile
.sp 0
.RB "func " CompilePOSIX
.sp 0
.RB "func " MustCompile
.sp 0
.RB "func " MustCompilePOSIX
.sp 0
.RB "func (*Regexp) " Expand
.sp 0
.RB "func (*Regexp) " ExpandString
.sp 0
.RB "func (*Regexp) " Find
.sp 0
.RB "func (*Regexp) " FindAll
.sp 0
.RB "func (*Regexp) " FindAllIndex
.sp 0
.RB "func (*Regexp) " FindAllString
.sp 0
.RB "func (*Regexp) " FindAllStringIndex
.sp 0
.RB "func (*Regexp) " FindAllStringSubmatch
.sp 0
.RB "func (*Regexp) " FindAllStringSubmatchIndex
.sp 0
.RB "func (*Regexp) " FindAllSubmatch
.sp 0
.RB "func (*Regexp) " FindAllSubmatchIndex
.sp 0
.RB "func (*Regexp) " FindIndex
.sp 0
.RB "func (*Regexp) " FindReaderIndex
.sp 0
.RB "func (*Regexp) " FindReaderSubmatchIndex
.sp 0
.RB "func (*Regexp) " FindString
.sp 0
.RB "func (*Regexp) " FindStringIndex
.sp 0
.RB "func (*Regexp) " FindStringSubmatch
.sp 0
.RB "func (*Regexp) " FindStringSubmatchIndex
.sp 0
.RB "func (*Regexp) " FindSubmatch
.sp 0
.RB "func (*Regexp) " FindSubmatchIndex
.sp 0
.RB "func (*Regexp) " LiteralPrefix
.sp 0
.RB "func (*Regexp) " Longest
.sp 0
.RB "func (*Regexp) " Match
.sp 0
.RB "func (*Regexp) " MatchReader
.sp 0
.RB "func (*Regexp) " MatchString
.sp 0
.RB "func (*Regexp) " NumSubexp
.sp 0
.RB "func (*Regexp) " ReplaceAll
.sp 0
.RB "func (*Regexp) " ReplaceAllFunc
.sp 0
.RB "func (*Regexp) " ReplaceAllLiteral
.sp 0
.RB "func (*Regexp) " ReplaceAllLiteralString
.sp 0
.RB "func (*Regexp) " ReplaceAllString
.sp 0
.RB "func (*Regexp) " ReplaceAllStringFunc
.sp 0
.RB "func (*Regexp) " Split
.sp 0
.RB "func (*Regexp) " String
.sp 0
.RB "func (*Regexp) " SubexpNames
.sp 0
.RE
.RB "type " onePassInst
.sp 0
.RB "type " onePassProg
.sp 0
.RS
.RE
.RB "type " runeSlice
.sp 0
.RS
.RB "func (runeSlice) " Len
.sp 0
.RB "func (runeSlice) " Less
.sp 0
.RB "func (runeSlice) " Sort
.sp 0
.RB "func (runeSlice) " Swap
.sp 0
.RE
.SH "DESCRIPTION"
The syntax of the regular expressions accepted is the same general syntax used by Perl, Python, and other languages. 
More precisely, it is the syntax accepted by RE2 and described at http://code.google.com/p/re2/wiki/Syntax, except for \eC. 
For an overview of the syntax, run godoc regexp/syntax 
.PP
The regexp implementation provided by this package is guaranteed to run in time linear in the size of the input. 
(This is a property not guaranteed by most open source implementations of regular expressions.) For more information about this property, see 
.PP
.RS
http://swtch.com/~rsc/regexp/regexp1.html
.RE
.PP
or any book about automata theory. 
.PP
All characters are UTF\-8\-encoded code points. 
.PP
There are 16 methods of Regexp that match a regular expression and identify the matched text. 
Their names are matched by this regular expression: 
.PP
.RS
Find(All)?(String)?(Submatch)?(Index)?
.sp 0
.sp
.RE
.PP
If \(fmAll' is present, the routine matches successive non\-overlapping matches of the entire expression. 
Empty matches abutting a preceding match are ignored. 
The return value is a slice containing the successive return values of the corresponding non\-'All' routine. 
These routines take an extra integer argument, n; if n >= 0, the function returns at most n matches/submatches. 
.PP
If \(fmString' is present, the argument is a string; otherwise it is a slice of bytes; return values are adjusted as appropriate. 
.PP
If \(fmSubmatch' is present, the return value is a slice identifying the successive submatches of the expression. 
Submatches are matches of parenthesized subexpressions (also known as capturing groups) within the regular expression, numbered from left to right in order of opening parenthesis. 
Submatch 0 is the match of the entire expression, submatch 1 the match of the first parenthesized subexpression, and so on. 
.PP
If \(fmIndex' is present, matches and submatches are identified by byte index pairs within the input string: result[2*n:2*n+1] identifies the indexes of the nth submatch. 
The pair for n==0 identifies the match of the entire expression. 
If \(fmIndex' is not present, the match is identified by the text of the match/submatch. 
If an index is negative, it means that subexpression did not match any string in the input. 
.PP
There is also a subset of the methods that can be applied to text read from a RuneReader: 
.PP
.RS
MatchReader, FindReaderIndex, FindReaderSubmatchIndex
.sp 0
.sp
.RE
.PP
This set may grow. 
Note that regular expression matches may need to examine text beyond the text returned by a match, so the methods that match text from a RuneReader may read arbitrarily far into the input before returning. 
.PP
(There are a few other methods that do not match this pattern.) 
.SH "FUNCTIONS"
.PP
.BR "func Match(" "pattern" " string, " "b" " []byte) (" "matched" " bool, " "err" " error)"
.PP
Match checks whether a textual regular expression matches a byte slice. 
More complicated queries need to use Compile and the full Regexp interface. 
.PP
.BR "func MatchReader(" "pattern" " string, " "r" " io.RuneReader) (" "matched" " bool, " "err" " error)"
.PP
MatchReader checks whether a textual regular expression matches the text read by the RuneReader. 
More complicated queries need to use Compile and the full Regexp interface. 
.PP
.BR "func MatchString(" "pattern" " string, " "s" " string) (" "matched" " bool, " "err" " error)"
.PP
MatchString checks whether a textual regular expression matches a string. 
More complicated queries need to use Compile and the full Regexp interface. 
.PP
.BR "func QuoteMeta(" "s" " string) string"
.PP
QuoteMeta returns a string that quotes all regular expression metacharacters inside the argument text; the returned string is a regular expression matching the literal text. 
For example, QuoteMeta(`[foo]`) returns `\e[foo\e]`. 
.SH "TYPES"
.SS "Regexp"
.B type Regexp struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
Regexp is the representation of a compiled regular expression. 
A Regexp is safe for concurrent use by multiple goroutines. 
.PP
.BR "func Compile(" "expr" " string) (*Regexp, error)"
.PP
Compile parses a regular expression and returns, if successful, a Regexp object that can be used to match against text. 
.PP
When matching against text, the regexp returns a match that begins as early as possible in the input (leftmost), and among those it chooses the one that a backtracking search would have found first. 
This so\-called leftmost\-first matching is the same semantics that Perl, Python, and other implementations use, although this package implements it without the expense of backtracking. 
For POSIX leftmost\-longest matching, see CompilePOSIX. 
.PP
.BR "func CompilePOSIX(" "expr" " string) (*Regexp, error)"
.PP
CompilePOSIX is like Compile but restricts the regular expression to POSIX ERE (egrep) syntax and changes the match semantics to leftmost\-longest. 
.PP
That is, when matching against text, the regexp returns a match that begins as early as possible in the input (leftmost), and among those it chooses a match that is as long as possible. 
This so\-called leftmost\-longest matching is the same semantics that early regular expression implementations used and that POSIX specifies. 
.PP
However, there can be multiple leftmost\-longest matches, with different submatch choices, and here this package diverges from POSIX. 
Among the possible leftmost\-longest matches, this package chooses the one that a backtracking search would have found first, while POSIX specifies that the match be chosen to maximize the length of the first subexpression, then the second, and so on from left to right. 
The POSIX rule is computationally prohibitive and not even well\-defined. 
See http://swtch.com/~rsc/regexp/regexp2.html#posix for details. 
.PP
.BR "func MustCompile(" "str" " string) *Regexp"
.PP
MustCompile is like Compile but panics if the expression cannot be parsed. 
It simplifies safe initialization of global variables holding compiled regular expressions. 
.PP
.BR "func MustCompilePOSIX(" "str" " string) *Regexp"
.PP
MustCompilePOSIX is like CompilePOSIX but panics if the expression cannot be parsed. 
It simplifies safe initialization of global variables holding compiled regular expressions. 
.PP
.BR "func (*Regexp) Expand(" "dst" " []byte, " "template" " []byte, " "src" " []byte, " "match" " []int) []byte"
.PP
Expand appends template to dst and returns the result; during the append, Expand replaces variables in the template with corresponding matches drawn from src. 
The match slice should have been returned by FindSubmatchIndex. 
.PP
In the template, a variable is denoted by a substring of the form $name or ${name}, where name is a non\-empty sequence of letters, digits, and underscores. 
A purely numeric name like $1 refers to the submatch with the corresponding index; other names refer to capturing parentheses named with the (?P<name>...) syntax. 
A reference to an out of range or unmatched index or a name that is not present in the regular expression is replaced with an empty slice. 
.PP
In the $name form, name is taken to be as long as possible: $1x is equivalent to ${1x}, not ${1}x, and, $10 is equivalent to ${10}, not ${1}0. 
.PP
To insert a literal $ in the output, use $$ in the template. 
.PP
.BR "func (*Regexp) ExpandString(" "dst" " []byte, " "template" " string, " "src" " string, " "match" " []int) []byte"
.PP
ExpandString is like Expand but the template and source are strings. 
It appends to and returns a byte slice in order to give the calling code control over allocation. 
.PP
.BR "func (*Regexp) Find(" "b" " []byte) []byte"
.PP
Find returns a slice holding the text of the leftmost match in b of the regular expression. 
A return value of nil indicates no match. 
.PP
.BR "func (*Regexp) FindAll(" "b" " []byte, " "n" " int) [][]byte"
.PP
FindAll is the \(fmAll' version of Find; it returns a slice of all successive matches of the expression, as defined by the \(fmAll' description in the package comment. 
A return value of nil indicates no match. 
.PP
.BR "func (*Regexp) FindAllIndex(" "b" " []byte, " "n" " int) [][]int"
.PP
FindAllIndex is the \(fmAll' version of FindIndex; it returns a slice of all successive matches of the expression, as defined by the \(fmAll' description in the package comment. 
A return value of nil indicates no match. 
.PP
.BR "func (*Regexp) FindAllString(" "s" " string, " "n" " int) []string"
.PP
FindAllString is the \(fmAll' version of FindString; it returns a slice of all successive matches of the expression, as defined by the \(fmAll' description in the package comment. 
A return value of nil indicates no match. 
.PP
.BR "func (*Regexp) FindAllStringIndex(" "s" " string, " "n" " int) [][]int"
.PP
FindAllStringIndex is the \(fmAll' version of FindStringIndex; it returns a slice of all successive matches of the expression, as defined by the \(fmAll' description in the package comment. 
A return value of nil indicates no match. 
.PP
.BR "func (*Regexp) FindAllStringSubmatch(" "s" " string, " "n" " int) [][]string"
.PP
FindAllStringSubmatch is the \(fmAll' version of FindStringSubmatch; it returns a slice of all successive matches of the expression, as defined by the \(fmAll' description in the package comment. 
A return value of nil indicates no match. 
.PP
.BR "func (*Regexp) FindAllStringSubmatchIndex(" "s" " string, " "n" " int) [][]int"
.PP
FindAllStringSubmatchIndex is the \(fmAll' version of FindStringSubmatchIndex; it returns a slice of all successive matches of the expression, as defined by the \(fmAll' description in the package comment. 
A return value of nil indicates no match. 
.PP
.BR "func (*Regexp) FindAllSubmatch(" "b" " []byte, " "n" " int) [][][]byte"
.PP
FindAllSubmatch is the \(fmAll' version of FindSubmatch; it returns a slice of all successive matches of the expression, as defined by the \(fmAll' description in the package comment. 
A return value of nil indicates no match. 
.PP
.BR "func (*Regexp) FindAllSubmatchIndex(" "b" " []byte, " "n" " int) [][]int"
.PP
FindAllSubmatchIndex is the \(fmAll' version of FindSubmatchIndex; it returns a slice of all successive matches of the expression, as defined by the \(fmAll' description in the package comment. 
A return value of nil indicates no match. 
.PP
.BR "func (*Regexp) FindIndex(" "b" " []byte) (" "loc" " []int)"
.PP
FindIndex returns a two\-element slice of integers defining the location of the leftmost match in b of the regular expression. 
The match itself is at b[loc[0]:loc[1]]. 
A return value of nil indicates no match. 
.PP
.BR "func (*Regexp) FindReaderIndex(" "r" " io.RuneReader) (" "loc" " []int)"
.PP
FindReaderIndex returns a two\-element slice of integers defining the location of the leftmost match of the regular expression in text read from the RuneReader. 
The match text was found in the input stream at byte offset loc[0] through loc[1]\-1. 
A return value of nil indicates no match. 
.PP
.BR "func (*Regexp) FindReaderSubmatchIndex(" "r" " io.RuneReader) []int"
.PP
FindReaderSubmatchIndex returns a slice holding the index pairs identifying the leftmost match of the regular expression of text read by the RuneReader, and the matches, if any, of its subexpressions, as defined by the \(fmSubmatch' and \(fmIndex' descriptions in the package comment. 
A return value of nil indicates no match. 
.PP
.BR "func (*Regexp) FindString(" "s" " string) string"
.PP
FindString returns a string holding the text of the leftmost match in s of the regular expression. 
If there is no match, the return value is an empty string, but it will also be empty if the regular expression successfully matches an empty string. 
Use FindStringIndex or FindStringSubmatch if it is necessary to distinguish these cases. 
.PP
.BR "func (*Regexp) FindStringIndex(" "s" " string) (" "loc" " []int)"
.PP
FindStringIndex returns a two\-element slice of integers defining the location of the leftmost match in s of the regular expression. 
The match itself is at s[loc[0]:loc[1]]. 
A return value of nil indicates no match. 
.PP
.BR "func (*Regexp) FindStringSubmatch(" "s" " string) []string"
.PP
FindStringSubmatch returns a slice of strings holding the text of the leftmost match of the regular expression in s and the matches, if any, of its subexpressions, as defined by the \(fmSubmatch' description in the package comment. 
A return value of nil indicates no match. 
.PP
.BR "func (*Regexp) FindStringSubmatchIndex(" "s" " string) []int"
.PP
FindStringSubmatchIndex returns a slice holding the index pairs identifying the leftmost match of the regular expression in s and the matches, if any, of its subexpressions, as defined by the \(fmSubmatch' and \(fmIndex' descriptions in the package comment. 
A return value of nil indicates no match. 
.PP
.BR "func (*Regexp) FindSubmatch(" "b" " []byte) [][]byte"
.PP
FindSubmatch returns a slice of slices holding the text of the leftmost match of the regular expression in b and the matches, if any, of its subexpressions, as defined by the \(fmSubmatch' descriptions in the package comment. 
A return value of nil indicates no match. 
.PP
.BR "func (*Regexp) FindSubmatchIndex(" "b" " []byte) []int"
.PP
FindSubmatchIndex returns a slice holding the index pairs identifying the leftmost match of the regular expression in b and the matches, if any, of its subexpressions, as defined by the \(fmSubmatch' and \(fmIndex' descriptions in the package comment. 
A return value of nil indicates no match. 
.PP
.BR "func (*Regexp) LiteralPrefix() (" "prefix" " string, " "complete" " bool)"
.PP
LiteralPrefix returns a literal string that must begin any match of the regular expression re. 
It returns the boolean true if the literal string comprises the entire regular expression. 
.PP
.BR "func (*Regexp) Longest()"
.PP
Longest makes future searches prefer the leftmost\-longest match. 
That is, when matching against text, the regexp returns a match that begins as early as possible in the input (leftmost), and among those it chooses a match that is as long as possible. 
.PP
.BR "func (*Regexp) Match(" "b" " []byte) bool"
.PP
Match reports whether the Regexp matches the byte slice b. 
.PP
.BR "func (*Regexp) MatchReader(" "r" " io.RuneReader) bool"
.PP
MatchReader reports whether the Regexp matches the text read by the RuneReader. 
.PP
.BR "func (*Regexp) MatchString(" "s" " string) bool"
.PP
MatchString reports whether the Regexp matches the string s. 
.PP
.BR "func (*Regexp) NumSubexp() int"
.PP
NumSubexp returns the number of parenthesized subexpressions in this Regexp. 
.PP
.BR "func (*Regexp) ReplaceAll(" "src" ", " "repl" " []byte) []byte"
.PP
ReplaceAll returns a copy of src, replacing matches of the Regexp with the replacement text repl. 
Inside repl, $ signs are interpreted as in Expand, so for instance $1 represents the text of the first submatch. 
.PP
.BR "func (*Regexp) ReplaceAllFunc(" "src" " []byte, " "repl" " func([]byte) []byte) []byte"
.PP
ReplaceAllFunc returns a copy of src in which all matches of the Regexp have been replaced by the return value of function repl applied to the matched byte slice. 
The replacement returned by repl is substituted directly, without using Expand. 
.PP
.BR "func (*Regexp) ReplaceAllLiteral(" "src" ", " "repl" " []byte) []byte"
.PP
ReplaceAllLiteral returns a copy of src, replacing matches of the Regexp with the replacement bytes repl. 
The replacement repl is substituted directly, without using Expand. 
.PP
.BR "func (*Regexp) ReplaceAllLiteralString(" "src" ", " "repl" " string) string"
.PP
ReplaceAllStringLiteral returns a copy of src, replacing matches of the Regexp with the replacement string repl. 
The replacement repl is substituted directly, without using Expand. 
.PP
.BR "func (*Regexp) ReplaceAllString(" "src" ", " "repl" " string) string"
.PP
ReplaceAllString returns a copy of src, replacing matches of the Regexp with the replacement string repl. 
Inside repl, $ signs are interpreted as in Expand, so for instance $1 represents the text of the first submatch. 
.PP
.BR "func (*Regexp) ReplaceAllStringFunc(" "src" " string, " "repl" " func(string) string) string"
.PP
ReplaceAllStringFunc returns a copy of src in which all matches of the Regexp have been replaced by the return value of function repl applied to the matched substring. 
The replacement returned by repl is substituted directly, without using Expand. 
.PP
.BR "func (*Regexp) Split(" "s" " string, " "n" " int) []string"
.PP
Split slices s into substrings separated by the expression and returns a slice of the substrings between those expression matches. 
.PP
The slice returned by this method consists of all the substrings of s not contained in the slice returned by FindAllString. 
When called on an expression that contains no metacharacters, it is equivalent to strings.SplitN. 
.PP
Example: s := regexp.MustCompile("a*").Split("abaabaccadaaae", 5) // s: ["", "b", "b", "c", "cadaaae"] 
.PP
The count determines the number of substrings to return: n > 0: at most n substrings; the last substring will be the unsplit remainder. 
n == 0: the result is nil (zero substrings) n < 0: all substrings 
.PP
.BR "func (*Regexp) String() string"
.PP
String returns the source text used to compile the regular expression. 
.PP
.BR "func (*Regexp) SubexpNames() []string"
.PP
SubexpNames returns the names of the parenthesized subexpressions in this Regexp. 
The name for the first sub\-expression is names[1], so that if m is a match slice, the name for m[i] is SubexpNames()[i]. 
Since the Regexp as a whole cannot be named, names[0] is always the empty string. 
The slice should not be modified. 
.SS "onePassInst"
.B type onePassInst struct {
.RS
.B Next []uint32
.RE
.B }
.PP
A onePassInst is a single instruction in a one\-pass regular expression program. 
It is the same as syntax.Inst except for the new \(fmNext' field. 
.SS "onePassProg"
.B type onePassProg struct {
.RS
.B Inst []onePassInst
.sp 0
.B Start int
.sp 0
.B NumCap int
.RE
.B }
.PP
A onePassProg is a compiled one\-pass regular expression program. 
It is the same as syntax.Prog except for the use of onePassInst. 
.PP
.B var 
.B 
.sp 0
.SS "runeSlice"
.B type runeSlice []rune
.PP
runeSlice exists to permit sorting the case\-folded rune sets. 
.PP
.BR "func (runeSlice) Len() int"
.PP
.BR "func (runeSlice) Less(" "i" ", " "j" " int) bool"
.PP
.BR "func (runeSlice) Sort()"
.PP
Sort is a convenience method. 
.PP
.BR "func (runeSlice) Swap(" "i" ", " "j" " int)"
