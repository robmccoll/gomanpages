.\"    Automatically generated by mango(1)
.TH "plan9obj" 3 "2014-11-26" "version 2014-11-26" "Go Packages"
.SH "NAME"
plan9obj \- Package plan9obj implements access to Plan 9 a.out object files.
.SH "SYNOPSIS"
.B import \*(lqplan9obj\(rq
.sp
.B Constants
.sp 0
.RB "type " File
.sp 0
.RS
.RB "func " NewFile
.sp 0
.RB "func " Open
.sp 0
.RB "func (*File) " Close
.sp 0
.RB "func (*File) " Section
.sp 0
.RB "func (*File) " Symbols
.sp 0
.RE
.RB "type " FileHeader
.sp 0
.RB "type " Section
.sp 0
.RS
.RB "func (*Section) " Data
.sp 0
.RB "func (*Section) " Open
.sp 0
.RE
.RB "type " SectionHeader
.sp 0
.RB "type " Sym
.sp 0
.RB "type " formatError
.sp 0
.RS
.RB "func (*formatError) " Error
.sp 0
.RE
.RB "type " prog
.sp 0
.SH "CONSTANTS"
.PP
.B const (
.RS
.B Magic64 
.sp 0
.B Magic386 
.sp 0
.B MagicAMD64 
.sp 0
.B MagicARM 
.sp 0
.RE
.B )
.SH "TYPES"
.SS "File"
.B type File struct {
.RS
.B FileHeader
.sp 0
.B Sections []*Section
.sp 0
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
A File represents an open Plan 9 a.out file. 
.PP
.BR "func NewFile(" "r" " io.ReaderAt) (*File, error)"
.PP
NewFile creates a new File for accessing a Plan 9 binary in an underlying reader. 
The Plan 9 binary is expected to start at position 0 in the ReaderAt. 
.PP
.BR "func Open(" "name" " string) (*File, error)"
.PP
Open opens the named file using os.Open and prepares it for use as a Plan 9 a.out binary. 
.PP
.BR "func (*File) Close() error"
.PP
Close closes the File. 
If the File was created using NewFile directly instead of Open, Close has no effect. 
.PP
.BR "func (*File) Section(" "name" " string) *Section"
.PP
Section returns a section with the given name, or nil if no such section exists. 
.PP
.BR "func (*File) Symbols() ([]Sym, error)"
.PP
Symbols returns the symbol table for f. 
.SS "FileHeader"
.B type FileHeader struct {
.RS
.B Magic uint32
.sp 0
.B Bss uint32
.sp 0
.B Entry uint64
.sp 0
.B PtrSize int
.RE
.B }
.PP
A FileHeader represents a Plan 9 a.out file header. 
.SS "Section"
.B type Section struct {
.RS
.B SectionHeader
.sp 0
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
A Section represents a single section in a Plan 9 a.out file. 
.PP
.BR "func (*Section) Data() ([]byte, error)"
.PP
Data reads and returns the contents of the Plan 9 a.out section. 
.PP
.BR "func (*Section) Open() io.ReadSeeker"
.PP
Open returns a new ReadSeeker reading the Plan 9 a.out section. 
.SS "SectionHeader"
.B type SectionHeader struct {
.RS
.B Name string
.sp 0
.B Size uint32
.sp 0
.B Offset uint32
.RE
.B }
.PP
A SectionHeader represents a single Plan 9 a.out section header. 
This structure doesn't exist on\-disk, but eases navigation through the object file. 
.SS "Sym"
.B type Sym struct {
.RS
.B Value uint64
.sp 0
.B Type rune
.sp 0
.B Name string
.RE
.B }
.PP
A Symbol represents an entry in a Plan 9 a.out symbol table section. 
.SS "formatError"
.B type formatError struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
formatError is returned by some operations if the data does not have the correct format for an object file. 
.PP
.BR "func (*formatError) Error() string"
.SS "prog"
.B type prog struct {
.RS
.B Magic uint32
.sp 0
.B Text uint32
.sp 0
.B Data uint32
.sp 0
.B Bss uint32
.sp 0
.B Syms uint32
.sp 0
.B Entry uint32
.sp 0
.B Spsz uint32
.sp 0
.B Pcsz uint32
.RE
.B }
.PP
Plan 9 Program header. 
