.\"    Automatically generated by mango(1)
.TH "ioutil" 3 "2014-11-26" "version 2014-11-26" "Go Packages"
.SH "NAME"
ioutil \- Package ioutil implements some I/O utility functions.
.SH "SYNOPSIS"
.B import \*(lqioutil\(rq
.sp
.B Variables
.sp 0
.RB "func " NopCloser
.sp 0
.RB "func " ReadAll
.sp 0
.RB "func " ReadDir
.sp 0
.RB "func " ReadFile
.sp 0
.RB "func " TempDir
.sp 0
.RB "func " TempFile
.sp 0
.RB "func " WriteFile
.sp 0
.RB "type " byName
.sp 0
.RS
.RB "func (byName) " Len
.sp 0
.RB "func (byName) " Less
.sp 0
.RB "func (byName) " Swap
.sp 0
.RE
.RB "type " devNull
.sp 0
.RS
.RB "func (devNull) " ReadFrom
.sp 0
.RB "func (devNull) " Write
.sp 0
.RB "func (devNull) " WriteString
.sp 0
.RE
.RB "type " nopCloser
.sp 0
.RS
.RB "func (nopCloser) " Close
.sp 0
.RE
.SH "VARIABLES"
Discard is an io.Writer on which all Write calls succeed without doing anything. 
.PP
.B var 
.B Discard 
.sp 0
.SH "FUNCTIONS"
.PP
.BR "func NopCloser(" "r" " io.Reader) io.ReadCloser"
.PP
NopCloser returns a ReadCloser with a no\-op Close method wrapping the provided Reader r. 
.PP
.BR "func ReadAll(" "r" " io.Reader) ([]byte, error)"
.PP
ReadAll reads from r until an error or EOF and returns the data it read. 
A successful call returns err == nil, not err == EOF. 
Because ReadAll is defined to read from src until EOF, it does not treat an EOF from Read as an error to be reported. 
.PP
.BR "func ReadDir(" "dirname" " string) ([]os.FileInfo, error)"
.PP
ReadDir reads the directory named by dirname and returns a list of sorted directory entries. 
.PP
.BR "func ReadFile(" "filename" " string) ([]byte, error)"
.PP
ReadFile reads the file named by filename and returns the contents. 
A successful call returns err == nil, not err == EOF. 
Because ReadFile reads the whole file, it does not treat an EOF from Read as an error to be reported. 
.PP
.BR "func TempDir(" "dir" ", " "prefix" " string) (" "name" " string, " "err" " error)"
.PP
TempDir creates a new temporary directory in the directory dir with a name beginning with prefix and returns the path of the new directory. 
If dir is the empty string, TempDir uses the default directory for temporary files (see os.TempDir). 
Multiple programs calling TempDir simultaneously will not choose the same directory. 
It is the caller's responsibility to remove the directory when no longer needed. 
.PP
.BR "func TempFile(" "dir" ", " "prefix" " string) (" "f" " *os.File, " "err" " error)"
.PP
TempFile creates a new temporary file in the directory dir with a name beginning with prefix, opens the file for reading and writing, and returns the resulting *os.File. 
If dir is the empty string, TempFile uses the default directory for temporary files (see os.TempDir). 
Multiple programs calling TempFile simultaneously will not choose the same file. 
The caller can use f.Name() to find the pathname of the file. 
It is the caller's responsibility to remove the file when no longer needed. 
.PP
.BR "func WriteFile(" "filename" " string, " "data" " []byte, " "perm" " os.FileMode) error"
.PP
WriteFile writes data to a file named by filename. 
If the file does not exist, WriteFile creates it with permissions perm; otherwise WriteFile truncates it before writing. 
.SH "TYPES"
.SS "byName"
.B type byName []os.FileInfo
.PP
byName implements sort.Interface. 
.PP
.BR "func (byName) Len() int"
.PP
.BR "func (byName) Less(" "i" ", " "j" " int) bool"
.PP
.BR "func (byName) Swap(" "i" ", " "j" " int)"
.SS "devNull"
.B type devNull int
.PP
.PP
.BR "func (devNull) ReadFrom(" "r" " io.Reader) (" "n" " int64, " "err" " error)"
.PP
.BR "func (devNull) Write(" "p" " []byte) (int, error)"
.PP
.BR "func (devNull) WriteString(" "s" " string) (int, error)"
.SS "nopCloser"
.B type nopCloser struct {
.RS
.RE
.B }
.PP
.PP
.BR "func (nopCloser) Close() error"
