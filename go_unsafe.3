.\"    Automatically generated by mango(1)
.TH "unsafe" 3 "2014-11-26" "version 2014-11-26" "Go Packages"
.SH "NAME"
unsafe \- Package unsafe contains operations that step around the type safety of Go programs.
.SH "SYNOPSIS"
.B import \*(lqunsafe\(rq
.sp
.RB "func " Alignof
.sp 0
.RB "func " Offsetof
.sp 0
.RB "func " Sizeof
.sp 0
.RB "type " ArbitraryType
.sp 0
.RB "type " Pointer
.sp 0
.SH "FUNCTIONS"
.PP
.BR "func Alignof(" "v" " ArbitraryType) uintptr"
.PP
Alignof returns the alignment of the value v. 
It is the maximum value m such that the address of a variable with the type of v will always be zero mod m. 
If v is of the form structValue.field, it returns the alignment of field f within struct object obj. 
.PP
.BR "func Offsetof(" "v" " ArbitraryType) uintptr"
.PP
Offsetof returns the offset within the struct of the field represented by v, which must be of the form structValue.field. 
In other words, it returns the number of bytes between the start of the struct and the start of the field. 
.PP
.BR "func Sizeof(" "v" " ArbitraryType) uintptr"
.PP
Sizeof returns the size in bytes occupied by the value v. 
The size is that of the "top level" of the value only. 
For instance, if v is a slice, it returns the size of the slice descriptor, not the size of the memory referenced by the slice. 
.SH "TYPES"
.SS "ArbitraryType"
.B type ArbitraryType int
.PP
ArbitraryType is here for the purposes of documentation only and is not actually part of the unsafe package. 
It represents the type of an arbitrary Go expression. 
.SS "Pointer"
.B type Pointer *ArbitraryType
.PP
Pointer represents a pointer to an arbitrary type. 
There are four special operations available for type Pointer that are not available for other types. 
.PP
.RS
1) A pointer value of any type can be converted to a Pointer.
.sp 0
2) A Pointer can be converted to a pointer value of any type.
.sp 0
3) A uintptr can be converted to a Pointer.
.sp 0
4) A Pointer can be converted to a uintptr.
.RE
.PP
Pointer therefore allows a program to defeat the type system and read and write arbitrary memory. 
It should be used with extreme care. 
