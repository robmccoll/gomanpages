.\"    Automatically generated by mango(1)
.TH "bytes" 3 "2014-11-26" "version 2014-11-26" "Go Packages"
.SH "NAME"
bytes \- Package bytes implements functions for the manipulation of byte slices.
.SH "SYNOPSIS"
.B import \*(lqbytes\(rq
.sp
.B Constants
.sp 0
.B Variables
.sp 0
.RB "func " Compare
.sp 0
.RB "func " Contains
.sp 0
.RB "func " Count
.sp 0
.RB "func " Equal
.sp 0
.RB "func " EqualFold
.sp 0
.RB "func " Fields
.sp 0
.RB "func " FieldsFunc
.sp 0
.RB "func " HasPrefix
.sp 0
.RB "func " HasSuffix
.sp 0
.RB "func " Index
.sp 0
.RB "func " IndexAny
.sp 0
.RB "func " IndexByte
.sp 0
.RB "func " IndexFunc
.sp 0
.RB "func " IndexRune
.sp 0
.RB "func " Join
.sp 0
.RB "func " LastIndex
.sp 0
.RB "func " LastIndexAny
.sp 0
.RB "func " LastIndexFunc
.sp 0
.RB "func " Map
.sp 0
.RB "func " Repeat
.sp 0
.RB "func " Replace
.sp 0
.RB "func " Runes
.sp 0
.RB "func " Split
.sp 0
.RB "func " SplitAfter
.sp 0
.RB "func " SplitAfterN
.sp 0
.RB "func " SplitN
.sp 0
.RB "func " Title
.sp 0
.RB "func " ToLower
.sp 0
.RB "func " ToLowerSpecial
.sp 0
.RB "func " ToTitle
.sp 0
.RB "func " ToTitleSpecial
.sp 0
.RB "func " ToUpper
.sp 0
.RB "func " ToUpperSpecial
.sp 0
.RB "func " Trim
.sp 0
.RB "func " TrimFunc
.sp 0
.RB "func " TrimLeft
.sp 0
.RB "func " TrimLeftFunc
.sp 0
.RB "func " TrimPrefix
.sp 0
.RB "func " TrimRight
.sp 0
.RB "func " TrimRightFunc
.sp 0
.RB "func " TrimSpace
.sp 0
.RB "func " TrimSuffix
.sp 0
.RB "type " Buffer
.sp 0
.RS
.RB "func " NewBuffer
.sp 0
.RB "func " NewBufferString
.sp 0
.RB "func (*Buffer) " Bytes
.sp 0
.RB "func (*Buffer) " Grow
.sp 0
.RB "func (*Buffer) " Len
.sp 0
.RB "func (*Buffer) " Next
.sp 0
.RB "func (*Buffer) " Read
.sp 0
.RB "func (*Buffer) " ReadByte
.sp 0
.RB "func (*Buffer) " ReadBytes
.sp 0
.RB "func (*Buffer) " ReadFrom
.sp 0
.RB "func (*Buffer) " ReadRune
.sp 0
.RB "func (*Buffer) " ReadString
.sp 0
.RB "func (*Buffer) " Reset
.sp 0
.RB "func (*Buffer) " String
.sp 0
.RB "func (*Buffer) " Truncate
.sp 0
.RB "func (*Buffer) " UnreadByte
.sp 0
.RB "func (*Buffer) " UnreadRune
.sp 0
.RB "func (*Buffer) " Write
.sp 0
.RB "func (*Buffer) " WriteByte
.sp 0
.RB "func (*Buffer) " WriteRune
.sp 0
.RB "func (*Buffer) " WriteString
.sp 0
.RB "func (*Buffer) " WriteTo
.sp 0
.RE
.RB "type " Reader
.sp 0
.RS
.RB "func " NewReader
.sp 0
.RB "func (*Reader) " Len
.sp 0
.RB "func (*Reader) " Read
.sp 0
.RB "func (*Reader) " ReadAt
.sp 0
.RB "func (*Reader) " ReadByte
.sp 0
.RB "func (*Reader) " ReadRune
.sp 0
.RB "func (*Reader) " Seek
.sp 0
.RB "func (*Reader) " UnreadByte
.sp 0
.RB "func (*Reader) " UnreadRune
.sp 0
.RB "func (*Reader) " WriteTo
.sp 0
.RE
.SH "DESCRIPTION"
Package bytes implements functions for the manipulation of byte slices. 
It is analogous to the facilities of the strings package. 
.SH "CONSTANTS"
MinRead is the minimum slice size passed to a Read call by Buffer.ReadFrom. 
As long as the Buffer has at least MinRead bytes beyond what is required to hold the contents of r, ReadFrom will not grow the underlying buffer. 
.PP
.B const 
.B MinRead 
.sp 0
.SH "VARIABLES"
ErrTooLarge is passed to panic if memory cannot be allocated to store data in a buffer. 
.PP
.B var 
.B ErrTooLarge 
.sp 0
.SH "FUNCTIONS"
.PP
.BR "func Compare(" "a" ", " "b" " []byte) int"
.PP
Compare returns an integer comparing two byte slices lexicographically. 
The result will be 0 if a==b, 
.B \-1
if a < b, and +1 if a > b. 
A nil argument is equivalent to an empty slice. 
.PP
.BR "func Contains(" "b" ", " "subslice" " []byte) bool"
.PP
Contains reports whether subslice is within b. 
.PP
.BR "func Count(" "s" ", " "sep" " []byte) int"
.PP
Count counts the number of non\-overlapping instances of sep in s. 
.PP
.BR "func Equal(" "a" ", " "b" " []byte) bool"
.PP
Equal returns a boolean reporting whether a and b are the same length and contain the same bytes. 
A nil argument is equivalent to an empty slice. 
.PP
.BR "func EqualFold(" "s" ", " "t" " []byte) bool"
.PP
EqualFold reports whether s and t, interpreted as UTF\-8 strings, are equal under Unicode case\-folding. 
.PP
.BR "func Fields(" "s" " []byte) [][]byte"
.PP
Fields splits the slice s around each instance of one or more consecutive white space characters, returning a slice of subslices of s or an empty list if s contains only white space. 
.PP
.BR "func FieldsFunc(" "s" " []byte, " "f" " func(rune) bool) [][]byte"
.PP
FieldsFunc interprets s as a sequence of UTF\-8\-encoded Unicode code points. 
It splits the slice s at each run of code points c satisfying f(c) and returns a slice of subslices of s. 
If all code points in s satisfy f(c), or 
.BR len (s)
== 0, an empty slice is returned. 
.PP
.BR "func HasPrefix(" "s" ", " "prefix" " []byte) bool"
.PP
HasPrefix tests whether the byte slice s begins with prefix. 
.PP
.BR "func HasSuffix(" "s" ", " "suffix" " []byte) bool"
.PP
HasSuffix tests whether the byte slice s ends with suffix. 
.PP
.BR "func Index(" "s" ", " "sep" " []byte) int"
.PP
Index returns the index of the first instance of sep in s, or 
.B \-1
if sep is not present in s. 
.PP
.BR "func IndexAny(" "s" " []byte, " "chars" " string) int"
.PP
IndexAny interprets s as a sequence of UTF\-8\-encoded Unicode code points. 
It returns the byte index of the first occurrence in s of any of the Unicode code points in chars. 
It returns 
.B \-1
if chars is empty or if there is no code point in common. 
.PP
.BR "func IndexByte(" "s" " []byte, " "c" " byte) int"
.PP
IndexByte returns the index of the first instance of c in s, or 
.B \-1
if c is not present in s. 
.PP
.BR "func IndexFunc(" "s" " []byte, " "f" " func(r rune) bool) int"
.PP
IndexFunc interprets s as a sequence of UTF\-8\-encoded Unicode code points. 
It returns the byte index in s of the first Unicode code point satisfying f(c), or 
.B \-1
if none do. 
.PP
.BR "func IndexRune(" "s" " []byte, " "r" " rune) int"
.PP
IndexRune interprets s as a sequence of UTF\-8\-encoded Unicode code points. 
It returns the byte index of the first occurrence in s of the given rune. 
It returns 
.B \-1
if rune is not present in s. 
.PP
.BR "func Join(" "s" " [][]byte, " "sep" " []byte) []byte"
.PP
Join concatenates the elements of s to create a new byte slice. 
The separator sep is placed between elements in the resulting slice. 
.PP
.BR "func LastIndex(" "s" ", " "sep" " []byte) int"
.PP
LastIndex returns the index of the last instance of sep in s, or 
.B \-1
if sep is not present in s. 
.PP
.BR "func LastIndexAny(" "s" " []byte, " "chars" " string) int"
.PP
LastIndexAny interprets s as a sequence of UTF\-8\-encoded Unicode code points. 
It returns the byte index of the last occurrence in s of any of the Unicode code points in chars. 
It returns 
.B \-1
if chars is empty or if there is no code point in common. 
.PP
.BR "func LastIndexFunc(" "s" " []byte, " "f" " func(r rune) bool) int"
.PP
LastIndexFunc interprets s as a sequence of UTF\-8\-encoded Unicode code points. 
It returns the byte index in s of the last Unicode code point satisfying f(c), or 
.B \-1
if none do. 
.PP
.BR "func Map(" "mapping" " func(r rune) rune, " "s" " []byte) []byte"
.PP
Map returns a copy of the byte slice s with all its characters modified according to the mapping function. 
If mapping returns a negative value, the character is dropped from the string with no replacement. 
The characters in s and the output are interpreted as UTF\-8\-encoded Unicode code points. 
.PP
.BR "func Repeat(" "b" " []byte, " "count" " int) []byte"
.PP
Repeat returns a new byte slice consisting of count copies of b. 
.PP
.BR "func Replace(" "s" ", " "old" ", " "new" " []byte, " "n" " int) []byte"
.PP
Replace returns a copy of the slice s with the first n non\-overlapping instances of old replaced by new. 
If n < 0, there is no limit on the number of replacements. 
.PP
.BR "func Runes(" "s" " []byte) []rune"
.PP
Runes returns a slice of runes (Unicode code points) equivalent to s. 
.PP
.BR "func Split(" "s" ", " "sep" " []byte) [][]byte"
.PP
Split slices s into all subslices separated by sep and returns a slice of the subslices between those separators. 
If sep is empty, Split splits after each UTF\-8 sequence. 
It is equivalent to SplitN with a count of 
.B \-1.
.PP
.BR "func SplitAfter(" "s" ", " "sep" " []byte) [][]byte"
.PP
SplitAfter slices s into all subslices after each instance of sep and returns a slice of those subslices. 
If sep is empty, SplitAfter splits after each UTF\-8 sequence. 
It is equivalent to SplitAfterN with a count of 
.B \-1.
.PP
.BR "func SplitAfterN(" "s" ", " "sep" " []byte, " "n" " int) [][]byte"
.PP
SplitAfterN slices s into subslices after each instance of sep and returns a slice of those subslices. 
If sep is empty, SplitAfterN splits after each UTF\-8 sequence. 
The count determines the number of subslices to return: n > 0: at most n subslices; the last subslice will be the unsplit remainder. 
n == 0: the result is nil (zero subslices) n < 0: all subslices 
.PP
.BR "func SplitN(" "s" ", " "sep" " []byte, " "n" " int) [][]byte"
.PP
SplitN slices s into subslices separated by sep and returns a slice of the subslices between those separators. 
If sep is empty, SplitN splits after each UTF\-8 sequence. 
The count determines the number of subslices to return: n > 0: at most n subslices; the last subslice will be the unsplit remainder. 
n == 0: the result is nil (zero subslices) n < 0: all subslices 
.PP
.BR "func Title(" "s" " []byte) []byte"
.PP
Title returns a copy of s with all Unicode letters that begin words mapped to their title case. 
.PP
BUG: The rule Title uses for word boundaries does not handle Unicode punctuation properly. 
.PP
.BR "func ToLower(" "s" " []byte) []byte"
.PP
ToLower returns a copy of the byte slice s with all Unicode letters mapped to their lower case. 
.PP
.BR "func ToLowerSpecial(" "_case" " unicode.SpecialCase, " "s" " []byte) []byte"
.PP
ToLowerSpecial returns a copy of the byte slice s with all Unicode letters mapped to their lower case, giving priority to the special casing rules. 
.PP
.BR "func ToTitle(" "s" " []byte) []byte"
.PP
ToTitle returns a copy of the byte slice s with all Unicode letters mapped to their title case. 
.PP
.BR "func ToTitleSpecial(" "_case" " unicode.SpecialCase, " "s" " []byte) []byte"
.PP
ToTitleSpecial returns a copy of the byte slice s with all Unicode letters mapped to their title case, giving priority to the special casing rules. 
.PP
.BR "func ToUpper(" "s" " []byte) []byte"
.PP
ToUpper returns a copy of the byte slice s with all Unicode letters mapped to their upper case. 
.PP
.BR "func ToUpperSpecial(" "_case" " unicode.SpecialCase, " "s" " []byte) []byte"
.PP
ToUpperSpecial returns a copy of the byte slice s with all Unicode letters mapped to their upper case, giving priority to the special casing rules. 
.PP
.BR "func Trim(" "s" " []byte, " "cutset" " string) []byte"
.PP
Trim returns a subslice of s by slicing off all leading and trailing UTF\-8\-encoded Unicode code points contained in cutset. 
.PP
.BR "func TrimFunc(" "s" " []byte, " "f" " func(r rune) bool) []byte"
.PP
TrimFunc returns a subslice of s by slicing off all leading and trailing UTF\-8\-encoded Unicode code points c that satisfy f(c). 
.PP
.BR "func TrimLeft(" "s" " []byte, " "cutset" " string) []byte"
.PP
TrimLeft returns a subslice of s by slicing off all leading UTF\-8\-encoded Unicode code points contained in cutset. 
.PP
.BR "func TrimLeftFunc(" "s" " []byte, " "f" " func(r rune) bool) []byte"
.PP
TrimLeftFunc returns a subslice of s by slicing off all leading UTF\-8\-encoded Unicode code points c that satisfy f(c). 
.PP
.BR "func TrimPrefix(" "s" ", " "prefix" " []byte) []byte"
.PP
TrimPrefix returns s without the provided leading prefix string. 
If s doesn't start with prefix, s is returned unchanged. 
.PP
.BR "func TrimRight(" "s" " []byte, " "cutset" " string) []byte"
.PP
TrimRight returns a subslice of s by slicing off all trailing UTF\-8\-encoded Unicode code points that are contained in cutset. 
.PP
.BR "func TrimRightFunc(" "s" " []byte, " "f" " func(r rune) bool) []byte"
.PP
TrimRightFunc returns a subslice of s by slicing off all trailing UTF\-8 encoded Unicode code points c that satisfy f(c). 
.PP
.BR "func TrimSpace(" "s" " []byte) []byte"
.PP
TrimSpace returns a subslice of s by slicing off all leading and trailing white space, as defined by Unicode. 
.PP
.BR "func TrimSuffix(" "s" ", " "suffix" " []byte) []byte"
.PP
TrimSuffix returns s without the provided trailing suffix string. 
If s doesn't end with suffix, s is returned unchanged. 
.SH "TYPES"
.SS "Buffer"
.B type Buffer struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
A Buffer is a variable\-sized buffer of bytes with Read and Write methods. 
The zero value for Buffer is an empty buffer ready to use. 
.PP
.BR "func NewBuffer(" "buf" " []byte) *Buffer"
.PP
NewBuffer creates and initializes a new Buffer using buf as its initial contents. 
It is intended to prepare a Buffer to read existing data. 
It can also be used to size the internal buffer for writing. 
To do that, buf should have the desired capacity but a length of zero. 
.PP
In most cases, new(Buffer) (or just declaring a Buffer variable) is sufficient to initialize a Buffer. 
.PP
.BR "func NewBufferString(" "s" " string) *Buffer"
.PP
NewBufferString creates and initializes a new Buffer using string s as its initial contents. 
It is intended to prepare a buffer to read an existing string. 
.PP
In most cases, new(Buffer) (or just declaring a Buffer variable) is sufficient to initialize a Buffer. 
.PP
.BR "func (*Buffer) Bytes() []byte"
.PP
Bytes returns a slice of the contents of the unread portion of the buffer; 
.BR len (b.Bytes())
== b.Len(). 
If the caller changes the contents of the returned slice, the contents of the buffer will change provided there are no intervening method calls on the Buffer. 
.PP
.BR "func (*Buffer) Grow(" "n" " int)"
.PP
Grow grows the buffer's capacity, if necessary, to guarantee space for another n bytes. 
After Grow(n), at least n bytes can be written to the buffer without another allocation. 
If n is negative, Grow will panic. 
If the buffer can't grow it will panic with ErrTooLarge. 
.PP
.BR "func (*Buffer) Len() int"
.PP
Len returns the number of bytes of the unread portion of the buffer; b.Len() == len(b.Bytes()). 
.PP
.BR "func (*Buffer) Next(" "n" " int) []byte"
.PP
Next returns a slice containing the next n bytes from the buffer, advancing the buffer as if the bytes had been returned by Read. 
If there are fewer than n bytes in the buffer, Next returns the entire buffer. 
The slice is only valid until the next call to a read or write method. 
.PP
.BR "func (*Buffer) Read(" "p" " []byte) (" "n" " int, " "err" " error)"
.PP
Read reads the next 
.BR len (p)
bytes from the buffer or until the buffer is drained. 
The return value n is the number of bytes read. 
If the buffer has no data to return, err is io.EOF (unless 
.BR len (p)
is zero); otherwise it is nil. 
.PP
.BR "func (*Buffer) ReadByte() (" "c" " byte, " "err" " error)"
.PP
ReadByte reads and returns the next byte from the buffer. 
If no byte is available, it returns error io.EOF. 
.PP
.BR "func (*Buffer) ReadBytes(" "delim" " byte) (" "line" " []byte, " "err" " error)"
.PP
ReadBytes reads until the first occurrence of delim in the input, returning a slice containing the data up to and including the delimiter. 
If ReadBytes encounters an error before finding a delimiter, it returns the data read before the error and the error itself (often io.EOF). 
ReadBytes returns err != nil if and only if the returned data does not end in delim. 
.PP
.BR "func (*Buffer) ReadFrom(" "r" " io.Reader) (" "n" " int64, " "err" " error)"
.PP
ReadFrom reads data from r until EOF and appends it to the buffer, growing the buffer as needed. 
The return value n is the number of bytes read. 
Any error except io.EOF encountered during the read is also returned. 
If the buffer becomes too large, ReadFrom will panic with ErrTooLarge. 
.PP
.BR "func (*Buffer) ReadRune() (" "r" " rune, " "size" " int, " "err" " error)"
.PP
ReadRune reads and returns the next UTF\-8\-encoded Unicode code point from the buffer. 
If no bytes are available, the error returned is io.EOF. 
If the bytes are an erroneous UTF\-8 encoding, it consumes one byte and returns U+FFFD, 1. 
.PP
.BR "func (*Buffer) ReadString(" "delim" " byte) (" "line" " string, " "err" " error)"
.PP
ReadString reads until the first occurrence of delim in the input, returning a string containing the data up to and including the delimiter. 
If ReadString encounters an error before finding a delimiter, it returns the data read before the error and the error itself (often io.EOF). 
ReadString returns err != nil if and only if the returned data does not end in delim. 
.PP
.BR "func (*Buffer) Reset()"
.PP
Reset resets the buffer so it has no content. 
b.Reset() is the same as b.Truncate(0). 
.PP
.BR "func (*Buffer) String() string"
.PP
String returns the contents of the unread portion of the buffer as a string. 
If the Buffer is a nil pointer, it returns "<nil>". 
.PP
.BR "func (*Buffer) Truncate(" "n" " int)"
.PP
Truncate discards all but the first n unread bytes from the buffer. 
It panics if n is negative or greater than the length of the buffer. 
.PP
.BR "func (*Buffer) UnreadByte() error"
.PP
UnreadByte unreads the last byte returned by the most recent read operation. 
If write has happened since the last read, UnreadByte returns an error. 
.PP
.BR "func (*Buffer) UnreadRune() error"
.PP
UnreadRune unreads the last rune returned by ReadRune. 
If the most recent read or write operation on the buffer was not a ReadRune, UnreadRune returns an error. 
(In this regard it is stricter than UnreadByte, which will unread the last byte from any read operation.) 
.PP
.BR "func (*Buffer) Write(" "p" " []byte) (" "n" " int, " "err" " error)"
.PP
Write appends the contents of p to the buffer, growing the buffer as needed. 
The return value n is the length of p; err is always nil. 
If the buffer becomes too large, Write will panic with ErrTooLarge. 
.PP
.BR "func (*Buffer) WriteByte(" "c" " byte) error"
.PP
WriteByte appends the byte c to the buffer, growing the buffer as needed. 
The returned error is always nil, but is included to match bufio.Writer's WriteByte. 
If the buffer becomes too large, WriteByte will panic with ErrTooLarge. 
.PP
.BR "func (*Buffer) WriteRune(" "r" " rune) (" "n" " int, " "err" " error)"
.PP
WriteRune appends the UTF\-8 encoding of Unicode code point r to the buffer, returning its length and an error, which is always nil but is included to match bufio.Writer's WriteRune. 
The buffer is grown as needed; if it becomes too large, WriteRune will panic with ErrTooLarge. 
.PP
.BR "func (*Buffer) WriteString(" "s" " string) (" "n" " int, " "err" " error)"
.PP
WriteString appends the contents of s to the buffer, growing the buffer as needed. 
The return value n is the length of s; err is always nil. 
If the buffer becomes too large, WriteString will panic with ErrTooLarge. 
.PP
.BR "func (*Buffer) WriteTo(" "w" " io.Writer) (" "n" " int64, " "err" " error)"
.PP
WriteTo writes data to w until the buffer is drained or an error occurs. 
The return value n is the number of bytes written; it always fits into an int, but it is int64 to match the io.WriterTo interface. 
Any error encountered during the write is also returned. 
.SS "Reader"
.B type Reader struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
A Reader implements the io.Reader, io.ReaderAt, io.WriterTo, io.Seeker, io.ByteScanner, and io.RuneScanner interfaces by reading from a byte slice. 
Unlike a Buffer, a Reader is read\-only and supports seeking. 
.PP
.BR "func NewReader(" "b" " []byte) *Reader"
.PP
NewReader returns a new Reader reading from b. 
.PP
.BR "func (*Reader) Len() int"
.PP
Len returns the number of bytes of the unread portion of the slice. 
.PP
.BR "func (*Reader) Read(" "b" " []byte) (" "n" " int, " "err" " error)"
.PP
.BR "func (*Reader) ReadAt(" "b" " []byte, " "off" " int64) (" "n" " int, " "err" " error)"
.PP
.BR "func (*Reader) ReadByte() (" "b" " byte, " "err" " error)"
.PP
.BR "func (*Reader) ReadRune() (" "ch" " rune, " "size" " int, " "err" " error)"
.PP
.BR "func (*Reader) Seek(" "offset" " int64, " "whence" " int) (int64, error)"
.PP
Seek implements the io.Seeker interface. 
.PP
.BR "func (*Reader) UnreadByte() error"
.PP
.BR "func (*Reader) UnreadRune() error"
.PP
.BR "func (*Reader) WriteTo(" "w" " io.Writer) (" "n" " int64, " "err" " error)"
.PP
WriteTo implements the io.WriterTo interface. 
.SH "SEE ALSO"
.BR len (p)
