.\"    Automatically generated by mango(1)
.TH "png" 3 "2014-11-26" "version 2014-11-26" "Go Packages"
.SH "NAME"
png \- Package png implements a PNG image decoder and encoder.
.SH "SYNOPSIS"
.B import \*(lqpng\(rq
.sp
.RB "func " Decode
.sp 0
.RB "func " DecodeConfig
.sp 0
.RB "func " Encode
.sp 0
.RB "type " FormatError
.sp 0
.RS
.RB "func (FormatError) " Error
.sp 0
.RE
.RB "type " UnsupportedError
.sp 0
.RS
.RB "func (UnsupportedError) " Error
.sp 0
.RE
.RB "type " decoder
.sp 0
.RS
.RB "func (*decoder) " Read
.sp 0
.RE
.RB "type " encoder
.sp 0
.RS
.RB "func (*encoder) " Write
.sp 0
.RE
.RB "type " opaquer
.sp 0
.SH "DESCRIPTION"
The PNG specification is at http://www.w3.org/TR/PNG/. 
.SH "FUNCTIONS"
.PP
.BR "func Decode(" "r" " io.Reader) (image.Image, error)"
.PP
Decode reads a PNG image from r and returns it as an image.Image. 
The type of Image returned depends on the PNG contents. 
.PP
.BR "func DecodeConfig(" "r" " io.Reader) (image.Config, error)"
.PP
DecodeConfig returns the color model and dimensions of a PNG image without decoding the entire image. 
.PP
.BR "func Encode(" "w" " io.Writer, " "m" " image.Image) error"
.PP
Encode writes the Image m to w in PNG format. 
Any Image may be encoded, but images that are not image.NRGBA might be encoded lossily. 
.SH "TYPES"
.SS "FormatError"
.B type FormatError string
.PP
A FormatError reports that the input is not a valid PNG. 
.PP
.BR "func (FormatError) Error() string"
.SS "UnsupportedError"
.B type UnsupportedError string
.PP
An UnsupportedError reports that the input uses a valid but unimplemented PNG feature. 
.PP
.BR "func (UnsupportedError) Error() string"
.SS "decoder"
.B type decoder struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
.PP
.BR "func (*decoder) Read(" "p" " []byte) (int, error)"
.PP
Read presents one or more IDAT chunks as one continuous stream (minus the intermediate chunk headers and footers). 
If the PNG data looked like: \&... 
len0 IDAT xxx crc0 len1 IDAT yy crc1 len2 IEND crc2 then this reader presents xxxyy. 
For well\-formed PNG data, the decoder state immediately before the first Read call is that d.r is positioned between the first IDAT and xxx, and the decoder state immediately after the last Read call is that d.r is positioned between yy and crc1. 
.SS "encoder"
.B type encoder struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
.PP
.BR "func (*encoder) Write(" "b" " []byte) (int, error)"
.PP
An encoder is an io.Writer that satisfies writes by writing PNG IDAT chunks, including an 8\-byte header and 4\-byte CRC checksum per Write call. 
Such calls should be relatively infrequent, since writeIDATs uses a bufio.Writer. 
.PP
This method should only be called from writeIDATs (via writeImage). 
No other code should treat an encoder as an io.Writer. 
.SS "opaquer"
.B type opaquer interface {
.RS
.B Opaque() bool
.sp 0
.RE
.B }
