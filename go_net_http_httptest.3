.\"    Automatically generated by mango(1)
.TH "httptest" 3 "2014-11-26" "version 2014-11-26" "Go Packages"
.SH "NAME"
httptest \- Package httptest provides utilities for HTTP testing.
.SH "SYNOPSIS"
.B import \*(lqhttptest\(rq
.sp
.B Constants
.sp 0
.RB "type " ResponseRecorder
.sp 0
.RS
.RB "func " NewRecorder
.sp 0
.RB "func (*ResponseRecorder) " Flush
.sp 0
.RB "func (*ResponseRecorder) " Header
.sp 0
.RB "func (*ResponseRecorder) " Write
.sp 0
.RB "func (*ResponseRecorder) " WriteHeader
.sp 0
.RE
.RB "type " Server
.sp 0
.RS
.RB "func " NewServer
.sp 0
.RB "func " NewTLSServer
.sp 0
.RB "func " NewUnstartedServer
.sp 0
.RB "func (*Server) " Close
.sp 0
.RB "func (*Server) " CloseClientConnections
.sp 0
.RB "func (*Server) " Start
.sp 0
.RB "func (*Server) " StartTLS
.sp 0
.RE
.RB "type " historyListener
.sp 0
.RS
.RB "func (*historyListener) " Accept
.sp 0
.RE
.RB "type " waitGroupHandler
.sp 0
.RS
.RB "func (*waitGroupHandler) " ServeHTTP
.sp 0
.RE
.SH "CONSTANTS"
DefaultRemoteAddr is the default remote address to return in RemoteAddr if an explicit DefaultRemoteAddr isn't set on ResponseRecorder. 
.PP
.B const 
.B DefaultRemoteAddr 
.sp 0
.SH "TYPES"
.SS "ResponseRecorder"
.B type ResponseRecorder struct {
.RS
.B Code int
.sp 0
.B HeaderMap http.Header
.sp 0
.B Body *bytes.Buffer
.sp 0
.B Flushed bool
.sp 0
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
ResponseRecorder is an implementation of http.ResponseWriter that records its mutations for later inspection in tests. 
.PP
.BR "func NewRecorder() *ResponseRecorder"
.PP
NewRecorder returns an initialized ResponseRecorder. 
.PP
.BR "func (*ResponseRecorder) Flush()"
.PP
Flush sets rw.Flushed to true. 
.PP
.BR "func (*ResponseRecorder) Header() http.Header"
.PP
Header returns the response headers. 
.PP
.BR "func (*ResponseRecorder) Write(" "buf" " []byte) (int, error)"
.PP
Write always succeeds and writes to rw.Body, if not nil. 
.PP
.BR "func (*ResponseRecorder) WriteHeader(" "code" " int)"
.PP
WriteHeader sets rw.Code. 
.SS "Server"
.B type Server struct {
.RS
.B URL string
.sp 0
.B Listener net.Listener
.sp 0
.B TLS *tls.Config
.sp 0
.B Config *http.Server
.sp 0
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
A Server is an HTTP server listening on a system\-chosen port on the local loopback interface, for use in end\-to\-end HTTP tests. 
.PP
.BR "func NewServer(" "handler" " http.Handler) *Server"
.PP
NewServer starts and returns a new Server. 
The caller should call Close when finished, to shut it down. 
.PP
.BR "func NewTLSServer(" "handler" " http.Handler) *Server"
.PP
NewTLSServer starts and returns a new Server using TLS. 
The caller should call Close when finished, to shut it down. 
.PP
.BR "func NewUnstartedServer(" "handler" " http.Handler) *Server"
.PP
NewUnstartedServer returns a new Server but doesn't start it. 
.PP
After changing its configuration, the caller should call Start or StartTLS. 
.PP
The caller should call Close when finished, to shut it down. 
.PP
.BR "func (*Server) Close()"
.PP
Close shuts down the server and blocks until all outstanding requests on this server have completed. 
.PP
.BR "func (*Server) CloseClientConnections()"
.PP
CloseClientConnections closes any currently open HTTP connections to the test Server. 
.PP
.BR "func (*Server) Start()"
.PP
Start starts a server from NewUnstartedServer. 
.PP
.BR "func (*Server) StartTLS()"
.PP
StartTLS starts TLS on a server from NewUnstartedServer. 
.SS "historyListener"
.B type historyListener struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
historyListener keeps track of all connections that it's ever accepted. 
.PP
.BR "func (*historyListener) Accept() (" "c" " net.Conn, " "err" " error)"
.SS "waitGroupHandler"
.B type waitGroupHandler struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
waitGroupHandler wraps a handler, incrementing and decrementing a sync.WaitGroup on each request, to enable Server.Close to block until outstanding requests are finished. 
.PP
.BR "func (*waitGroupHandler) ServeHTTP(" "w" " http.ResponseWriter, " "r" " *http.Request)"
