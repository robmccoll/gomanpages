.\"    Automatically generated by mango(1)
.TH "cmplx" 3 "2014-11-26" "version 2014-11-26" "Go Packages"
.SH "NAME"
cmplx \- Package cmplx provides basic constants and mathematical functions for
complex numbers.
.SH "SYNOPSIS"
.B import \*(lqcmplx\(rq
.sp
.RB "func " Abs
.sp 0
.RB "func " Acos
.sp 0
.RB "func " Acosh
.sp 0
.RB "func " Asin
.sp 0
.RB "func " Asinh
.sp 0
.RB "func " Atan
.sp 0
.RB "func " Atanh
.sp 0
.RB "func " Conj
.sp 0
.RB "func " Cos
.sp 0
.RB "func " Cosh
.sp 0
.RB "func " Cot
.sp 0
.RB "func " Exp
.sp 0
.RB "func " Inf
.sp 0
.RB "func " IsInf
.sp 0
.RB "func " IsNaN
.sp 0
.RB "func " Log
.sp 0
.RB "func " Log10
.sp 0
.RB "func " NaN
.sp 0
.RB "func " Phase
.sp 0
.RB "func " Polar
.sp 0
.RB "func " Pow
.sp 0
.RB "func " Rect
.sp 0
.RB "func " Sin
.sp 0
.RB "func " Sinh
.sp 0
.RB "func " Sqrt
.sp 0
.RB "func " Tan
.sp 0
.RB "func " Tanh
.sp 0
.SH "FUNCTIONS"
.PP
.BR "func Abs(" "x" " complex128) float64"
.PP
Abs returns the absolute value (also called the modulus) of x. 
.PP
.BR "func Acos(" "x" " complex128) complex128"
.PP
Acos returns the inverse cosine of x. 
.PP
.BR "func Acosh(" "x" " complex128) complex128"
.PP
Acosh returns the inverse hyperbolic cosine of x. 
.PP
.BR "func Asin(" "x" " complex128) complex128"
.PP
Asin returns the inverse sine of x. 
.PP
.BR "func Asinh(" "x" " complex128) complex128"
.PP
Asinh returns the inverse hyperbolic sine of x. 
.PP
.BR "func Atan(" "x" " complex128) complex128"
.PP
Atan returns the inverse tangent of x. 
.PP
.BR "func Atanh(" "x" " complex128) complex128"
.PP
Atanh returns the inverse hyperbolic tangent of x. 
.PP
.BR "func Conj(" "x" " complex128) complex128"
.PP
Conj returns the complex conjugate of x. 
.PP
.BR "func Cos(" "x" " complex128) complex128"
.PP
Cos returns the cosine of x. 
.PP
.BR "func Cosh(" "x" " complex128) complex128"
.PP
Cosh returns the hyperbolic cosine of x. 
.PP
.BR "func Cot(" "x" " complex128) complex128"
.PP
Cot returns the cotangent of x. 
.PP
.BR "func Exp(" "x" " complex128) complex128"
.PP
Exp returns e**x, the base\-e exponential of x. 
.PP
.BR "func Inf() complex128"
.PP
Inf returns a complex infinity, complex(+Inf, +Inf). 
.PP
.BR "func IsInf(" "x" " complex128) bool"
.PP
IsInf returns true if either 
.BR real (x)
or 
.BR imag (x)
is an infinity. 
.PP
.BR "func IsNaN(" "x" " complex128) bool"
.PP
IsNaN returns true if either 
.BR real (x)
or 
.BR imag (x)
is NaN and neither is an infinity. 
.PP
.BR "func Log(" "x" " complex128) complex128"
.PP
Log returns the natural logarithm of x. 
.PP
.BR "func Log10(" "x" " complex128) complex128"
.PP
Log10 returns the decimal logarithm of x. 
.PP
.BR "func NaN() complex128"
.PP
NaN returns a complex ``not\-a\-number'' value. 
.PP
.BR "func Phase(" "x" " complex128) float64"
.PP
Phase returns the phase (also called the argument) of x. 
The returned value is in the range [\-Pi, Pi]. 
.PP
.BR "func Polar(" "x" " complex128) (" "r" ", " "θ" " float64)"
.PP
Polar returns the absolute value r and phase θ of x, such that x = r * e**θi. 
The phase is in the range [\-Pi, Pi]. 
.PP
.BR "func Pow(" "x" ", " "y" " complex128) complex128"
.PP
Pow returns x**y, the base\-x exponential of y. 
For generalized compatibility with math.Pow: 
.PP
.RS
Pow(0, ±0) returns 1+0i
.sp 0
Pow(0, c) for real(c)<0 returns Inf+0i if imag(c) is zero, otherwise Inf+Inf i.
.RE
.PP
.BR "func Rect(" "r" ", " "θ" " float64) complex128"
.PP
Rect returns the complex number x with polar coordinates r, θ 
.PP
.BR "func Sin(" "x" " complex128) complex128"
.PP
Sin returns the sine of x. 
.PP
.BR "func Sinh(" "x" " complex128) complex128"
.PP
Sinh returns the hyperbolic sine of x. 
.PP
.BR "func Sqrt(" "x" " complex128) complex128"
.PP
Sqrt returns the square root of x. 
The result r is chosen so that 
.BR real (r)
≥ 0 and 
.BR imag (r)
has the same sign as imag(x). 
.PP
.BR "func Tan(" "x" " complex128) complex128"
.PP
Tan returns the tangent of x. 
.PP
.BR "func Tanh(" "x" " complex128) complex128"
.PP
Tanh returns the hyperbolic tangent of x. 
.SH "SEE ALSO"
.BR imag (x),
.BR real (x)
