.\"    Automatically generated by mango(1)
.TH "crc64" 3 "2014-11-26" "version 2014-11-26" "Go Packages"
.SH "NAME"
crc64 \- Package crc64 implements the 64-bit cyclic redundancy check, or CRC-64,
checksum.
.SH "SYNOPSIS"
.B import \*(lqcrc64\(rq
.sp
.B Constants
.sp 0
.RB "func " Checksum
.sp 0
.RB "func " New
.sp 0
.RB "func " Update
.sp 0
.RB "type " Table
.sp 0
.RS
.RB "func " MakeTable
.sp 0
.RE
.RB "type " digest
.sp 0
.RS
.RB "func (*digest) " BlockSize
.sp 0
.RB "func (*digest) " Reset
.sp 0
.RB "func (*digest) " Size
.sp 0
.RB "func (*digest) " Sum
.sp 0
.RB "func (*digest) " Sum64
.sp 0
.RB "func (*digest) " Write
.sp 0
.RE
.SH "DESCRIPTION"
Package crc64 implements the 64\-bit cyclic redundancy check, or CRC\-64, checksum. 
See http://en.wikipedia.org/wiki/Cyclic_redundancy_check for information. 
.SH "CONSTANTS"
Predefined polynomials. 
.PP
.B const (
.RS
.B ISO 
.sp 0
.B ECMA 
.sp 0
.RE
.B )
.sp 0
The size of a CRC\-64 checksum in bytes. 
.PP
.B const 
.B Size 
.sp 0
.SH "FUNCTIONS"
.PP
.BR "func Checksum(" "data" " []byte, " "tab" " *Table) uint64"
.PP
Checksum returns the CRC\-64 checksum of data using the polynomial represented by the Table. 
.PP
.BR "func New(" "tab" " *Table) hash.Hash64"
.PP
New creates a new hash.Hash64 computing the CRC\-64 checksum using the polynomial represented by the Table. 
.PP
.BR "func Update(" "crc" " uint64, " "tab" " *Table, " "p" " []byte) uint64"
.PP
Update returns the result of adding the bytes in p to the crc. 
.SH "TYPES"
.SS "Table"
.B type Table []uint64
.PP
Table is a 256\-word table representing the polynomial for efficient processing. 
.PP
.BR "func MakeTable(" "poly" " uint64) *Table"
.PP
MakeTable returns the Table constructed from the specified polynomial. 
.SS "digest"
.B type digest struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
digest represents the partial evaluation of a checksum. 
.PP
.BR "func (*digest) BlockSize() int"
.PP
.BR "func (*digest) Reset()"
.PP
.BR "func (*digest) Size() int"
.PP
.BR "func (*digest) Sum(" "in" " []byte) []byte"
.PP
.BR "func (*digest) Sum64() uint64"
.PP
.BR "func (*digest) Write(" "p" " []byte) (" "n" " int, " "err" " error)"
