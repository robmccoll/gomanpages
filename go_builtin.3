.\"    Automatically generated by mango(1)
.TH "builtin" 3 "2014-11-26" "version 2014-11-26" "Go Packages"
.SH "NAME"
builtin \- Package builtin provides documentation for Go's predeclared identifiers.
.SH "SYNOPSIS"
.B import \*(lqbuiltin\(rq
.sp
.RB "type " ComplexType
.sp 0
.RS
.RE
.RB "type " FloatType
.sp 0
.RS
.RE
.RB "type " IntegerType
.sp 0
.RB "type " Type
.sp 0
.RS
.RE
.RB "type " Type1
.sp 0
.RB "type " error
.sp 0
.SH "DESCRIPTION"
Package builtin provides documentation for Go's predeclared identifiers. 
The items documented here are not actually in package builtin but their descriptions here allow godoc to present documentation for the language's special identifiers. 
.SH "TYPES"
.SS "ComplexType"
.B type ComplexType complex64
.PP
ComplexType is here for the purposes of documentation only. 
It is a stand\-in for either complex type: complex64 or complex128. 
.SS "FloatType"
.B type FloatType float32
.PP
FloatType is here for the purposes of documentation only. 
It is a stand\-in for either float type: float32 or float64. 
.SS "IntegerType"
.B type IntegerType int
.PP
IntegerType is here for the purposes of documentation only. 
It is a stand\-in for any integer type: int, uint, int8 etc. 
.SS "Type"
.B type Type int
.PP
Type is here for the purposes of documentation only. 
It is a stand\-in for any Go type, but represents the same type for any given function invocation. 
nil is a predeclared identifier representing the zero value for a pointer, channel, func, interface, map, or slice type. 
.PP
.B var 
.B 
.sp 0
.SS "Type1"
.B type Type1 int
.PP
Type1 is here for the purposes of documentation only. 
It is a stand\-in for any Go type, but represents the same type for any given function invocation. 
.SS "error"
.B type error interface {
.RS
.B Error() string
.sp 0
.RE
.B }
.PP
The error built\-in interface type is the conventional interface for representing an error condition, with the nil value representing no error. 
