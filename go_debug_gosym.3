.\"    Automatically generated by mango(1)
.TH "gosym" 3 "2014-11-26" "version 2014-11-26" "Go Packages"
.SH "NAME"
gosym \- Package gosym implements access to the Go symbol
and line number tables embedded in Go binaries generated
by the gc compilers.
.SH "SYNOPSIS"
.B import \*(lqgosym\(rq
.sp
.RB "type " DecodingError
.sp 0
.RS
.RB "func (*DecodingError) " Error
.sp 0
.RE
.RB "type " Func
.sp 0
.RS
.RB "func (Func) " BaseName
.sp 0
.RB "func (Func) " PackageName
.sp 0
.RB "func (Func) " ReceiverName
.sp 0
.RB "func (Func) " Static
.sp 0
.RE
.RB "type " LineTable
.sp 0
.RS
.RB "func " NewLineTable
.sp 0
.RB "func (*LineTable) " LineToPC
.sp 0
.RB "func (*LineTable) " PCToLine
.sp 0
.RE
.RB "type " Obj
.sp 0
.RS
.RE
.RB "type " Sym
.sp 0
.RS
.RB "func (*Sym) " BaseName
.sp 0
.RB "func (*Sym) " PackageName
.sp 0
.RB "func (*Sym) " ReceiverName
.sp 0
.RB "func (*Sym) " Static
.sp 0
.RE
.RB "type " Table
.sp 0
.RS
.RB "func " NewTable
.sp 0
.RB "func (*Table) " LineToPC
.sp 0
.RB "func (*Table) " LookupFunc
.sp 0
.RB "func (*Table) " LookupSym
.sp 0
.RB "func (*Table) " PCToFunc
.sp 0
.RB "func (*Table) " PCToLine
.sp 0
.RB "func (*Table) " SymByAddr
.sp 0
.RE
.RB "type " UnknownFileError
.sp 0
.RS
.RB "func (UnknownFileError) " Error
.sp 0
.RE
.RB "type " UnknownLineError
.sp 0
.RS
.RB "func (*UnknownLineError) " Error
.sp 0
.RE
.SH "TYPES"
.SS "DecodingError"
.B type DecodingError struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
DecodingError represents an error during the decoding of the symbol table. 
.PP
.BR "func (*DecodingError) Error() string"
.SS "Func"
.B type Func struct {
.RS
.B Entry uint64
.sp 0
.B *Sym
.sp 0
.B End uint64
.sp 0
.B Params []*Sym
.sp 0
.B Locals []*Sym
.sp 0
.B FrameSize int
.sp 0
.B LineTable *LineTable
.sp 0
.B Obj *Obj
.RE
.B }
.PP
A Func collects information about a single function. 
.PP
.BR "func (Func) BaseName() string"
.PP
BaseName returns the symbol name without the package or receiver name. 
.PP
.BR "func (Func) PackageName() string"
.PP
PackageName returns the package part of the symbol name, or the empty string if there is none. 
.PP
.BR "func (Func) ReceiverName() string"
.PP
ReceiverName returns the receiver type name of this symbol, or the empty string if there is none. 
.PP
.BR "func (Func) Static() bool"
.PP
Static reports whether this symbol is static (not visible outside its file). 
.SS "LineTable"
.B type LineTable struct {
.RS
.B Data []byte
.sp 0
.B PC uint64
.sp 0
.B Line int
.sp 0
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
A LineTable is a data structure mapping program counters to line numbers. 
.PP
In Go 1.1 and earlier, each function (represented by a Func) had its own LineTable, and the line number corresponded to a numbering of all source lines in the program, across all files. 
That absolute line number would then have to be converted separately to a file name and line number within the file. 
.PP
In Go 1.2, the format of the data changed so that there is a single LineTable for the entire program, shared by all Funcs, and there are no absolute line numbers, just line numbers within specific files. 
.PP
For the most part, LineTable's methods should be treated as an internal detail of the package; callers should use the methods on Table instead. 
.PP
.BR "func NewLineTable(" "data" " []byte, " "text" " uint64) *LineTable"
.PP
NewLineTable returns a new PC/line table corresponding to the encoded data. 
Text must be the start address of the corresponding text segment. 
.PP
.BR "func (*LineTable) LineToPC(" "line" " int, " "maxpc" " uint64) uint64"
.PP
LineToPC returns the program counter for the given line number, considering only program counters before maxpc. 
Callers should use Table's LineToPC method instead. 
.PP
.BR "func (*LineTable) PCToLine(" "pc" " uint64) int"
.PP
PCToLine returns the line number for the given program counter. 
Callers should use Table's PCToLine method instead. 
.SS "Obj"
.B type Obj struct {
.RS
.B Funcs []Func
.sp 0
.B Paths []Sym
.RE
.B }
.PP
An Obj represents a collection of functions in a symbol table. 
.PP
The exact method of division of a binary into separate Objs is an internal detail of the symbol table format. 
.PP
In early versions of Go each source file became a different Obj. 
.PP
In Go 1 and Go 1.1, each package produced one Obj for all Go sources and one Obj per C source file. 
.PP
In Go 1.2, there is a single Obj for the entire program. 
.SS "Sym"
.B type Sym struct {
.RS
.B Value uint64
.sp 0
.B Type byte
.sp 0
.B Name string
.sp 0
.B GoType uint64
.sp 0
.B Func *Func
.RE
.B }
.PP
A Sym represents a single symbol table entry. 
.PP
.BR "func (*Sym) BaseName() string"
.PP
BaseName returns the symbol name without the package or receiver name. 
.PP
.BR "func (*Sym) PackageName() string"
.PP
PackageName returns the package part of the symbol name, or the empty string if there is none. 
.PP
.BR "func (*Sym) ReceiverName() string"
.PP
ReceiverName returns the receiver type name of this symbol, or the empty string if there is none. 
.PP
.BR "func (*Sym) Static() bool"
.PP
Static reports whether this symbol is static (not visible outside its file). 
.SS "Table"
.B type Table struct {
.RS
.B Syms []Sym
.sp 0
.B Funcs []Func
.sp 0
.B Files map[string]*Obj
.sp 0
.B Objs []Obj
.sp 0
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
Table represents a Go symbol table. 
It stores all of the symbols decoded from the program and provides methods to translate between symbols, names, and addresses. 
.PP
.BR "func NewTable(" "symtab" " []byte, " "pcln" " *LineTable) (*Table, error)"
.PP
NewTable decodes the Go symbol table in data, returning an in\-memory representation. 
.PP
.BR "func (*Table) LineToPC(" "file" " string, " "line" " int) (" "pc" " uint64, " "fn" " *Func, " "err" " error)"
.PP
LineToPC looks up the first program counter on the given line in the named file. 
It returns UnknownPathError or UnknownLineError if there is an error looking up this line. 
.PP
.BR "func (*Table) LookupFunc(" "name" " string) *Func"
.PP
LookupFunc returns the text, data, or bss symbol with the given name, or nil if no such symbol is found. 
.PP
.BR "func (*Table) LookupSym(" "name" " string) *Sym"
.PP
LookupSym returns the text, data, or bss symbol with the given name, or nil if no such symbol is found. 
.PP
.BR "func (*Table) PCToFunc(" "pc" " uint64) *Func"
.PP
PCToFunc returns the function containing the program counter pc, or nil if there is no such function. 
.PP
.BR "func (*Table) PCToLine(" "pc" " uint64) (" "file" " string, " "line" " int, " "fn" " *Func)"
.PP
PCToLine looks up line number information for a program counter. 
If there is no information, it returns fn == nil. 
.PP
.BR "func (*Table) SymByAddr(" "addr" " uint64) *Sym"
.PP
SymByAddr returns the text, data, or bss symbol starting at the given address. 
.SS "UnknownFileError"
.B type UnknownFileError string
.PP
UnknownFileError represents a failure to find the specific file in the symbol table. 
.PP
.BR "func (UnknownFileError) Error() string"
.SS "UnknownLineError"
.B type UnknownLineError struct {
.RS
.B File string
.sp 0
.B Line int
.RE
.B }
.PP
UnknownLineError represents a failure to map a line to a program counter, either because the line is beyond the bounds of the file or because there is no code on the given line. 
.PP
.BR "func (*UnknownLineError) Error() string"
