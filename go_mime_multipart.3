.\"    Automatically generated by mango(1)
.TH "multipart" 3 "2014-11-26" "version 2014-11-26" "Go Packages"
.SH "NAME"
multipart \- Package multipart implements MIME multipart parsing, as defined in RFC
2046.
.SH "SYNOPSIS"
.B import \*(lqmultipart\(rq
.sp
.RB "type " File
.sp 0
.RB "type " FileHeader
.sp 0
.RS
.RB "func (*FileHeader) " Open
.sp 0
.RE
.RB "type " Form
.sp 0
.RS
.RB "func (*Form) " RemoveAll
.sp 0
.RE
.RB "type " Part
.sp 0
.RS
.RB "func (*Part) " Close
.sp 0
.RB "func (*Part) " FileName
.sp 0
.RB "func (*Part) " FormName
.sp 0
.RB "func (*Part) " Read
.sp 0
.RE
.RB "type " Reader
.sp 0
.RS
.RB "func " NewReader
.sp 0
.RB "func (*Reader) " NextPart
.sp 0
.RB "func (*Reader) " ReadForm
.sp 0
.RE
.RB "type " Writer
.sp 0
.RS
.RB "func " NewWriter
.sp 0
.RB "func (*Writer) " Boundary
.sp 0
.RB "func (*Writer) " Close
.sp 0
.RB "func (*Writer) " CreateFormField
.sp 0
.RB "func (*Writer) " CreateFormFile
.sp 0
.RB "func (*Writer) " CreatePart
.sp 0
.RB "func (*Writer) " FormDataContentType
.sp 0
.RB "func (*Writer) " SetBoundary
.sp 0
.RB "func (*Writer) " WriteField
.sp 0
.RE
.RB "type " part
.sp 0
.RS
.RB "func (*part) " Write
.sp 0
.RE
.RB "type " partReader
.sp 0
.RS
.RB "func (partReader) " Read
.sp 0
.RE
.RB "type " qpReader
.sp 0
.RS
.RB "func (*qpReader) " Read
.sp 0
.RE
.RB "type " sectionReadCloser
.sp 0
.RS
.RB "func (sectionReadCloser) " Close
.sp 0
.RE
.SH "DESCRIPTION"
The implementation is sufficient for HTTP (RFC 2388) and the multipart bodies generated by popular browsers. 
.SH "TYPES"
.SS "File"
.B type File interface {
.RS
.B io.Reader
.sp 0
.B io.ReaderAt
.sp 0
.B io.Seeker
.sp 0
.B io.Closer
.sp 0
.RE
.B }
.PP
File is an interface to access the file part of a multipart message. 
Its contents may be either stored in memory or on disk. 
If stored on disk, the File's underlying concrete type will be an *os.File. 
.SS "FileHeader"
.B type FileHeader struct {
.RS
.B Filename string
.sp 0
.B Header textproto.MIMEHeader
.sp 0
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
A FileHeader describes a file part of a multipart request. 
.PP
.BR "func (*FileHeader) Open() (File, error)"
.PP
Open opens and returns the FileHeader's associated File. 
.SS "Form"
.B type Form struct {
.RS
.B Value map[string][]string
.sp 0
.B File map[string][]*FileHeader
.RE
.B }
.PP
Form is a parsed multipart form. 
Its File parts are stored either in memory or on disk, and are accessible via the *FileHeader's Open method. 
Its Value parts are stored as strings. 
Both are keyed by field name. 
.PP
.BR "func (*Form) RemoveAll() error"
.PP
RemoveAll removes any temporary files associated with a Form. 
.SS "Part"
.B type Part struct {
.RS
.B Header textproto.MIMEHeader
.sp 0
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
A Part represents a single part in a multipart body. 
.PP
.BR "func (*Part) Close() error"
.PP
.BR "func (*Part) FileName() string"
.PP
FileName returns the filename parameter of the Part's Content\-Disposition header. 
.PP
.BR "func (*Part) FormName() string"
.PP
FormName returns the name parameter if p has a Content\-Disposition of type "form\-data". 
Otherwise it returns the empty string. 
.PP
.BR "func (*Part) Read(" "d" " []byte) (" "n" " int, " "err" " error)"
.PP
Read reads the body of a part, after its headers and before the next part (if any) begins. 
.SS "Reader"
.B type Reader struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
Reader is an iterator over parts in a MIME multipart body. 
Reader's underlying parser consumes its input as needed. 
Seeking isn't supported. 
.PP
.BR "func NewReader(" "r" " io.Reader, " "boundary" " string) *Reader"
.PP
NewReader creates a new multipart Reader reading from r using the given MIME boundary. 
.PP
The boundary is usually obtained from the "boundary" parameter of the message's "Content\-Type" header. 
Use mime.ParseMediaType to parse such headers. 
.PP
.BR "func (*Reader) NextPart() (*Part, error)"
.PP
NextPart returns the next part in the multipart or an error. 
When there are no more parts, the error io.EOF is returned. 
.PP
.BR "func (*Reader) ReadForm(" "maxMemory" " int64) (" "f" " *Form, " "err" " error)"
.PP
ReadForm parses an entire multipart message whose parts have a Content\-Disposition of "form\-data". 
It stores up to maxMemory bytes of the file parts in memory and the remainder on disk in temporary files. 
.SS "Writer"
.B type Writer struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
A Writer generates multipart messages. 
.PP
.BR "func NewWriter(" "w" " io.Writer) *Writer"
.PP
NewWriter returns a new multipart Writer with a random boundary, writing to w. 
.PP
.BR "func (*Writer) Boundary() string"
.PP
Boundary returns the Writer's boundary. 
.PP
.BR "func (*Writer) Close() error"
.PP
Close finishes the multipart message and writes the trailing boundary end line to the output. 
.PP
.BR "func (*Writer) CreateFormField(" "fieldname" " string) (io.Writer, error)"
.PP
CreateFormField calls CreatePart with a header using the given field name. 
.PP
.BR "func (*Writer) CreateFormFile(" "fieldname" ", " "filename" " string) (io.Writer, error)"
.PP
CreateFormFile is a convenience wrapper around CreatePart. 
It creates a new form\-data header with the provided field name and file name. 
.PP
.BR "func (*Writer) CreatePart(" "header" " textproto.MIMEHeader) (io.Writer, error)"
.PP
CreatePart creates a new multipart section with the provided header. 
The body of the part should be written to the returned Writer. 
After calling CreatePart, any previous part may no longer be written to. 
.PP
.BR "func (*Writer) FormDataContentType() string"
.PP
FormDataContentType returns the Content\-Type for an HTTP multipart/form\-data with this Writer's Boundary. 
.PP
.BR "func (*Writer) SetBoundary(" "boundary" " string) error"
.PP
SetBoundary overrides the Writer's default randomly\-generated boundary separator with an explicit value. 
.PP
SetBoundary must be called before any parts are created, may only contain certain ASCII characters, and must be 1\-69 bytes long. 
.PP
.BR "func (*Writer) WriteField(" "fieldname" ", " "value" " string) error"
.PP
WriteField calls CreateFormField and then writes the given value. 
.SS "part"
.B type part struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
.PP
.BR "func (*part) Write(" "d" " []byte) (" "n" " int, " "err" " error)"
.SS "partReader"
.B type partReader struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
partReader implements io.Reader by reading raw bytes directly from the wrapped *Part, without doing any Transfer\-Encoding decoding. 
.PP
.BR "func (partReader) Read(" "d" " []byte) (" "n" " int, " "err" " error)"
.SS "qpReader"
.B type qpReader struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
.PP
.BR "func (*qpReader) Read(" "p" " []byte) (" "n" " int, " "err" " error)"
.SS "sectionReadCloser"
.B type sectionReadCloser struct {
.RS
.RE
.B }
.PP
.PP
.BR "func (sectionReadCloser) Close() error"
