.\"    Automatically generated by mango(1)
.TH "filepath" 3 "2014-11-26" "version 2014-11-26" "Go Packages"
.SH "NAME"
filepath \- Package filepath implements utility routines for manipulating filename paths
in a way compatible with the target operating system-defined file paths.
.SH "SYNOPSIS"
.B import \*(lqfilepath\(rq
.sp
.B Constants
.sp 0
.B Variables
.sp 0
.RB "func " Abs
.sp 0
.RB "func " Base
.sp 0
.RB "func " Clean
.sp 0
.RB "func " Dir
.sp 0
.RB "func " EvalSymlinks
.sp 0
.RB "func " Ext
.sp 0
.RB "func " FromSlash
.sp 0
.RB "func " Glob
.sp 0
.RB "func " HasPrefix
.sp 0
.RB "func " IsAbs
.sp 0
.RB "func " Join
.sp 0
.RB "func " Match
.sp 0
.RB "func " Rel
.sp 0
.RB "func " Split
.sp 0
.RB "func " SplitList
.sp 0
.RB "func " ToSlash
.sp 0
.RB "func " VolumeName
.sp 0
.RB "func " Walk
.sp 0
.RB "type " WalkFunc
.sp 0
.SH "CONSTANTS"
.PP
.B const (
.RS
.B Separator 
.sp 0
.B ListSeparator 
.sp 0
.RE
.B )
.SH "VARIABLES"
ErrBadPattern indicates a globbing pattern was malformed. 
.PP
.B var 
.B ErrBadPattern 
.sp 0

.sp 0
SkipDir is used as a return value from WalkFuncs to indicate that the directory named in the call is to be skipped. 
It is not returned as an error by any function. 
.PP
.B var 
.B SkipDir 
.sp 0
.SH "FUNCTIONS"
.PP
.BR "func Abs(" "path" " string) (string, error)"
.PP
Abs returns an absolute representation of path. 
If the path is not absolute it will be joined with the current working directory to turn it into an absolute path. 
The absolute path name for a given file is not guaranteed to be unique. 
.PP
.BR "func Base(" "path" " string) string"
.PP
Base returns the last element of path. 
Trailing path separators are removed before extracting the last element. 
If the path is empty, Base returns ".". 
If the path consists entirely of separators, Base returns a single separator. 
.PP
.BR "func Clean(" "path" " string) string"
.PP
Clean returns the shortest path name equivalent to path by purely lexical processing. 
It applies the following rules iteratively until no further processing can be done: 
.PP
.RS
1. Replace multiple Separator elements with a single one.
.sp 0
2. Eliminate each \&. path name element (the current directory).
.sp 0
3. Eliminate each inner \&.. path name element (the parent directory)
.sp 0
along with the non\-.. element that precedes it.
.sp 0
4. Eliminate \&.. elements that begin a rooted path:
.sp 0
that is, replace "/.." by "/" at the beginning of a path,
.sp 0
assuming Separator is \(fm/'.
.sp 0
.sp
.RE
.PP
The returned path ends in a slash only if it represents a root directory, such as "/" on Unix or `C:\e` on Windows. 
.PP
If the result of this process is an empty string, Clean returns the string ".". 
.PP
See also Rob Pike, ``Lexical File Names in Plan 9 or Getting Dot\-Dot Right,'' http://plan9.bell\-labs.com/sys/doc/lexnames.html 
.PP
.BR "func Dir(" "path" " string) string"
.PP
Dir returns all but the last element of path, typically the path's directory. 
After dropping the final element, the path is Cleaned and trailing slashes are removed. 
If the path is empty, Dir returns ".". 
If the path consists entirely of separators, Dir returns a single separator. 
The returned path does not end in a separator unless it is the root directory. 
.PP
.BR "func EvalSymlinks(" "path" " string) (string, error)"
.PP
EvalSymlinks returns the path name after the evaluation of any symbolic links. 
If path is relative the result will be relative to the current directory, unless one of the components is an absolute symbolic link. 
.PP
.BR "func Ext(" "path" " string) string"
.PP
Ext returns the file name extension used by path. 
The extension is the suffix beginning at the final dot in the final element of path; it is empty if there is no dot. 
.PP
.BR "func FromSlash(" "path" " string) string"
.PP
FromSlash returns the result of replacing each slash ('/') character in path with a separator character. 
Multiple slashes are replaced by multiple separators. 
.PP
.BR "func Glob(" "pattern" " string) (" "matches" " []string, " "err" " error)"
.PP
Glob returns the names of all files matching pattern or nil if there is no matching file. 
The syntax of patterns is the same as in Match. 
The pattern may describe hierarchical names such as /usr/*/bin/ed (assuming the Separator is \(fm/'). 
.PP
.BR "func HasPrefix(" "p" ", " "prefix" " string) bool"
.PP
HasPrefix exists for historical compatibility and should not be used. 
.PP
.BR "func IsAbs(" "path" " string) bool"
.PP
IsAbs returns true if the path is absolute. 
.PP
.BR "func Join(" "elem" " ...string) string"
.PP
Join joins any number of path elements into a single path, adding a Separator if necessary. 
The result is Cleaned, in particular all empty strings are ignored. 
.PP
.BR "func Match(" "pattern" ", " "name" " string) (" "matched" " bool, " "err" " error)"
.PP
Match returns true if name matches the shell file name pattern. 
The pattern syntax is: 
.PP
.RS
pattern:
.sp 0
.RS
{ term }
.sp 0
.RE
term:
.sp 0
.RS
\(fm*'         matches any sequence of non\-Separator characters
.sp 0
\(fm?'         matches any single non\-Separator character
.sp 0
\(fm[' [ \(fm^' ] { character\-range } \(fm]'
.sp 0
character class (must be non\-empty)
.sp 0
c           matches character c (c != \(fm*', \(fm?', \(fm\e\e', \(fm[')
.sp 0
\(fm\e\e' c      matches character c
.sp 0
.sp
.RE
character\-range:
.sp 0
.RS
c           matches character c (c != \(fm\e\e', \(fm\-', \(fm]')
.sp 0
\(fm\e\e' c      matches character c
.sp 0
lo \(fm\-' hi   matches character c for lo <= c <= hi
.sp 0
.sp
.RE
.RE
.PP
Match requires pattern to match all of name, not just a substring. 
The only possible returned error is ErrBadPattern, when pattern is malformed. 
.PP
On Windows, escaping is disabled. 
Instead, \(fm\e\e' is treated as path separator. 
.PP
.BR "func Rel(" "basepath" ", " "targpath" " string) (string, error)"
.PP
Rel returns a relative path that is lexically equivalent to targpath when joined to basepath with an intervening separator. 
That is, Join(basepath, Rel(basepath, targpath)) is equivalent to targpath itself. 
On success, the returned path will always be relative to basepath, even if basepath and targpath share no elements. 
An error is returned if targpath can't be made relative to basepath or if knowing the current working directory would be necessary to compute it. 
.PP
.BR "func Split(" "path" " string) (" "dir" ", " "file" " string)"
.PP
Split splits path immediately following the final Separator, separating it into a directory and file name component. 
If there is no Separator in path, Split returns an empty dir and file set to path. 
The returned values have the property that path = dir+file. 
.PP
.BR "func SplitList(" "path" " string) []string"
.PP
SplitList splits a list of paths joined by the OS\-specific ListSeparator, usually found in PATH or GOPATH environment variables. 
Unlike strings.Split, SplitList returns an empty slice when passed an empty string. 
.PP
.BR "func ToSlash(" "path" " string) string"
.PP
ToSlash returns the result of replacing each separator character in path with a slash ('/') character. 
Multiple separators are replaced by multiple slashes. 
.PP
.BR "func VolumeName(" "path" " string) (" "v" " string)"
.PP
VolumeName returns leading volume name. 
Given "C:\efoo\ebar" it returns "C:" under windows. 
Given "\e\ehost\eshare\efoo" it returns "\e\ehost\eshare". 
On other platforms it returns "". 
.PP
.BR "func Walk(" "root" " string, " "walkFn" " WalkFunc) error"
.PP
Walk walks the file tree rooted at root, calling walkFn for each file or directory in the tree, including root. 
All errors that arise visiting files and directories are filtered by walkFn. 
The files are walked in lexical order, which makes the output deterministic but means that for very large directories Walk can be inefficient. 
Walk does not follow symbolic links. 
.SH "TYPES"
.SS "WalkFunc"
.B type WalkFunc func(path string, info os.FileInfo, err error) error
.PP
WalkFunc is the type of the function called for each file or directory visited by Walk. 
The path argument contains the argument to Walk as a prefix; that is, if Walk is called with "dir", which is a directory containing the file "a", the walk function will be called with argument "dir/a". 
The info argument is the os.FileInfo for the named path. 
.PP
If there was a problem walking to the file or directory named by path, the incoming error will describe the problem and the function can decide how to handle that error (and Walk will not descend into that directory). 
If an error is returned, processing stops. 
The sole exception is that if path is a directory and the function returns the special value SkipDir, the contents of the directory are skipped and processing continues as usual on the next file. 
