.\"    Automatically generated by mango(1)
.TH "fnv" 3 "2014-11-26" "version 2014-11-26" "Go Packages"
.SH "NAME"
fnv \- Package fnv implements FNV-1 and FNV-1a, non-cryptographic hash functions
created by Glenn Fowler, Landon Curt Noll, and Phong Vo.
.SH "SYNOPSIS"
.B import \*(lqfnv\(rq
.sp
.RB "func " New32
.sp 0
.RB "func " New32a
.sp 0
.RB "func " New64
.sp 0
.RB "func " New64a
.sp 0
.RB "type " sum32
.sp 0
.RS
.RB "func (*sum32) " BlockSize
.sp 0
.RB "func (*sum32) " Reset
.sp 0
.RB "func (*sum32) " Size
.sp 0
.RB "func (*sum32) " Sum
.sp 0
.RB "func (*sum32) " Sum32
.sp 0
.RB "func (*sum32) " Write
.sp 0
.RE
.RB "type " sum32a
.sp 0
.RS
.RB "func (*sum32a) " BlockSize
.sp 0
.RB "func (*sum32a) " Reset
.sp 0
.RB "func (*sum32a) " Size
.sp 0
.RB "func (*sum32a) " Sum
.sp 0
.RB "func (*sum32a) " Sum32
.sp 0
.RB "func (*sum32a) " Write
.sp 0
.RE
.RB "type " sum64
.sp 0
.RS
.RB "func (*sum64) " BlockSize
.sp 0
.RB "func (*sum64) " Reset
.sp 0
.RB "func (*sum64) " Size
.sp 0
.RB "func (*sum64) " Sum
.sp 0
.RB "func (*sum64) " Sum64
.sp 0
.RB "func (*sum64) " Write
.sp 0
.RE
.RB "type " sum64a
.sp 0
.RS
.RB "func (*sum64a) " BlockSize
.sp 0
.RB "func (*sum64a) " Reset
.sp 0
.RB "func (*sum64a) " Size
.sp 0
.RB "func (*sum64a) " Sum
.sp 0
.RB "func (*sum64a) " Sum64
.sp 0
.RB "func (*sum64a) " Write
.sp 0
.RE
.SH "DESCRIPTION"
Package fnv implements FNV\-1 and FNV\-1a, non\-cryptographic hash functions created by Glenn Fowler, Landon Curt Noll, and Phong Vo. 
See http://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function. 
.SH "FUNCTIONS"
.PP
.BR "func New32() hash.Hash32"
.PP
New32 returns a new 32\-bit FNV\-1 hash.Hash. 
.PP
.BR "func New32a() hash.Hash32"
.PP
New32a returns a new 32\-bit FNV\-1a hash.Hash. 
.PP
.BR "func New64() hash.Hash64"
.PP
New64 returns a new 64\-bit FNV\-1 hash.Hash. 
.PP
.BR "func New64a() hash.Hash64"
.PP
New64a returns a new 64\-bit FNV\-1a hash.Hash. 
.SH "TYPES"
.SS "sum32"
.B type sum32 uint32
.PP
.PP
.BR "func (*sum32) BlockSize() int"
.PP
.BR "func (*sum32) Reset()"
.PP
.BR "func (*sum32) Size() int"
.PP
.BR "func (*sum32) Sum(" "in" " []byte) []byte"
.PP
.BR "func (*sum32) Sum32() uint32"
.PP
.BR "func (*sum32) Write(" "data" " []byte) (int, error)"
.SS "sum32a"
.B type sum32a uint32
.PP
.PP
.BR "func (*sum32a) BlockSize() int"
.PP
.BR "func (*sum32a) Reset()"
.PP
.BR "func (*sum32a) Size() int"
.PP
.BR "func (*sum32a) Sum(" "in" " []byte) []byte"
.PP
.BR "func (*sum32a) Sum32() uint32"
.PP
.BR "func (*sum32a) Write(" "data" " []byte) (int, error)"
.SS "sum64"
.B type sum64 uint64
.PP
.PP
.BR "func (*sum64) BlockSize() int"
.PP
.BR "func (*sum64) Reset()"
.PP
.BR "func (*sum64) Size() int"
.PP
.BR "func (*sum64) Sum(" "in" " []byte) []byte"
.PP
.BR "func (*sum64) Sum64() uint64"
.PP
.BR "func (*sum64) Write(" "data" " []byte) (int, error)"
.SS "sum64a"
.B type sum64a uint64
.PP
.PP
.BR "func (*sum64a) BlockSize() int"
.PP
.BR "func (*sum64a) Reset()"
.PP
.BR "func (*sum64a) Size() int"
.PP
.BR "func (*sum64a) Sum(" "in" " []byte) []byte"
.PP
.BR "func (*sum64a) Sum64() uint64"
.PP
.BR "func (*sum64a) Write(" "data" " []byte) (int, error)"
