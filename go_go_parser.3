.\"    Automatically generated by mango(1)
.TH "parser" 3 "2014-11-26" "version 2014-11-26" "Go Packages"
.SH "NAME"
parser \- Package parser implements a parser for Go source files.
.SH "SYNOPSIS"
.B import \*(lqparser\(rq
.sp
.RB "func " ParseDir
.sp 0
.RB "func " ParseExpr
.sp 0
.RB "func " ParseFile
.sp 0
.RB "type " Mode
.sp 0
.SH "DESCRIPTION"
Package parser implements a parser for Go source files. 
Input may be provided in a variety of forms (see the various Parse* functions); the output is an abstract syntax tree (AST) representing the Go source. 
The parser is invoked through one of the Parse* functions. 
.SH "FUNCTIONS"
.PP
.BR "func ParseDir(" "fset" " *token.FileSet, " "path" " string, " "filter" " func(os.FileInfo) bool, " "mode" " Mode) (" "pkgs" " map[string]*ast.Package, " "first" " error)"
.PP
ParseDir calls ParseFile for all files with names ending in ".go" in the directory specified by path and returns a map of package name 
.B \->
package AST with all the packages found. 
.PP
If filter != nil, only the files with os.FileInfo entries passing through the filter (and ending in ".go") are considered. 
The mode bits are passed to ParseFile unchanged. 
Position information is recorded in fset. 
.PP
If the directory couldn't be read, a nil map and the respective error are returned. 
If a parse error occurred, a non\-nil but incomplete map and the first error encountered are returned. 
.PP
.BR "func ParseExpr(" "x" " string) (ast.Expr, error)"
.PP
ParseExpr is a convenience function for obtaining the AST of an expression x. 
The position information recorded in the AST is undefined. 
The filename used in error messages is the empty string. 
.PP
.BR "func ParseFile(" "fset" " *token.FileSet, " "filename" " string, " "src" " interface{}, " "mode" " Mode) (" "f" " *ast.File, " "err" " error)"
.PP
ParseFile parses the source code of a single Go source file and returns the corresponding ast.File node. 
The source code may be provided via the filename of the source file, or via the src parameter. 
.PP
If src != nil, ParseFile parses the source from src and the filename is only used when recording position information. 
The type of the argument for the src parameter must be string, []byte, or io.Reader. 
If src == nil, ParseFile parses the file specified by filename. 
.PP
The mode parameter controls the amount of source text parsed and other optional parser functionality. 
Position information is recorded in the file set fset. 
.PP
If the source couldn't be read, the returned AST is nil and the error indicates the specific failure. 
If the source was read but syntax errors were found, the result is a partial AST (with ast.Bad* nodes representing the fragments of erroneous source code). 
Multiple errors are returned via a scanner.ErrorList which is sorted by file position. 
.SH "TYPES"
.SS "Mode"
.B type Mode uint
.PP
A Mode value is a set of flags (or 0). 
They control the amount of source code parsed and other optional parser functionality. 
.PP
.B const (
.RS
.B PackageClauseOnly 
.sp 0
.B ImportsOnly 
.sp 0
.B ParseComments 
.sp 0
.B Trace 
.sp 0
.B DeclarationErrors 
.sp 0
.B SpuriousErrors 
.sp 0
.B AllErrors 
.sp 0
.RE
.B )
