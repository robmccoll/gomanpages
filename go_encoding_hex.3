.\"    Automatically generated by mango(1)
.TH "hex" 3 "2014-11-26" "version 2014-11-26" "Go Packages"
.SH "NAME"
hex \- Package hex implements hexadecimal encoding and decoding.
.SH "SYNOPSIS"
.B import \*(lqhex\(rq
.sp
.B Variables
.sp 0
.RB "func " Decode
.sp 0
.RB "func " DecodeString
.sp 0
.RB "func " DecodedLen
.sp 0
.RB "func " Dump
.sp 0
.RB "func " Dumper
.sp 0
.RB "func " Encode
.sp 0
.RB "func " EncodeToString
.sp 0
.RB "func " EncodedLen
.sp 0
.RB "type " InvalidByteError
.sp 0
.RS
.RB "func (InvalidByteError) " Error
.sp 0
.RE
.RB "type " dumper
.sp 0
.RS
.RB "func (*dumper) " Close
.sp 0
.RB "func (*dumper) " Write
.sp 0
.RE
.SH "VARIABLES"
ErrLength results from decoding an odd length slice. 
.PP
.B var 
.B ErrLength 
.sp 0
.SH "FUNCTIONS"
.PP
.BR "func Decode(" "dst" ", " "src" " []byte) (int, error)"
.PP
Decode decodes src into DecodedLen(len(src)) bytes, returning the actual number of bytes written to dst. 
.PP
If Decode encounters invalid input, it returns an error describing the failure. 
.PP
.BR "func DecodeString(" "s" " string) ([]byte, error)"
.PP
DecodeString returns the bytes represented by the hexadecimal string s. 
.PP
.BR "func DecodedLen(" "x" " int) int"
.PP
.BR "func Dump(" "data" " []byte) string"
.PP
Dump returns a string that contains a hex dump of the given data. 
The format of the hex dump matches the output of `hexdump 
.B \-C`
on the command line. 
.PP
.BR "func Dumper(" "w" " io.Writer) io.WriteCloser"
.PP
Dumper returns a WriteCloser that writes a hex dump of all written data to w. 
The format of the dump matches the output of `hexdump 
.B \-C`
on the command line. 
.PP
.BR "func Encode(" "dst" ", " "src" " []byte) int"
.PP
Encode encodes src into EncodedLen(len(src)) bytes of dst. 
As a convenience, it returns the number of bytes written to dst, but this value is always EncodedLen(len(src)). 
Encode implements hexadecimal encoding. 
.PP
.BR "func EncodeToString(" "src" " []byte) string"
.PP
EncodeToString returns the hexadecimal encoding of src. 
.PP
.BR "func EncodedLen(" "n" " int) int"
.PP
EncodedLen returns the length of an encoding of n source bytes. 
.SH "TYPES"
.SS "InvalidByteError"
.B type InvalidByteError byte
.PP
InvalidByteError values describe errors resulting from an invalid byte in a hex string. 
.PP
.BR "func (InvalidByteError) Error() string"
.SS "dumper"
.B type dumper struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
.PP
.BR "func (*dumper) Close() (" "err" " error)"
.PP
.BR "func (*dumper) Write(" "data" " []byte) (" "n" " int, " "err" " error)"
