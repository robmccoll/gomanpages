.\"    Automatically generated by mango(1)
.TH "cgi" 3 "2014-11-26" "version 2014-11-26" "Go Packages"
.SH "NAME"
cgi \- Package cgi implements CGI (Common Gateway Interface) as specified
in RFC 3875.
.SH "SYNOPSIS"
.B import \*(lqcgi\(rq
.sp
.RB "func " Request
.sp 0
.RB "func " RequestFromMap
.sp 0
.RB "func " Serve
.sp 0
.RB "type " Handler
.sp 0
.RS
.RB "func (*Handler) " ServeHTTP
.sp 0
.RE
.RB "type " response
.sp 0
.RS
.RB "func (*response) " Flush
.sp 0
.RB "func (*response) " Header
.sp 0
.RB "func (*response) " Write
.sp 0
.RB "func (*response) " WriteHeader
.sp 0
.RE
.SH "DESCRIPTION"
Note that using CGI means starting a new process to handle each request, which is typically less efficient than using a long\-running server. 
This package is intended primarily for compatibility with existing systems. 
.SH "FUNCTIONS"
.PP
.BR "func Request() (*http.Request, error)"
.PP
Request returns the HTTP request as represented in the current environment. 
This assumes the current program is being run by a web server in a CGI environment. 
The returned Request's Body is populated, if applicable. 
.PP
.BR "func RequestFromMap(" "params" " map[string]string) (*http.Request, error)"
.PP
RequestFromMap creates an http.Request from CGI variables. 
The returned Request's Body field is not populated. 
.PP
.BR "func Serve(" "handler" " http.Handler) error"
.PP
Serve executes the provided Handler on the currently active CGI request, if any. 
If there's no current CGI environment an error is returned. 
The provided handler may be nil to use http.DefaultServeMux. 
.SH "TYPES"
.SS "Handler"
.B type Handler struct {
.RS
.B Path string
.sp 0
.B Root string
.sp 0
.B Dir string
.sp 0
.B Env []string
.sp 0
.B InheritEnv []string
.sp 0
.B Logger *log.Logger
.sp 0
.B Args []string
.sp 0
.B PathLocationHandler http.Handler
.RE
.B }
.PP
Handler runs an executable in a subprocess with a CGI environment. 
.PP
.BR "func (*Handler) ServeHTTP(" "rw" " http.ResponseWriter, " "req" " *http.Request)"
.SS "response"
.B type response struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
.PP
.BR "func (*response) Flush()"
.PP
.BR "func (*response) Header() http.Header"
.PP
.BR "func (*response) Write(" "p" " []byte) (" "n" " int, " "err" " error)"
.PP
.BR "func (*response) WriteHeader(" "code" " int)"
