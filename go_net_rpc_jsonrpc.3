.\"    Automatically generated by mango(1)
.TH "jsonrpc" 3 "2014-11-26" "version 2014-11-26" "Go Packages"
.SH "NAME"
jsonrpc \- Package jsonrpc implements a JSON-RPC ClientCodec and ServerCodec
for the rpc package.
.SH "SYNOPSIS"
.B import \*(lqjsonrpc\(rq
.sp
.RB "func " Dial
.sp 0
.RB "func " NewClient
.sp 0
.RB "func " NewClientCodec
.sp 0
.RB "func " NewServerCodec
.sp 0
.RB "func " ServeConn
.sp 0
.RB "type " clientCodec
.sp 0
.RS
.RB "func (*clientCodec) " Close
.sp 0
.RB "func (*clientCodec) " ReadResponseBody
.sp 0
.RB "func (*clientCodec) " ReadResponseHeader
.sp 0
.RB "func (*clientCodec) " WriteRequest
.sp 0
.RE
.RB "type " clientRequest
.sp 0
.RB "type " clientResponse
.sp 0
.RS
.RE
.RB "type " serverCodec
.sp 0
.RS
.RB "func (*serverCodec) " Close
.sp 0
.RB "func (*serverCodec) " ReadRequestBody
.sp 0
.RB "func (*serverCodec) " ReadRequestHeader
.sp 0
.RB "func (*serverCodec) " WriteResponse
.sp 0
.RE
.RB "type " serverRequest
.sp 0
.RS
.RE
.RB "type " serverResponse
.sp 0
.SH "FUNCTIONS"
.PP
.BR "func Dial(" "network" ", " "address" " string) (*rpc.Client, error)"
.PP
Dial connects to a JSON\-RPC server at the specified network address. 
.PP
.BR "func NewClient(" "conn" " io.ReadWriteCloser) *rpc.Client"
.PP
NewClient returns a new rpc.Client to handle requests to the set of services at the other end of the connection. 
.PP
.BR "func NewClientCodec(" "conn" " io.ReadWriteCloser) rpc.ClientCodec"
.PP
NewClientCodec returns a new rpc.ClientCodec using JSON\-RPC on conn. 
.PP
.BR "func NewServerCodec(" "conn" " io.ReadWriteCloser) rpc.ServerCodec"
.PP
NewServerCodec returns a new rpc.ServerCodec using JSON\-RPC on conn. 
.PP
.BR "func ServeConn(" "conn" " io.ReadWriteCloser)"
.PP
ServeConn runs the JSON\-RPC server on a single connection. 
ServeConn blocks, serving the connection until the client hangs up. 
The caller typically invokes ServeConn in a go statement. 
.SH "TYPES"
.SS "clientCodec"
.B type clientCodec struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
.PP
.BR "func (*clientCodec) Close() error"
.PP
.BR "func (*clientCodec) ReadResponseBody(" "x" " interface{}) error"
.PP
.BR "func (*clientCodec) ReadResponseHeader(" "r" " *rpc.Response) error"
.PP
.BR "func (*clientCodec) WriteRequest(" "r" " *rpc.Request, " "param" " interface{}) error"
.SS "clientRequest"
.B type clientRequest struct {
.RS
.B Method string
.sp 0
.B Params []interface{}
.sp 0
.B Id uint64
.RE
.B }
.SS "clientResponse"
.B type clientResponse struct {
.RS
.B Id uint64
.sp 0
.B Result *json.RawMessage
.sp 0
.B Error interface{}
.RE
.B }
.PP
.SS "serverCodec"
.B type serverCodec struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
.PP
.BR "func (*serverCodec) Close() error"
.PP
.BR "func (*serverCodec) ReadRequestBody(" "x" " interface{}) error"
.PP
.BR "func (*serverCodec) ReadRequestHeader(" "r" " *rpc.Request) error"
.PP
.BR "func (*serverCodec) WriteResponse(" "r" " *rpc.Response, " "x" " interface{}) error"
.SS "serverRequest"
.B type serverRequest struct {
.RS
.B Method string
.sp 0
.B Params *json.RawMessage
.sp 0
.B Id *json.RawMessage
.RE
.B }
.PP
.SS "serverResponse"
.B type serverResponse struct {
.RS
.B Id *json.RawMessage
.sp 0
.B Result interface{}
.sp 0
.B Error interface{}
.RE
.B }
