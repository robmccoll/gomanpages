.\"    Automatically generated by mango(1)
.TH "rand" 3 "2014-11-26" "version 2014-11-26" "Go Packages"
.SH "NAME"
rand \- Package rand implements a cryptographically secure
pseudorandom number generator.
.SH "SYNOPSIS"
.B import \*(lqrand\(rq
.sp
.B Variables
.sp 0
.RB "func " Int
.sp 0
.RB "func " Prime
.sp 0
.RB "func " Read
.sp 0
.RB "type " devReader
.sp 0
.RS
.RB "func (*devReader) " Read
.sp 0
.RE
.RB "type " reader
.sp 0
.RS
.RB "func (*reader) " Read
.sp 0
.RE
.RB "type " rngReader
.sp 0
.RS
.RB "func (*rngReader) " Read
.sp 0
.RE
.SH "VARIABLES"
Reader is a global, shared instance of a cryptographically strong pseudo\-random generator. 
On Unix\-like systems, Reader reads from /dev/urandom. 
On Windows systems, Reader uses the CryptGenRandom API. 
.PP
.B var 
.B Reader 
.sp 0
.SH "FUNCTIONS"
.PP
.BR "func Int(" "rand" " io.Reader, " "max" " *big.Int) (" "n" " *big.Int, " "err" " error)"
.PP
Int returns a uniform random value in [0, max). 
It panics if max <= 0. 
.PP
.BR "func Prime(" "rand" " io.Reader, " "bits" " int) (" "p" " *big.Int, " "err" " error)"
.PP
Prime returns a number, p, of the given size, such that p is prime with high probability. 
Prime will return error for any error returned by rand.Read or if bits < 2. 
.PP
.BR "func Read(" "b" " []byte) (" "n" " int, " "err" " error)"
.PP
Read is a helper function that calls Reader.Read using io.ReadFull. 
On return, n == 
.BR len (b)
if and only if err == nil. 
.SH "TYPES"
.SS "devReader"
.B type devReader struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
A devReader satisfies reads by reading the file named name. 
.PP
.BR "func (*devReader) Read(" "b" " []byte) (" "n" " int, " "err" " error)"
.SS "reader"
.B type reader struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
.PP
.BR "func (*reader) Read(" "b" " []byte) (" "n" " int, " "err" " error)"
.SS "rngReader"
.B type rngReader struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
A rngReader satisfies reads by reading from the Windows CryptGenRandom API. 
.PP
.BR "func (*rngReader) Read(" "b" " []byte) (" "n" " int, " "err" " error)"
