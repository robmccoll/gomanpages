.\"    Automatically generated by mango(1)
.TH "base64" 3 "2014-11-26" "version 2014-11-26" "Go Packages"
.SH "NAME"
base64 \- Package base64 implements base64 encoding as specified by RFC 4648.
.SH "SYNOPSIS"
.B import \*(lqbase64\(rq
.sp
.B Variables
.sp 0
.RB "func " NewDecoder
.sp 0
.RB "func " NewEncoder
.sp 0
.RB "type " CorruptInputError
.sp 0
.RS
.RB "func (CorruptInputError) " Error
.sp 0
.RE
.RB "type " Encoding
.sp 0
.RS
.RB "func " NewEncoding
.sp 0
.RB "func (*Encoding) " Decode
.sp 0
.RB "func (*Encoding) " DecodeString
.sp 0
.RB "func (*Encoding) " DecodedLen
.sp 0
.RB "func (*Encoding) " Encode
.sp 0
.RB "func (*Encoding) " EncodeToString
.sp 0
.RB "func (*Encoding) " EncodedLen
.sp 0
.RE
.RB "type " decoder
.sp 0
.RS
.RB "func (*decoder) " Read
.sp 0
.RE
.RB "type " encoder
.sp 0
.RS
.RB "func (*encoder) " Close
.sp 0
.RB "func (*encoder) " Write
.sp 0
.RE
.RB "type " newlineFilteringReader
.sp 0
.RS
.RB "func (*newlineFilteringReader) " Read
.sp 0
.RE
.SH "VARIABLES"
StdEncoding is the standard base64 encoding, as defined in RFC 4648. 
.PP
.B var 
.B StdEncoding 
.sp 0

.sp 0
URLEncoding is the alternate base64 encoding defined in RFC 4648. 
It is typically used in URLs and file names. 
.PP
.B var 
.B URLEncoding 
.sp 0
.SH "FUNCTIONS"
.PP
.BR "func NewDecoder(" "enc" " *Encoding, " "r" " io.Reader) io.Reader"
.PP
NewDecoder constructs a new base64 stream decoder. 
.PP
.BR "func NewEncoder(" "enc" " *Encoding, " "w" " io.Writer) io.WriteCloser"
.PP
NewEncoder returns a new base64 stream encoder. 
Data written to the returned writer will be encoded using enc and then written to w. 
Base64 encodings operate in 4\-byte blocks; when finished writing, the caller must Close the returned encoder to flush any partially written blocks. 
.SH "TYPES"
.SS "CorruptInputError"
.B type CorruptInputError int64
.PP
.PP
.BR "func (CorruptInputError) Error() string"
.SS "Encoding"
.B type Encoding struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
An Encoding is a radix 64 encoding/decoding scheme, defined by a 64\-character alphabet. 
The most common encoding is the "base64" encoding defined in RFC 4648 and used in MIME (RFC 2045) and PEM (RFC 1421). 
RFC 4648 also defines an alternate encoding, which is the standard encoding with 
.B \-
and _ substituted for + and /. 
.PP
.BR "func NewEncoding(" "encoder" " string) *Encoding"
.PP
NewEncoding returns a new Encoding defined by the given alphabet, which must be a 64\-byte string. 
.PP
.BR "func (*Encoding) Decode(" "dst" ", " "src" " []byte) (" "n" " int, " "err" " error)"
.PP
Decode decodes src using the encoding enc. 
It writes at most DecodedLen(len(src)) bytes to dst and returns the number of bytes written. 
If src contains invalid base64 data, it will return the number of bytes successfully written and CorruptInputError. 
New line characters (\er and \en) are ignored. 
.PP
.BR "func (*Encoding) DecodeString(" "s" " string) ([]byte, error)"
.PP
DecodeString returns the bytes represented by the base64 string s. 
.PP
.BR "func (*Encoding) DecodedLen(" "n" " int) int"
.PP
DecodedLen returns the maximum length in bytes of the decoded data corresponding to n bytes of base64\-encoded data. 
.PP
.BR "func (*Encoding) Encode(" "dst" ", " "src" " []byte)"
.PP
Encode encodes src using the encoding enc, writing EncodedLen(len(src)) bytes to dst. 
.PP
The encoding pads the output to a multiple of 4 bytes, so Encode is not appropriate for use on individual blocks of a large data stream. 
Use NewEncoder() instead. 
.PP
.BR "func (*Encoding) EncodeToString(" "src" " []byte) string"
.PP
EncodeToString returns the base64 encoding of src. 
.PP
.BR "func (*Encoding) EncodedLen(" "n" " int) int"
.PP
EncodedLen returns the length in bytes of the base64 encoding of an input buffer of length n. 
.SS "decoder"
.B type decoder struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
.PP
.BR "func (*decoder) Read(" "p" " []byte) (" "n" " int, " "err" " error)"
.SS "encoder"
.B type encoder struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
.PP
.BR "func (*encoder) Close() error"
.PP
Close flushes any pending output from the encoder. 
It is an error to call Write after calling Close. 
.PP
.BR "func (*encoder) Write(" "p" " []byte) (" "n" " int, " "err" " error)"
.SS "newlineFilteringReader"
.B type newlineFilteringReader struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
.PP
.BR "func (*newlineFilteringReader) Read(" "p" " []byte) (int, error)"
