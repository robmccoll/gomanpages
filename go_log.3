.\"    Automatically generated by mango(1)
.TH "log" 3 "2014-11-26" "version 2014-11-26" "Go Packages"
.SH "NAME"
log \- Package log implements a simple logging package.
.SH "SYNOPSIS"
.B import \*(lqlog\(rq
.sp
.B Constants
.sp 0
.RB "func " Fatal
.sp 0
.RB "func " Fatalf
.sp 0
.RB "func " Fatalln
.sp 0
.RB "func " Flags
.sp 0
.RB "func " Panic
.sp 0
.RB "func " Panicf
.sp 0
.RB "func " Panicln
.sp 0
.RB "func " Prefix
.sp 0
.RB "func " Print
.sp 0
.RB "func " Printf
.sp 0
.RB "func " Println
.sp 0
.RB "func " SetFlags
.sp 0
.RB "func " SetOutput
.sp 0
.RB "func " SetPrefix
.sp 0
.RB "type " Logger
.sp 0
.RS
.RB "func " New
.sp 0
.RB "func (*Logger) " Fatal
.sp 0
.RB "func (*Logger) " Fatalf
.sp 0
.RB "func (*Logger) " Fatalln
.sp 0
.RB "func (*Logger) " Flags
.sp 0
.RB "func (*Logger) " Output
.sp 0
.RB "func (*Logger) " Panic
.sp 0
.RB "func (*Logger) " Panicf
.sp 0
.RB "func (*Logger) " Panicln
.sp 0
.RB "func (*Logger) " Prefix
.sp 0
.RB "func (*Logger) " Print
.sp 0
.RB "func (*Logger) " Printf
.sp 0
.RB "func (*Logger) " Println
.sp 0
.RB "func (*Logger) " SetFlags
.sp 0
.RB "func (*Logger) " SetPrefix
.sp 0
.RE
.SH "DESCRIPTION"
Package log implements a simple logging package. 
It defines a type, Logger, with methods for formatting output. 
It also has a predefined \(fmstandard' Logger accessible through helper functions Print[f|ln], Fatal[f|ln], and Panic[f|ln], which are easier to use than creating a Logger manually. 
That logger writes to standard error and prints the date and time of each logged message. 
The Fatal functions call 
.BR os.Exit (1)
after writing the log message. 
The Panic functions call panic after writing the log message. 
.SH "CONSTANTS"
These flags define which text to prefix to each log entry generated by the Logger. 
.PP
.B const (
.RS
.B Ldate 
.sp 0
.B Ltime 
.sp 0
.B Lmicroseconds 
.sp 0
.B Llongfile 
.sp 0
.B Lshortfile 
.sp 0
.B LstdFlags 
.sp 0
.RE
.B )
.SH "FUNCTIONS"
.PP
.BR "func Fatal(" "v" " ...interface{})"
.PP
Fatal is equivalent to Print() followed by a call to os.Exit(1). 
.PP
.BR "func Fatalf(" "format" " string, " "v" " ...interface{})"
.PP
Fatalf is equivalent to Printf() followed by a call to os.Exit(1). 
.PP
.BR "func Fatalln(" "v" " ...interface{})"
.PP
Fatalln is equivalent to Println() followed by a call to os.Exit(1). 
.PP
.BR "func Flags() int"
.PP
Flags returns the output flags for the standard logger. 
.PP
.BR "func Panic(" "v" " ...interface{})"
.PP
Panic is equivalent to Print() followed by a call to panic(). 
.PP
.BR "func Panicf(" "format" " string, " "v" " ...interface{})"
.PP
Panicf is equivalent to Printf() followed by a call to panic(). 
.PP
.BR "func Panicln(" "v" " ...interface{})"
.PP
Panicln is equivalent to Println() followed by a call to panic(). 
.PP
.BR "func Prefix() string"
.PP
Prefix returns the output prefix for the standard logger. 
.PP
.BR "func Print(" "v" " ...interface{})"
.PP
Print calls Output to print to the standard logger. 
Arguments are handled in the manner of fmt.Print. 
.PP
.BR "func Printf(" "format" " string, " "v" " ...interface{})"
.PP
Printf calls Output to print to the standard logger. 
Arguments are handled in the manner of fmt.Printf. 
.PP
.BR "func Println(" "v" " ...interface{})"
.PP
Println calls Output to print to the standard logger. 
Arguments are handled in the manner of fmt.Println. 
.PP
.BR "func SetFlags(" "flag" " int)"
.PP
SetFlags sets the output flags for the standard logger. 
.PP
.BR "func SetOutput(" "w" " io.Writer)"
.PP
SetOutput sets the output destination for the standard logger. 
.PP
.BR "func SetPrefix(" "prefix" " string)"
.PP
SetPrefix sets the output prefix for the standard logger. 
.SH "TYPES"
.SS "Logger"
.B type Logger struct {
.RS
.sp 0
.B //contains unexported fields.
.RE
.B }
.PP
A Logger represents an active logging object that generates lines of output to an io.Writer. 
Each logging operation makes a single call to the Writer's Write method. 
A Logger can be used simultaneously from multiple goroutines; it guarantees to serialize access to the Writer. 
.PP
.BR "func New(" "out" " io.Writer, " "prefix" " string, " "flag" " int) *Logger"
.PP
New creates a new Logger. 
The out variable sets the destination to which log data will be written. 
The prefix appears at the beginning of each generated log line. 
The flag argument defines the logging properties. 
.PP
.BR "func (*Logger) Fatal(" "v" " ...interface{})"
.PP
Fatal is equivalent to l.Print() followed by a call to os.Exit(1). 
.PP
.BR "func (*Logger) Fatalf(" "format" " string, " "v" " ...interface{})"
.PP
Fatalf is equivalent to l.Printf() followed by a call to os.Exit(1). 
.PP
.BR "func (*Logger) Fatalln(" "v" " ...interface{})"
.PP
Fatalln is equivalent to l.Println() followed by a call to os.Exit(1). 
.PP
.BR "func (*Logger) Flags() int"
.PP
Flags returns the output flags for the logger. 
.PP
.BR "func (*Logger) Output(" "calldepth" " int, " "s" " string) error"
.PP
Output writes the output for a logging event. 
The string s contains the text to print after the prefix specified by the flags of the Logger. 
A newline is appended if the last character of s is not already a newline. 
Calldepth is used to recover the PC and is provided for generality, although at the moment on all pre\-defined paths it will be 2. 
.PP
.BR "func (*Logger) Panic(" "v" " ...interface{})"
.PP
Panic is equivalent to l.Print() followed by a call to panic(). 
.PP
.BR "func (*Logger) Panicf(" "format" " string, " "v" " ...interface{})"
.PP
Panicf is equivalent to l.Printf() followed by a call to panic(). 
.PP
.BR "func (*Logger) Panicln(" "v" " ...interface{})"
.PP
Panicln is equivalent to l.Println() followed by a call to panic(). 
.PP
.BR "func (*Logger) Prefix() string"
.PP
Prefix returns the output prefix for the logger. 
.PP
.BR "func (*Logger) Print(" "v" " ...interface{})"
.PP
Print calls l.Output to print to the logger. 
Arguments are handled in the manner of fmt.Print. 
.PP
.BR "func (*Logger) Printf(" "format" " string, " "v" " ...interface{})"
.PP
Printf calls l.Output to print to the logger. 
Arguments are handled in the manner of fmt.Printf. 
.PP
.BR "func (*Logger) Println(" "v" " ...interface{})"
.PP
Println calls l.Output to print to the logger. 
Arguments are handled in the manner of fmt.Println. 
.PP
.BR "func (*Logger) SetFlags(" "flag" " int)"
.PP
SetFlags sets the output flags for the logger. 
.PP
.BR "func (*Logger) SetPrefix(" "prefix" " string)"
.PP
SetPrefix sets the output prefix for the logger. 
