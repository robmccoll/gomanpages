.\"    Automatically generated by mango(1)
.TH "ecdsa" 3 "2014-11-26" "version 2014-11-26" "Go Packages"
.SH "NAME"
ecdsa \- Package ecdsa implements the Elliptic Curve Digital Signature Algorithm, as
defined in FIPS 186-3.
.SH "SYNOPSIS"
.B import \*(lqecdsa\(rq
.sp
.RB "func " Sign
.sp 0
.RB "func " Verify
.sp 0
.RB "type " PrivateKey
.sp 0
.RS
.RB "func " GenerateKey
.sp 0
.RE
.RB "type " PublicKey
.sp 0
.SH "FUNCTIONS"
.PP
.BR "func Sign(" "rand" " io.Reader, " "priv" " *PrivateKey, " "hash" " []byte) (" "r" ", " "s" " *big.Int, " "err" " error)"
.PP
Sign signs an arbitrary length hash (which should be the result of hashing a larger message) using the private key, priv. 
It returns the signature as a pair of integers. 
The security of the private key depends on the entropy of rand. 
.PP
.BR "func Verify(" "pub" " *PublicKey, " "hash" " []byte, " "r" ", " "s" " *big.Int) bool"
.PP
Verify verifies the signature in r, s of hash using the public key, pub. 
Its return value records whether the signature is valid. 
.SH "TYPES"
.SS "PrivateKey"
.B type PrivateKey struct {
.RS
.B PublicKey
.sp 0
.B D *big.Int
.RE
.B }
.PP
PrivateKey represents a ECDSA private key. 
.PP
.BR "func GenerateKey(" "c" " elliptic.Curve, " "rand" " io.Reader) (" "priv" " *PrivateKey, " "err" " error)"
.PP
GenerateKey generates a public and private key pair. 
.SS "PublicKey"
.B type PublicKey struct {
.RS
.B X, Y *big.Int
.RE
.B }
.PP
PublicKey represents an ECDSA public key. 
